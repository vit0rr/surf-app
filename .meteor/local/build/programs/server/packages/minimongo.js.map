{"version":3,"sources":["meteor://ðŸ’»app/packages/minimongo/minimongo_server.js","meteor://ðŸ’»app/packages/minimongo/common.js","meteor://ðŸ’»app/packages/minimongo/constants.js","meteor://ðŸ’»app/packages/minimongo/cursor.js","meteor://ðŸ’»app/packages/minimongo/local_collection.js","meteor://ðŸ’»app/packages/minimongo/matcher.js","meteor://ðŸ’»app/packages/minimongo/minimongo_common.js","meteor://ðŸ’»app/packages/minimongo/observe_handle.js","meteor://ðŸ’»app/packages/minimongo/sorter.js"],"names":["module","link","hasOwn","isNumericKey","isOperatorObject","pathsToTree","projectionDetails","v","Minimongo","_pathsElidingNumericKeys","paths","map","path","split","filter","part","join","Matcher","prototype","affectedByModifier","modifier","Object","assign","$set","$unset","meaningfulPaths","_getPaths","modifiedPaths","concat","keys","some","mod","meaningfulPath","sel","i","j","length","canBecomeTrueByModifier","isSimple","modifierPaths","pathHasNumericKeys","expectedScalarIsObject","_selector","modifierPath","startsWith","matchingDocument","EJSON","clone","LocalCollection","_modify","error","name","setPropertyError","documentMatches","result","combineIntoProjection","projection","selectorPaths","includes","combineImportantPathsIntoProjection","_matchingDocument","undefined","fallback","valueSelector","$eq","$in","matcher","placeholder","find","onlyContainsKeys","lowerBound","Infinity","upperBound","forEach","op","call","middle","x","Sorter","_selectorForAffectedByModifier","details","tree","node","fullPath","mergedProjection","treeToPaths","including","mergedExclProjection","getPaths","selector","_paths","obj","every","k","prefix","arguments","key","value","export","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","makeLookupFunction","nothingMatcher","populateDocumentWithQueryFields","regexpElementMatcher","default","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","Error","divisor","remainder","elementMatchers","option","RegExp","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","operandAliasMap","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","byte","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","LOGICAL_OPERATORS","reduce","a","b","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","doc","fn","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","_isUpdate","arrayIndices","andSomeMatchers","subMatchers","docOrBranches","match","subResult","selectors","docSelector","options","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","branches","expanded","element","matched","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","thisIsArray","push","Number","isInteger","Uint8Array","Int32Array","buffer","isBinary","ArrayBuffer","max","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","s","inconsistentOK","theseAreOperators","selKey","thisIsOperator","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","firstPart","lookupRest","slice","buildResult","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","operatorMatchers","operator","simpleRange","simpleEquality","simpleInclusion","newLeafFn","conflictFn","root","pathArray","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","keyPath","rule","projectionRulesTree","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","getAsyncMethodName","ASYNC_COLLECTION_METHODS","ASYNC_CURSOR_METHODS","method","replace","Cursor","constructor","collection","sorter","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","skip","limit","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","count","_depend","added","removed","_getRawObjects","ordered","fetch","Symbol","iterator","addedBefore","changed","movedBefore","index","objects","next","done","asyncIterator","syncResult","Promise","asyncApply","resolve","callback","thisArg","getTransform","observe","_observeFromObserveChanges","observeChanges","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","args","_observeQueue","queueTask","apply","_suppress_initial","handle","ObserveHandle","stop","active","onInvalidate","drain","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","applySkipLimit","selectedDoc","_docs","get","set","clear","id","matchResult","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","asyncName","isCalledFromAsync","_len","_key","reject","_objectSpread","Meteor","_SynchronousQueue","create","_savedOriginals","countDocuments","countAsync","estimatedDocumentCount","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","matched_before","old_doc","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","IdMap","idParse","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","ruleTree","subdoc","selectorDocument","isModify","_isModificationMod","newDoc","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","_fromObserve","nonMutatingCallbacks","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$inc","$min","$max","$mul","$rename","target2","$setOnInsert","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$bit","$v","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","Decimal","_Package$mongoDecima","DecimalStub","isUpdate","_docMatcher","_compileSelector","hasWhere","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","isNaN","getTime","minus","toNumber","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","_keyComparator","composeComparators","_keyFieldComparator","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","invert","compare","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\nimport {\n  hasOwn,\n  isNumericKey,\n  isOperatorObject,\n  pathsToTree,\n  projectionDetails,\n} from './common.js';\n\nMinimongo._pathsElidingNumericKeys = paths => paths.map(path =>\n  path.split('.').filter(part => !isNumericKey(part)).join('.')\n);\n\n// Returns true if the modifier applied to some document may change the result\n// of matching the document by selector\n// The modifier is always in a form of Object:\n//  - $set\n//    - 'a.b.22.z': value\n//    - 'foo.bar': 42\n//  - $unset\n//    - 'abc.d': 1\nMinimongo.Matcher.prototype.affectedByModifier = function(modifier) {\n  // safe check for $set/$unset being objects\n  modifier = Object.assign({$set: {}, $unset: {}}, modifier);\n\n  const meaningfulPaths = this._getPaths();\n  const modifiedPaths = [].concat(\n    Object.keys(modifier.$set),\n    Object.keys(modifier.$unset)\n  );\n\n  return modifiedPaths.some(path => {\n    const mod = path.split('.');\n\n    return meaningfulPaths.some(meaningfulPath => {\n      const sel = meaningfulPath.split('.');\n\n      let i = 0, j = 0;\n\n      while (i < sel.length && j < mod.length) {\n        if (isNumericKey(sel[i]) && isNumericKey(mod[j])) {\n          // foo.4.bar selector affected by foo.4 modifier\n          // foo.3.bar selector unaffected by foo.4 modifier\n          if (sel[i] === mod[j]) {\n            i++;\n            j++;\n          } else {\n            return false;\n          }\n        } else if (isNumericKey(sel[i])) {\n          // foo.4.bar selector unaffected by foo.bar modifier\n          return false;\n        } else if (isNumericKey(mod[j])) {\n          j++;\n        } else if (sel[i] === mod[j]) {\n          i++;\n          j++;\n        } else {\n          return false;\n        }\n      }\n\n      // One is a prefix of another, taking numeric fields into account\n      return true;\n    });\n  });\n};\n\n// @param modifier - Object: MongoDB-styled modifier with `$set`s and `$unsets`\n//                           only. (assumed to come from oplog)\n// @returns - Boolean: if after applying the modifier, selector can start\n//                     accepting the modified value.\n// NOTE: assumes that document affected by modifier didn't match this Matcher\n// before, so if modifier can't convince selector in a positive change it would\n// stay 'false'.\n// Currently doesn't support $-operators and numeric indices precisely.\nMinimongo.Matcher.prototype.canBecomeTrueByModifier = function(modifier) {\n  if (!this.affectedByModifier(modifier)) {\n    return false;\n  }\n\n  if (!this.isSimple()) {\n    return true;\n  }\n\n  modifier = Object.assign({$set: {}, $unset: {}}, modifier);\n\n  const modifierPaths = [].concat(\n    Object.keys(modifier.$set),\n    Object.keys(modifier.$unset)\n  );\n\n  if (this._getPaths().some(pathHasNumericKeys) ||\n      modifierPaths.some(pathHasNumericKeys)) {\n    return true;\n  }\n\n  // check if there is a $set or $unset that indicates something is an\n  // object rather than a scalar in the actual object where we saw $-operator\n  // NOTE: it is correct since we allow only scalars in $-operators\n  // Example: for selector {'a.b': {$gt: 5}} the modifier {'a.b.c':7} would\n  // definitely set the result to false as 'a.b' appears to be an object.\n  const expectedScalarIsObject = Object.keys(this._selector).some(path => {\n    if (!isOperatorObject(this._selector[path])) {\n      return false;\n    }\n\n    return modifierPaths.some(modifierPath =>\n      modifierPath.startsWith(`${path}.`)\n    );\n  });\n\n  if (expectedScalarIsObject) {\n    return false;\n  }\n\n  // See if we can apply the modifier on the ideally matching object. If it\n  // still matches the selector, then the modifier could have turned the real\n  // object in the database into something matching.\n  const matchingDocument = EJSON.clone(this.matchingDocument());\n\n  // The selector is too complex, anything can happen.\n  if (matchingDocument === null) {\n    return true;\n  }\n\n  try {\n    LocalCollection._modify(matchingDocument, modifier);\n  } catch (error) {\n    // Couldn't set a property on a field which is a scalar or null in the\n    // selector.\n    // Example:\n    // real document: { 'a.b': 3 }\n    // selector: { 'a': 12 }\n    // converted selector (ideal document): { 'a': 12 }\n    // modifier: { $set: { 'a.b': 4 } }\n    // We don't know what real document was like but from the error raised by\n    // $set on a scalar field we can reason that the structure of real document\n    // is completely different.\n    if (error.name === 'MinimongoError' && error.setPropertyError) {\n      return false;\n    }\n\n    throw error;\n  }\n\n  return this.documentMatches(matchingDocument).result;\n};\n\n// Knows how to combine a mongo selector and a fields projection to a new fields\n// projection taking into account active fields from the passed selector.\n// @returns Object - projection object (same as fields option of mongo cursor)\nMinimongo.Matcher.prototype.combineIntoProjection = function(projection) {\n  const selectorPaths = Minimongo._pathsElidingNumericKeys(this._getPaths());\n\n  // Special case for $where operator in the selector - projection should depend\n  // on all fields of the document. getSelectorPaths returns a list of paths\n  // selector depends on. If one of the paths is '' (empty string) representing\n  // the root or the whole document, complete projection should be returned.\n  if (selectorPaths.includes('')) {\n    return {};\n  }\n\n  return combineImportantPathsIntoProjection(selectorPaths, projection);\n};\n\n// Returns an object that would match the selector if possible or null if the\n// selector is too complex for us to analyze\n// { 'a.b': { ans: 42 }, 'foo.bar': null, 'foo.baz': \"something\" }\n// => { a: { b: { ans: 42 } }, foo: { bar: null, baz: \"something\" } }\nMinimongo.Matcher.prototype.matchingDocument = function() {\n  // check if it was computed before\n  if (this._matchingDocument !== undefined) {\n    return this._matchingDocument;\n  }\n\n  // If the analysis of this selector is too hard for our implementation\n  // fallback to \"YES\"\n  let fallback = false;\n\n  this._matchingDocument = pathsToTree(\n    this._getPaths(),\n    path => {\n      const valueSelector = this._selector[path];\n\n      if (isOperatorObject(valueSelector)) {\n        // if there is a strict equality, there is a good\n        // chance we can use one of those as \"matching\"\n        // dummy value\n        if (valueSelector.$eq) {\n          return valueSelector.$eq;\n        }\n\n        if (valueSelector.$in) {\n          const matcher = new Minimongo.Matcher({placeholder: valueSelector});\n\n          // Return anything from $in that matches the whole selector for this\n          // path. If nothing matches, returns `undefined` as nothing can make\n          // this selector into `true`.\n          return valueSelector.$in.find(placeholder =>\n            matcher.documentMatches({placeholder}).result\n          );\n        }\n\n        if (onlyContainsKeys(valueSelector, ['$gt', '$gte', '$lt', '$lte'])) {\n          let lowerBound = -Infinity;\n          let upperBound = Infinity;\n\n          ['$lte', '$lt'].forEach(op => {\n            if (hasOwn.call(valueSelector, op) &&\n                valueSelector[op] < upperBound) {\n              upperBound = valueSelector[op];\n            }\n          });\n\n          ['$gte', '$gt'].forEach(op => {\n            if (hasOwn.call(valueSelector, op) &&\n                valueSelector[op] > lowerBound) {\n              lowerBound = valueSelector[op];\n            }\n          });\n\n          const middle = (lowerBound + upperBound) / 2;\n          const matcher = new Minimongo.Matcher({placeholder: valueSelector});\n\n          if (!matcher.documentMatches({placeholder: middle}).result &&\n              (middle === lowerBound || middle === upperBound)) {\n            fallback = true;\n          }\n\n          return middle;\n        }\n\n        if (onlyContainsKeys(valueSelector, ['$nin', '$ne'])) {\n          // Since this._isSimple makes sure $nin and $ne are not combined with\n          // objects or arrays, we can confidently return an empty object as it\n          // never matches any scalar.\n          return {};\n        }\n\n        fallback = true;\n      }\n\n      return this._selector[path];\n    },\n    x => x);\n\n  if (fallback) {\n    this._matchingDocument = null;\n  }\n\n  return this._matchingDocument;\n};\n\n// Minimongo.Sorter gets a similar method, which delegates to a Matcher it made\n// for this exact purpose.\nMinimongo.Sorter.prototype.affectedByModifier = function(modifier) {\n  return this._selectorForAffectedByModifier.affectedByModifier(modifier);\n};\n\nMinimongo.Sorter.prototype.combineIntoProjection = function(projection) {\n  return combineImportantPathsIntoProjection(\n    Minimongo._pathsElidingNumericKeys(this._getPaths()),\n    projection\n  );\n};\n\nfunction combineImportantPathsIntoProjection(paths, projection) {\n  const details = projectionDetails(projection);\n\n  // merge the paths to include\n  const tree = pathsToTree(\n    paths,\n    path => true,\n    (node, path, fullPath) => true,\n    details.tree\n  );\n  const mergedProjection = treeToPaths(tree);\n\n  if (details.including) {\n    // both selector and projection are pointing on fields to include\n    // so we can just return the merged tree\n    return mergedProjection;\n  }\n\n  // selector is pointing at fields to include\n  // projection is pointing at fields to exclude\n  // make sure we don't exclude important paths\n  const mergedExclProjection = {};\n\n  Object.keys(mergedProjection).forEach(path => {\n    if (!mergedProjection[path]) {\n      mergedExclProjection[path] = false;\n    }\n  });\n\n  return mergedExclProjection;\n}\n\nfunction getPaths(selector) {\n  return Object.keys(new Minimongo.Matcher(selector)._paths);\n\n  // XXX remove it?\n  // return Object.keys(selector).map(k => {\n  //   // we don't know how to handle $where because it can be anything\n  //   if (k === '$where') {\n  //     return ''; // matches everything\n  //   }\n\n  //   // we branch from $or/$and/$nor operator\n  //   if (['$or', '$and', '$nor'].includes(k)) {\n  //     return selector[k].map(getPaths);\n  //   }\n\n  //   // the value is a literal or some comparison operator\n  //   return k;\n  // })\n  //   .reduce((a, b) => a.concat(b), [])\n  //   .filter((a, b, c) => c.indexOf(a) === b);\n}\n\n// A helper to ensure object has only certain keys\nfunction onlyContainsKeys(obj, keys) {\n  return Object.keys(obj).every(k => keys.includes(k));\n}\n\nfunction pathHasNumericKeys(path) {\n  return path.split('.').some(isNumericKey);\n}\n\n// Returns a set of key paths similar to\n// { 'foo.bar': 1, 'a.b.c': 1 }\nfunction treeToPaths(tree, prefix = '') {\n  const result = {};\n\n  Object.keys(tree).forEach(key => {\n    const value = tree[key];\n    if (value === Object(value)) {\n      Object.assign(result, treeToPaths(value, `${prefix + key}.`));\n    } else {\n      result[prefix + key] = value;\n    }\n  });\n\n  return result;\n}\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        const operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127,\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(`unknown string alias for $type: ${operand}`);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1\n          || (operand > 19 && operand !== 127)) {\n          throw Error(`Invalid numerical $type code: ${operand}`);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$' || selKey === 'diff';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'), options)\n  );\n\n  function buildResult(arrayIndices, dontIterate, value) {\n    return arrayIndices && arrayIndices.length\n      ? dontIterate\n        ? [{ arrayIndices, dontIterate, value }]\n        : [{ arrayIndices, value }]\n      : dontIterate\n        ? [{ dontIterate, value }]\n        : [{ value }];\n  }\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices ? arrayIndices.concat(+firstPart, 'x') : [+firstPart, 'x'];\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return buildResult(\n        arrayIndices,\n        Array.isArray(doc) && Array.isArray(firstLevel),\n        firstLevel,\n      );\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return buildResult(arrayIndices, false, undefined);\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices ? arrayIndices.concat(arrayIndex) : [arrayIndex]));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","/** Exported values are also used in the mongo package. */\n\n/** @param {string} method */\nexport function getAsyncMethodName(method) {\n  return `${method.replace('_', '')}Async`;\n}\n\nexport const ASYNC_COLLECTION_METHODS = [\n  '_createCappedCollection',\n  '_dropCollection',\n  '_dropIndex',\n  'createIndex',\n  'findOne',\n  'insert',\n  'remove',\n  'update',\n  'upsert',\n];\n\nexport const ASYNC_CURSOR_METHODS = ['count', 'fetch', 'forEach', 'map'];\n","import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\nimport { ASYNC_CURSOR_METHODS, getAsyncMethodName } from \"./constants\";\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @deprecated in 2.9\n   * @summary Returns the number of documents that match a query. This method is\n   *          [deprecated since MongoDB 4.0](https://www.mongodb.com/docs/v4.4/reference/command/count/);\n   *          see `Collection.countDocuments` and\n   *          `Collection.estimatedDocumentCount` for a replacement.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count() {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  [Symbol.asyncIterator]() {\n    const syncResult = this[Symbol.iterator]();\n    return {\n      async next() {\n        return Promise.resolve(syncResult.next());\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      query.results.forEach(doc => {\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(method => {\n  const asyncName = getAsyncMethodName(method);\n  Cursor.prototype[asyncName] = function(...args) {\n    try {\n      this[method].isCalledFromAsync = true;\n      return Promise.resolve(this[method].apply(this, args));\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n});\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  countDocuments(selector, options) {\n    return this.find(selector ?? {}, options).countAsync();\n  }\n\n  estimatedDocumentCount(options) {\n    return this.find({}, options).countAsync();\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return doc != null ? result : doc;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  const handle = cursor.observeChanges(changeObserver.applyChange,\n    { nonMutatingCallbacks: true });\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $mul modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\nconst Decimal = Package['mongo-decimal']?.Decimal || class DecimalStub {}\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    if (v instanceof Decimal) {\n      return 1;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = isNaN(a) ? 0 : a.getTime();\n      b = isNaN(b) ? 0 : b.getTime();\n    }\n\n    if (ta === 1) { // double\n      if (a instanceof Decimal) {\n        return a.minus(b).toNumber();\n      } else {\n        return a - b;\n      }\n    }\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one undefined value.\n      if (!branches.length) {\n        branches = [{ value: void 0 }];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}