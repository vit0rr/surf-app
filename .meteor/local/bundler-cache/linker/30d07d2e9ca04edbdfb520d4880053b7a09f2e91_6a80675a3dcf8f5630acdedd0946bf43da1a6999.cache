[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar DDP = Package['ddp-client'].DDP;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_client.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/autoupdate/autoupdate_client.js                                                                   //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\n!function (module1) {\n  module1.export({\n    Autoupdate: function () {\n      return Autoupdate;\n    }\n  });\n  var ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions: function (v) {\n      ClientVersions = v;\n    }\n  }, 0);\n  var clientArch = Meteor.isCordova ? \"web.cordova\" : Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n  var autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: []\n  };\n  var Autoupdate = {};\n  // Stores acceptable client versions.\n  var clientVersions = Autoupdate._clientVersions =\n  // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n  Meteor.connection.registerStore(\"meteor_autoupdate_clientVersions\", clientVersions.createStore());\n  Autoupdate.newClientAvailable = function () {\n    return clientVersions.newClientAvailable(clientArch, [\"versionRefreshable\", \"versionNonRefreshable\"], autoupdateVersions);\n  };\n\n  // Set to true if the link.onload callback ever fires for any <link> node.\n  var knownToSupportCssOnLoad = false;\n  var retry = new Retry({\n    // Unlike the stream reconnect use of Retry, which we want to be instant\n    // in normal operation, this is a wacky failure. We don't want to retry\n    // right away, we can start slowly.\n    //\n    // A better way than timeconstants here might be to use the knowledge\n    // of when we reconnect to help trigger these retries. Typically, the\n    // server fixing code will result in a restart and reconnect, but\n    // potentially the subscription could have a transient error.\n    minCount: 0,\n    // don't do any immediate retries\n    baseTimeout: 30 * 1000 // start with 30s\n  });\n  var failures = 0;\n  Autoupdate._retrySubscription = function () {\n    Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n      onError: function (error) {\n        Meteor._debug(\"autoupdate subscription failed\", error);\n        failures++;\n        retry.retryLater(failures, function () {\n          // Just retry making the subscription, don't reload the whole\n          // page. While reloading would catch more cases (for example,\n          // the server went back a version and is now doing old-style hot\n          // code push), it would also be more prone to reload loops,\n          // which look really bad to the user. Just retrying the\n          // subscription over DDP means it is at least possible to fix by\n          // updating the server.\n          Autoupdate._retrySubscription();\n        });\n      },\n      onReady: function () {\n        // Call checkNewVersionDocument with a slight delay, so that the\n        // const handle declaration is guaranteed to be initialized, even if\n        // the added or changed callbacks are called synchronously.\n        var resolved = Promise.resolve();\n        function check(doc) {\n          resolved.then(function () {\n            return checkNewVersionDocument(doc);\n          });\n        }\n        var stop = clientVersions.watch(check);\n        function checkNewVersionDocument(doc) {\n          if (doc._id !== clientArch) {\n            return;\n          }\n          if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n            // Non-refreshable assets have changed, so we have to reload the\n            // whole page rather than just replacing <link> tags.\n            if (stop) stop();\n            if (Package.reload) {\n              // The reload package should be provided by ddp-client, which\n              // is provided by the ddp package that autoupdate depends on.\n              Package.reload.Reload._reload();\n            }\n            return;\n          }\n          if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n            var waitUntilCssLoads = function (link, callback) {\n              var called;\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n                if (!called) {\n                  called = true;\n                  callback();\n                }\n              };\n              if (!knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    if (!called) {\n                      called = true;\n                      callback();\n                    }\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            };\n            var removeOldLinks = function () {\n              if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n                oldLinks.splice(0).forEach(function (link) {\n                  link.parentNode.removeChild(link);\n                });\n              }\n            };\n            autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n            // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = doc.assets || [];\n            var oldLinks = [];\n            Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            });\n            var newLinksLeftToLoad = newCss.length;\n            if (newCss.length > 0) {\n              newCss.forEach(function (css) {\n                var newLink = document.createElement(\"link\");\n                newLink.setAttribute(\"rel\", \"stylesheet\");\n                newLink.setAttribute(\"type\", \"text/css\");\n                newLink.setAttribute(\"class\", \"__meteor-css__\");\n                newLink.setAttribute(\"href\", css.url);\n                waitUntilCssLoads(newLink, function () {\n                  Meteor.setTimeout(removeOldLinks, 200);\n                });\n                var head = document.getElementsByTagName(\"head\").item(0);\n                head.appendChild(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n          }\n        }\n      }\n    });\n  };\n  Autoupdate._retrySubscription();\n}.call(this, module);\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_versions.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/autoupdate/client_versions.js                                                                     //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ClientVersions: function () {\n    return ClientVersions;\n  }\n});\nvar Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker: function (v) {\n    Tracker = v;\n  }\n}, 0);\nvar ClientVersions = /*#__PURE__*/function () {\n  function ClientVersions() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  var _proto = ClientVersions.prototype;\n  _proto.createStore = function () {\n    function createStore() {\n      var _this = this;\n      return {\n        update: function (_ref) {\n          var id = _ref.id,\n            msg = _ref.msg,\n            fields = _ref.fields;\n          if (msg === \"added\" || msg === \"changed\") {\n            _this.set(id, fields);\n          }\n        }\n      };\n    }\n    return createStore;\n  }();\n  _proto.hasVersions = function () {\n    function hasVersions() {\n      return this._versions.size > 0;\n    }\n    return hasVersions;\n  }();\n  _proto.get = function () {\n    function get(id) {\n      return this._versions.get(id);\n    }\n    return get;\n  }() // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  ;\n  _proto.set = function () {\n    function set(id, fields) {\n      var version = this._versions.get(id);\n      var isNew = false;\n      if (version) {\n        Object.assign(version, fields);\n      } else {\n        version = _objectSpread({\n          _id: id\n        }, fields);\n        isNew = true;\n        this._versions.set(id, version);\n      }\n      this._watchCallbacks.forEach(function (_ref2) {\n        var fn = _ref2.fn,\n          filter = _ref2.filter;\n        if (!filter || filter === version._id) {\n          fn(version, isNew);\n        }\n      });\n    }\n    return set;\n  }() // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  ;\n  _proto.watch = function () {\n    function watch(fn) {\n      var _this2 = this;\n      var _ref3 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n        skipInitial = _ref3.skipInitial,\n        filter = _ref3.filter;\n      if (!skipInitial) {\n        var resolved = Promise.resolve();\n        this._versions.forEach(function (version) {\n          if (!filter || filter === version._id) {\n            resolved.then(function () {\n              return fn(version, true);\n            });\n          }\n        });\n      }\n      var callback = {\n        fn: fn,\n        filter: filter\n      };\n      this._watchCallbacks.add(callback);\n      return function () {\n        return _this2._watchCallbacks.delete(callback);\n      };\n    }\n    return watch;\n  }() // A reactive data source for `Autoupdate.newClientAvailable`.\n  ;\n  _proto.newClientAvailable = function () {\n    function newClientAvailable(id, fields, currentVersion) {\n      function isNewVersion(version) {\n        return version._id === id && fields.some(function (field) {\n          return version[field] !== currentVersion[field];\n        });\n      }\n      var dependency = new Tracker.Dependency();\n      var version = this.get(id);\n      dependency.depend();\n      var stop = this.watch(function (version) {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      }, {\n        skipInitial: true\n      });\n      return !!version && isNewVersion(version);\n    }\n    return newClientAvailable;\n  }();\n  return ClientVersions;\n}();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/autoupdate/autoupdate_client.js\");\n\n/* Exports */\nPackage._define(\"autoupdate\", exports, {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_client.js","packages/autoupdate/client_versions.js"],"names":["module1","export","Autoupdate","ClientVersions","link","v","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","clientVersions","_clientVersions","connection","registerStore","createStore","newClientAvailable","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","stop","watch","_id","Package","reload","Reload","_reload","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","removeOldLinks","oldLinks","length","newLinksLeftToLoad","splice","forEach","parentNode","removeChild","newCss","Array","prototype","call","document","getElementsByTagName","className","push","css","newLink","createElement","setAttribute","url","setTimeout","head","item","appendChild","module","_objectSpread","default","Tracker","_versions","Map","_watchCallbacks","Set","_proto","_this","update","_ref","msg","fields","set","hasVersions","size","get","isNew","Object","assign","_ref2","fn","filter","_this2","_ref3","arguments","undefined","skipInitial","add","delete","currentVersion","isNewVersion","some","field","dependency","Dependency","depend","changed"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nimport { ClientVersions } from \"./client_versions.js\";\n\nconst clientArch = Meteor.isCordova ? \"web.cordova\" :\n  Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n\nconst autoupdateVersions =\n  ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: [],\n  };\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions =\n  Autoupdate._clientVersions = // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n\nMeteor.connection.registerStore(\n  \"meteor_autoupdate_clientVersions\",\n  clientVersions.createStore()\n);\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\n    clientArch,\n    [\"versionRefreshable\", \"versionNonRefreshable\"],\n    autoupdateVersions\n  );\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError(error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const stop = clientVersions.watch(check);\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !==\n            autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (stop) stop();\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n          // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n\n          Array.prototype.forEach.call(\n            document.getElementsByTagName('link'),\n            function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            }\n          );\n\n          function waitUntilCssLoads(link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n              if (! called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (! knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (! called) {\n                    called = true;\n                    callback();\n                  }\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n          function removeOldLinks() {\n            if (oldLinks.length > 0 &&\n                --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(link => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach(css => {\n              const newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n\n              const head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n","import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]}}]