[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Retry = Package.retry.Retry;\nvar MongoID = Package['mongo-id'].MongoID;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar DDP = Package['ddp-client'].DDP;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Hook = Package['callback-hook'].Hook;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar StreamServer, DDPServer, id, Server;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ddp-server\":{\"stream_server.js\":function module(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ddp-server/stream_server.js                                                                              //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(websocketCompressionConfig));\n  }\n  return extensions;\n});\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\";\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function () {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Allow disabling of CORS requests to address\n    // https://github.com/meteor/meteor/issues/8317.\n    disable_cors: !!process.env.DISABLE_SOCKJS_CORS,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener('request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener('request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return;\n\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' || socket.protocol === 'websocket-raw') && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n    if (process.env.TEST_METADATA && process.env.TEST_METADATA !== \"{}\") {\n      socket.send(JSON.stringify({\n        testMessageOnConnect: true\n      }));\n    }\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n};\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function () {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    ['request', 'upgrade'].forEach(event => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function (request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // TODO replace with url package\n        var url = Npm.require('url');\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' || parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function (oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"livedata_server.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ddp-server/livedata_server.js                                                                            //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nDDPServer = {};\nvar Fiber = Npm.require('fibers');\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: false\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: true\n  },\n  // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n  // used by multiple publications. This has some memory overhead, but it still does not do\n  // diffing so it's faster and slimmer than SERVER_MERGE.\n  NO_MERGE_MULTI: {\n    useDummyDocumentView: true,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  }\n};\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\nvar DummyDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\nObject.assign(DummyDocumentView.prototype, {\n  getFields: function () {\n    return {};\n  },\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    changeCollector[key] = undefined;\n  },\n  changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n    changeCollector[key] = value;\n  }\n});\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\nDDPServer._SessionDocumentView = SessionDocumentView;\n_.extend(SessionDocumentView.prototype, {\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\") return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList) return;\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0) removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined && !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n  changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\") return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{\n        subscriptionHandle: subscriptionHandle,\n        value: value\n      }]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({\n        subscriptionHandle: subscriptionHandle,\n        value: value\n      });\n    }\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\nDDPServer._SessionCollectionView = SessionCollectionView;\nObject.assign(SessionCollectionView.prototype, {\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now)) fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function (key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n        docView = new DummyDocumentView();\n      } else {\n        docView = new SessionDocumentView();\n      }\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added) self.callbacks.added(self.collectionName, id, changeCollector);else self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView) throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined) docView.clearField(subscriptionHandle, key, changedResult);else docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n  self.server = server;\n  self.version = version;\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n  self.blocked = false;\n  self.workerRunning = false;\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n  self.userId = null;\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n  self.send({\n    msg: 'connected',\n    session: self.id\n  });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({\n          msg: 'ping'\n        });\n      }\n    });\n    self.heartbeat.start();\n  }\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", 1);\n};\nObject.assign(Session.prototype, {\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending) self.send({\n      msg: \"ready\",\n      subs: subscriptionIds\n    });else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName)) this.send({\n      msg: \"added\",\n      collection: collectionName,\n      id,\n      fields\n    });\n  },\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields)) return;\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName)) this.send({\n      msg: \"removed\",\n      collection: collectionName,\n      id\n    });\n  },\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName, self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n        this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (!self.inQueue) return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", -1);\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP) Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {\n      msg: 'error',\n      reason: reason\n    };\n    if (offendingMessage) msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue)\n      // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings) self.send({\n        msg: \"pong\",\n        id: msg_in.id\n      });\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n    self.inQueue.push(msg_in);\n    if (self.workerRunning) return;\n    self.workerRunning = true;\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n      Fiber(function () {\n        var blocked = true;\n        var unblock = function () {\n          if (!blocked) return; // idempotent\n          blocked = false;\n          processNext();\n        };\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n        if (_.has(self.protocol_handlers, msg.msg)) self.protocol_handlers[msg.msg].call(self, msg, unblock);else self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n    processNext();\n  },\n  protocol_handlers: {\n    sub: function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof msg.id !== \"string\" || typeof msg.name !== \"string\" || 'params' in msg && !(msg.params instanceof Array)) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub',\n          id: msg.id,\n          error: new Meteor.Error(404, \"Subscription '\".concat(msg.name, \"' not found\"))\n        });\n        return;\n      }\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub',\n            id: msg.id,\n            error: new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            })\n          });\n          return;\n        }\n      }\n      var handler = self.server.publish_handlers[msg.name];\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n    unsub: function (msg) {\n      var self = this;\n      self._stopSubscription(msg.id);\n    },\n    method: function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof msg.id !== \"string\" || typeof msg.method !== \"string\" || 'params' in msg && !(msg.params instanceof Array) || 'randomSeed' in msg && typeof msg.randomSeed !== \"string\") {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence();\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated',\n          methods: [msg.id]\n        });\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result',\n          id: msg.id,\n          error: new Meteor.Error(404, \"Method '\".concat(msg.method, \"' not found\"))\n        });\n        fence.arm();\n        return;\n      }\n      var setUserId = function (userId) {\n        self._setUserId(userId);\n      };\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\"too-many-requests\", DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            }));\n            return;\n          }\n        }\n        const getCurrentMethodInvocationResult = () => {\n          const currentContext = DDP._CurrentMethodInvocation._setNewContextAndGetCurrent(invocation);\n          try {\n            let result;\n            const resultOrThenable = maybeAuditArgumentChecks(handler, invocation, msg.params, \"call to '\" + msg.method + \"'\");\n            const isThenable = resultOrThenable && typeof resultOrThenable.then === 'function';\n            if (isThenable) {\n              result = Promise.await(resultOrThenable);\n            } else {\n              result = resultOrThenable;\n            }\n            return result;\n          } finally {\n            DDP._CurrentMethodInvocation._set(currentContext);\n          }\n        };\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, getCurrentMethodInvocationResult));\n      });\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n      promise.then(result => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, exception => {\n        finish();\n        payload.error = wrapInternalException(exception, \"while invoking method '\".concat(msg.method, \"'\"));\n        self.send(payload);\n      });\n    }\n  },\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function (userId) {\n    var self = this;\n    if (userId !== null && typeof userId !== \"string\") throw new Error(\"setUserId must be called on string or null, not \" + typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n      oldNamedSubs.forEach(function (sub, subscriptionId) {\n        var newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        newSub._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n    var sub = new Subscription(self, handler, subId, params, name);\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n    if (subId) self._namedSubs.set(subId, sub);else self._universalSubs.push(sub);\n    sub._runHandler();\n  },\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n    var response = {\n      msg: 'nosub',\n      id: subId\n    };\n    if (error) {\n      response.error = wrapInternalException(error, subName ? \"from sub \" + subName + \" id \" + subId : \"from sub id \" + subId);\n    }\n    self.send(response);\n  },\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n    if (httpForwardedCount === 0) return self.socket.remoteAddress;\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (!_.isString(forwardedFor)) return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length) return null;\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", 1);\n};\nObject.assign(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () => maybeAuditArgumentChecks(self._handler, self, EJSON.clone(self._params),\n      // It's OK that this would look weird for universal subscriptions,\n      // because they have no arguments so there can never be an\n      // audit-argument-checks failure.\n      \"publisher '\" + self._name + \"'\"));\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable = resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      Promise.resolve(resultOrThenable).then(function () {\n        return self._publishHandlerResult.bind(self)(...arguments);\n      }, e => self.error(e));\n    } else {\n      self._publishHandlerResult(resultOrThenable);\n    }\n  },\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (!_.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\"Publish function returned multiple cursors for collection \" + collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      }\n      ;\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \" + \"an array of Cursors\"));\n    }\n  },\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function () {\n    var self = this;\n    if (self._deactivated) return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", -1);\n  },\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(self._session, self._handler, self._subscriptionId, self._params, self._name);\n  },\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated()) callback();else self._stopCallbacks.push(callback);\n  },\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added(collectionName, id, fields) {\n    if (this._isDeactivated()) return;\n    id = this._idFilter.idStringify(id);\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed(collectionName, id, fields) {\n    if (this._isDeactivated()) return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed(collectionName, id) {\n    if (this._isDeactivated()) return;\n    id = this._idFilter.idStringify(id);\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n    if (!self._subscriptionId) return; // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = _objectSpread({\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE\n  }, options);\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n  self.method_handlers = {};\n  self._publicationStrategies = {};\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer();\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n    var sendError = function (reason, offendingMessage) {\n      var msg = {\n        msg: 'error',\n        reason: reason\n      };\n      if (offendingMessage) msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\nObject.assign(Server.prototype, {\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n  /**\n   * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param collectionName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(collectionName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(\"Invalid merge strategy: \".concat(strategy, \" \\n        for collection \").concat(collectionName));\n    }\n    this._publicationStrategies[collectionName] = strategy;\n  },\n  /**\n   * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param collectionName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(collectionName) {\n    return this._publicationStrategies[collectionName] || this.options.defaultPublicationStrategy;\n  },\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof msg.version === 'string' && _.isArray(msg.support) && _.all(msg.support, _.isString) && _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({\n        msg: 'failed',\n        version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]\n      }));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({\n        msg: 'failed',\n        version: version\n      }));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession) callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n    if (!_.isObject(name)) {\n      options = options || {};\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" + \"** you still have autopublish turned on. Because autopublish is still\\n\" + \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" + \"** will still be sent to all clients.\\n\" + \"**\\n\" + \"** Turn off autopublish by removing the autopublish package:\\n\" + \"**\\n\" + \"**   $ meteor remove autopublish\\n\" + \"**\\n\" + \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" + \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n      if (name) self.publish_handlers[name] = handler;else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function () {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    } else {\n      _.each(name, function (value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n  call: function (name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n    return this.apply(name, args, callback);\n  },\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    return this.applyAsync(name, args);\n  },\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(result => callback(undefined, result), exception => callback(exception));\n    } else {\n      return promise.await();\n    }\n  },\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (!handler) {\n      return Promise.reject(new Meteor.Error(404, \"Method '\".concat(name, \"' not found\")));\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function () {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function (userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function (userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n    return new Promise(resolve => resolve(DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, EJSON.clone(args), \"internal call to '\" + name + \"'\")))).then(EJSON.clone);\n  },\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session) return session._socketUrl;else return null;\n  }\n});\nvar calculateVersion = function (clientSupportedVersions, serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\nDDPServer._calculateVersion = calculateVersion;\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe) return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" + \"does not have isClientSafe property set; ignoring\");\n  }\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"writefence.js\":function module(require){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ddp-server/writefence.js                                                                                 //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nvar Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable();\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n    if (self.retired) return {\n      committed: function () {}\n    };\n    if (self.fired) throw new Error(\"fence has already activated -- too late to add writes\");\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed) throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get()) throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future();\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired) throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback(func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback\", err);\n        }\n      }\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (!self.fired) throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"crossbar.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ddp-server/crossbar.js                                                                                   //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (!_.has(msg, 'collection')) {\n      return '';\n    } else if (typeof msg.collection === 'string') {\n      if (msg.collection === '') throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n    var collection = self._collectionForMessage(trigger);\n    var record = {\n      trigger: EJSON.clone(trigger),\n      callback: callback\n    };\n    if (!_.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, 1);\n    }\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n    var collection = self._collectionForMessage(notification);\n    if (!_.has(self.listenersByCollection, collection)) {\n      return;\n    }\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof notification.id === 'string' && typeof trigger.id === 'string' && notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID && trigger.id instanceof MongoID.ObjectID && !notification.id.equals(trigger.id)) {\n      return false;\n    }\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) || EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server_convenience.js\":function module(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/ddp-server/server_convenience.js                                                                         //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\nif (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL = process.env.DDP_DEFAULT_CONNECTION_URL;\n}\nMeteor.server = new Server();\nMeteor.refresh = function (notification) {\n  DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n_.each(['publish', 'methods', 'call', 'callAsync', 'apply', 'applyAsync', 'onConnection', 'onMessage'], function (name) {\n  Meteor[name] = _.bind(Meteor.server[name], Meteor.server);\n});\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nrequire(\"/node_modules/meteor/ddp-server/stream_server.js\");\nrequire(\"/node_modules/meteor/ddp-server/livedata_server.js\");\nrequire(\"/node_modules/meteor/ddp-server/writefence.js\");\nrequire(\"/node_modules/meteor/ddp-server/crossbar.js\");\nrequire(\"/node_modules/meteor/ddp-server/server_convenience.js\");\n\n/* Exports */\nPackage._define(\"ddp-server\", {\n  DDPServer: DDPServer\n});\n\n})();\n","servePath":"/packages/ddp-server.js","sourceMap":{"version":3,"sources":["packages/ddp-server/stream_server.js","packages/ddp-server/livedata_server.js","packages/ddp-server/writefence.js","packages/ddp-server/crossbar.js","packages/ddp-server/server_convenience.js"],"names":["websocketExtensions","_","once","extensions","websocketCompressionConfig","process","env","SERVER_WEBSOCKET_COMPRESSION","JSON","parse","push","Npm","require","configure","pathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","StreamServer","self","registration_callbacks","open_sockets","prefix","RoutePolicy","declare","sockjs","serverOptions","log","heartbeat_delay","disconnect_delay","disable_cors","DISABLE_SOCKJS_CORS","jsessionid","USE_JSESSIONID","DISABLE_WEBSOCKETS","websocket","faye_server_options","server","createServer","WebApp","httpServer","removeListener","_timeoutAdjustmentRequestCallback","installHandlers","addListener","_redirectWebsocketEndpoint","on","socket","setWebsocketTimeout","timeout","protocol","_session","recv","connection","setTimeout","send","data","write","without","TEST_METADATA","stringify","testMessageOnConnect","each","callback","Object","assign","prototype","register","all_sockets","values","forEach","event","oldHttpServerListeners","listeners","slice","removeAllListeners","newListener","request","args","arguments","url","parsedUrl","pathname","format","oldListener","apply","_objectSpread","module","link","default","v","DDPServer","Fiber","publicationStrategies","SERVER_MERGE","useDummyDocumentView","useCollectionView","doAccountingForCollection","NO_MERGE_NO_HISTORY","NO_MERGE","NO_MERGE_MULTI","DummyDocumentView","existsIn","Set","dataByKey","Map","getFields","clearField","subscriptionHandle","key","changeCollector","undefined","changeField","value","isAdd","SessionDocumentView","_SessionDocumentView","extend","ret","precedenceList","get","removedValue","i","length","precedence","splice","delete","EJSON","equals","clone","has","set","elt","find","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","isEmpty","size","diff","previous","DiffSequence","diffMaps","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","diffObjects","prev","now","changed","docView","Meteor","getPublicationStrategy","add","changedResult","Error","err","Session","version","options","Random","initialized","inQueue","_DoubleEndedQueue","blocked","workerRunning","cachedUnblock","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","msg","session","startUniversalSubs","run","heartbeatInterval","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","_canSend","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","unblock","onMessageHook","protocol_handlers","call","sub","name","params","Array","publish_handlers","error","concat","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","fence","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","setUserId","_setUserId","invocation","MethodInvocation","isSimulation","promise","Promise","resolve","reject","getCurrentMethodInvocationResult","currentContext","DDP","_CurrentMethodInvocation","_setNewContextAndGetCurrent","result","resultOrThenable","maybeAuditArgumentChecks","isThenable","then","await","_set","_CurrentWriteFence","withValue","finish","payload","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","newSub","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","unblockHander","subName","maybeSub","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","remoteAddress","forwardedFor","isString","trim","split","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","_CurrentPublicationInvocation","e","_isDeactivated","_publishHandlerResult","res","isCursor","c","_publishCursor","ready","isArray","all","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","strId","onStop","ids","Server","defaultPublicationStrategy","onConnectionHook","Hook","debugPrintExceptions","_publicationStrategies","sessions","stream_server","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","setPublicationStrategy","strategy","includes","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","func","_len","_key","pop","callAsync","_len2","_key2","applyAsync","currentMethodInvocation","currentPublicationInvocation","makeRpcSeed","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","stack","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked","Future","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","EnvironmentVariable","beginWrite","committed","_maybeFire","onBeforeFire","armAndWait","future","wait","invokeCallback","_Crossbar","nextId","listenersByCollection","listenersByCollectionCount","factPackage","factName","_collectionForMessage","listen","trigger","record","fire","notification","listenersForCollection","callbackIds","l","_matches","ObjectID","triggerValue","_InvalidationCrossbar","DDP_DEFAULT_CONNECTION_URL","refresh"],"mappings":"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","file":"/packages/ddp-server.js","sourcesContent":["// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Allow disabling of CORS requests to address\n    // https://github.com/meteor/meteor/issues/8317.\n    disable_cors: !!process.env.DISABLE_SOCKJS_CORS,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // sockjs sometimes passes us null instead of a socket object\n    // so we need to guard against that. see:\n    // https://github.com/sockjs/sockjs-node/issues/121\n    // https://github.com/meteor/meteor/issues/10468\n    if (!socket) return;\n\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' ||\n           socket.protocol === 'websocket-raw')\n          && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // only to send a message after connection on tests, useful for\n    // socket-stream-client/server-tests.js\n    if (process.env.TEST_METADATA && process.env.TEST_METADATA !== \"{}\") {\n      socket.send(JSON.stringify({ testMessageOnConnect: true }));\n    }\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\nObject.assign(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    ['request', 'upgrade'].forEach((event) => {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // TODO replace with url package\n        var url = Npm.require('url');\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n","DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: true,\n    doAccountingForCollection: true,\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: false,\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: true,\n  },\n  // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n  // used by multiple publications. This has some memory overhead, but it still does not do\n  // diffing so it's faster and slimmer than SERVER_MERGE.\n  NO_MERGE_MULTI: {\n    useDummyDocumentView: true,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  }\n};\n\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\nvar DummyDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nObject.assign(DummyDocumentView.prototype, {\n  getFields: function () {\n    return {}\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    changeCollector[key] = undefined\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    changeCollector[key] = value\n  }\n});\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{subscriptionHandle: subscriptionHandle,\n                                value: value}]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n          return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\nObject.assign(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n        docView = new DummyDocumentView();\n      } else {\n        docView = new SessionDocumentView();\n      }\n\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\nObject.assign(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n\n\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"added\", collection: collectionName, id, fields});\n  },\n\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields))\n      return;\n\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"removed\", collection: collectionName, id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n         this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        const getCurrentMethodInvocationResult = () => {\n          const currentContext = DDP._CurrentMethodInvocation._setNewContextAndGetCurrent(\n            invocation\n          );\n\n          try {\n            let result;\n            const resultOrThenable = maybeAuditArgumentChecks(\n              handler,\n              invocation,\n              msg.params,\n              \"call to '\" + msg.method + \"'\"\n            );\n            const isThenable =\n              resultOrThenable && typeof resultOrThenable.then === 'function';\n            if (isThenable) {\n              result = Promise.await(resultOrThenable);\n            } else {\n              result = resultOrThenable;\n            }\n            return result;\n          } finally {\n            DDP._CurrentMethodInvocation._set(currentContext);\n          }\n        };\n\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, getCurrentMethodInvocationResult));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then(result => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n\n      oldNamedSubs.forEach(function (sub, subscriptionId) {\n        var newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        newSub._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n\n    if (subId)\n      self._namedSubs.set(subId, sub);\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\nObject.assign(Subscription.prototype, {\n  _runHandler: function() {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () =>\n        maybeAuditArgumentChecks(\n          self._handler,\n          self,\n          EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"\n        )\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable =\n      resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      Promise.resolve(resultOrThenable).then(\n        (...args) => self._publishHandlerResult.bind(self)(...args),\n        e => self.error(e)\n      );\n    } else {\n      self._publishHandlerResult(resultOrThenable);\n    }\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed (collectionName, id) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options = {}) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE,\n    ...options,\n  };\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self._publicationStrategies = {};\n\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\nObject.assign(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param collectionName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(collectionName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(`Invalid merge strategy: ${strategy} \n        for collection ${collectionName}`);\n    }\n    this._publicationStrategies[collectionName] = strategy;\n  },\n\n  /**\n   * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param collectionName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(collectionName) {\n    return this._publicationStrategies[collectionName]\n      || this.options.defaultPublicationStrategy;\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function() {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    return this.applyAsync(name, args);\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise.await();\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function() {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function(userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function(userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise(resolve => resolve(\n      DDP._CurrentMethodInvocation.withValue(\n        invocation,\n        () => maybeAuditArgumentChecks(\n          handler, invocation, EJSON.clone(args),\n          \"internal call to '\" + name + \"'\"\n        )\n      )\n    )).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n","var Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n","// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n","if (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL =\n    process.env.DDP_DEFAULT_CONNECTION_URL;\n}\n\nMeteor.server = new Server;\n\nMeteor.refresh = function (notification) {\n  DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n_.each(\n  [\n    'publish',\n    'methods',\n    'call',\n    'callAsync',\n    'apply',\n    'applyAsync',\n    'onConnection',\n    'onMessage',\n  ],\n  function(name) {\n    Meteor[name] = _.bind(Meteor.server[name], Meteor.server);\n  }\n);\n"]}}]