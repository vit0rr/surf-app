[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar EJSON = Package.ejson.EJSON;\nvar GeoJSON = Package['geojson-utils'].GeoJSON;\nvar IdMap = Package['id-map'].IdMap;\nvar MongoID = Package['mongo-id'].MongoID;\nvar OrderedDict = Package['ordered-dict'].OrderedDict;\nvar Random = Package.random.Random;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar MinimongoTest, MinimongoError, LocalCollection, Minimongo;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"minimongo\":{\"minimongo_client.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_client.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.link(\"./minimongo_common.js\");\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"common.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/common.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray;\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\nmodule.export({\n  hasOwn: function () {\n    return hasOwn;\n  },\n  ELEMENT_OPERATORS: function () {\n    return ELEMENT_OPERATORS;\n  },\n  compileDocumentSelector: function () {\n    return compileDocumentSelector;\n  },\n  equalityElementMatcher: function () {\n    return equalityElementMatcher;\n  },\n  expandArraysInBranches: function () {\n    return expandArraysInBranches;\n  },\n  isIndexable: function () {\n    return isIndexable;\n  },\n  isNumericKey: function () {\n    return isNumericKey;\n  },\n  isOperatorObject: function () {\n    return isOperatorObject;\n  },\n  makeLookupFunction: function () {\n    return makeLookupFunction;\n  },\n  nothingMatcher: function () {\n    return nothingMatcher;\n  },\n  pathsToTree: function () {\n    return pathsToTree;\n  },\n  populateDocumentWithQueryFields: function () {\n    return populateDocumentWithQueryFields;\n  },\n  projectionDetails: function () {\n    return projectionDetails;\n  },\n  regexpElementMatcher: function () {\n    return regexpElementMatcher;\n  }\n});\nvar LocalCollection;\nmodule.link(\"./local_collection.js\", {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar ELEMENT_OPERATORS = {\n  $lt: makeInequality(function (cmpValue) {\n    return cmpValue < 0;\n  }),\n  $gt: makeInequality(function (cmpValue) {\n    return cmpValue > 0;\n  }),\n  $lte: makeInequality(function (cmpValue) {\n    return cmpValue <= 0;\n  }),\n  $gte: makeInequality(function (cmpValue) {\n    return cmpValue >= 0;\n  }),\n  $mod: {\n    compileElementSelector: function (operand) {\n      if (!(Array.isArray(operand) && operand.length === 2 && typeof operand[0] === 'number' && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      var divisor = operand[0];\n      var remainder = operand[1];\n      return function (value) {\n        return typeof value === 'number' && value % divisor === remainder;\n      };\n    }\n  },\n  $in: {\n    compileElementSelector: function (operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n      var elementMatchers = operand.map(function (option) {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n        return equalityElementMatcher(option);\n      });\n      return function (value) {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n        return elementMatchers.some(function (matcher) {\n          return matcher(value);\n        });\n      };\n    }\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n      return function (value) {\n        return Array.isArray(value) && value.length === operand;\n      };\n    }\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector: function (operand) {\n      if (typeof operand === 'string') {\n        var operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(\"unknown string alias for $type: \" + operand);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1 || operand > 19 && operand !== 127) {\n          throw Error(\"Invalid numerical $type code: \" + operand);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n      return function (value) {\n        return value !== undefined && LocalCollection._f._type(value) === operand;\n      };\n    }\n  },\n  $bitsAllSet: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAllSet');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every(function (byte, i) {\n          return (bitmask[i] & byte) === byte;\n        });\n      };\n    }\n  },\n  $bitsAnySet: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAnySet');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some(function (byte, i) {\n          return (~bitmask[i] & byte) !== byte;\n        });\n      };\n    }\n  },\n  $bitsAllClear: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAllClear');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every(function (byte, i) {\n          return !(bitmask[i] & byte);\n        });\n      };\n    }\n  },\n  $bitsAnyClear: {\n    compileElementSelector: function (operand) {\n      var mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return function (value) {\n        var bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some(function (byte, i) {\n          return (bitmask[i] & byte) !== byte;\n        });\n      };\n    }\n  },\n  $regex: {\n    compileElementSelector: function (operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n      var regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n        var source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n      return regexpElementMatcher(regexp);\n    }\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector: function (operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n      var isDocMatcher = !isOperatorObject(Object.keys(operand).filter(function (key) {\n        return !hasOwn.call(LOGICAL_OPERATORS, key);\n      }).reduce(function (a, b) {\n        var _Object$assign;\n        return Object.assign(a, (_Object$assign = {}, _Object$assign[b] = operand[b], _Object$assign));\n      }, {}), true);\n      var subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher = compileDocumentSelector(operand, matcher, {\n          inElemMatch: true\n        });\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n      return function (value) {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n        for (var i = 0; i < value.length; ++i) {\n          var arrayElement = value[i];\n          var arg = void 0;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{\n              value: arrayElement,\n              dontIterate: true\n            }];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n        return false;\n      };\n    }\n  }\n};\n// Operators that appear at the top level of a document selector.\nvar LOGICAL_OPERATORS = {\n  $and: function (subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch));\n  },\n  $or: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n    return function (doc) {\n      var result = matchers.some(function (fn) {\n        return fn(doc).result;\n      });\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {\n        result: result\n      };\n    };\n  },\n  $nor: function (subSelector, matcher, inElemMatch) {\n    var matchers = compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch);\n    return function (doc) {\n      var result = matchers.every(function (fn) {\n        return !fn(doc).result;\n      });\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {\n        result: result\n      };\n    };\n  },\n  $where: function (selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', \"return \" + selectorValue);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return function (doc) {\n      return {\n        result: selectorValue.call(doc, doc)\n      };\n    };\n  },\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment: function () {\n    return function () {\n      return {\n        result: true\n      };\n    };\n  }\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nvar VALUE_OPERATORS = {\n  $eq: function (operand) {\n    return convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand));\n  },\n  $not: function (operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand)));\n  },\n  $nin: function (operand) {\n    return invertBranchedMatcher(convertElementMatcherToBranchedMatcher(ELEMENT_OPERATORS.$in.compileElementSelector(operand)));\n  },\n  $exists: function (operand) {\n    var exists = convertElementMatcherToBranchedMatcher(function (value) {\n      return value !== undefined;\n    });\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options: function (operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance: function (operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n    return everythingMatcher;\n  },\n  $all: function (operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n    var branchedMatchers = operand.map(function (criterion) {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near: function (operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    var maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = function (value) {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n        if (!value.type) {\n          return GeoJSON.pointDistance(point, {\n            type: 'Point',\n            coordinates: pointToArray(value)\n          });\n        }\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance) ? 0 : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n      point = pointToArray(operand);\n      distance = function (value) {\n        if (!isIndexable(value)) {\n          return null;\n        }\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n    return function (branchedValues) {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      var result = {\n        result: false\n      };\n      expandArraysInBranches(branchedValues).every(function (branch) {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        var curDistance;\n        if (!matcher._isUpdate) {\n          if (!(_typeof(branch.value) === 'object')) {\n            return true;\n          }\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n        result.result = true;\n        result.distance = curDistance;\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n        return !matcher._isUpdate;\n      });\n      return result;\n    };\n  }\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n  return function (docOrBranches) {\n    var match = {};\n    match.result = subMatchers.every(function (fn) {\n      var subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result && subResult.distance !== undefined && match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n    return match;\n  };\n}\nvar andDocumentMatchers = andSomeMatchers;\nvar andBranchedMatchers = andSomeMatchers;\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n  return selectors.map(function (subSelector) {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n    return compileDocumentSelector(subSelector, matcher, {\n      inElemMatch: inElemMatch\n    });\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nfunction compileDocumentSelector(docSelector, matcher) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var docMatchers = Object.keys(docSelector).map(function (key) {\n    var subSelector = docSelector[key];\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(\"Unrecognized logical operator: \" + key);\n      }\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n    var lookUpByIndex = makeLookupFunction(key);\n    var valueMatcher = compileValueSelector(subSelector, matcher, options.isRoot);\n    return function (doc) {\n      return valueMatcher(lookUpByIndex(doc));\n    };\n  }).filter(Boolean);\n  return andDocumentMatchers(docMatchers);\n}\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(regexpElementMatcher(valueSelector));\n  }\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n  return convertElementMatcherToBranchedMatcher(equalityElementMatcher(valueSelector));\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function (branches) {\n    var expanded = options.dontExpandLeafArrays ? branches : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n    var match = {};\n    match.result = expanded.some(function (element) {\n      var matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n      return matched;\n    });\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  var pointA = pointToArray(a);\n  var pointB = pointToArray(b);\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nfunction equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return function (value) {\n      return value == null;\n    };\n  }\n  return function (value) {\n    return LocalCollection._f._equal(elementSelector, value);\n  };\n}\nfunction everythingMatcher(docOrBranchedValues) {\n  return {\n    result: true\n  };\n}\nfunction expandArraysInBranches(branches, skipTheArrays) {\n  var branchesOut = [];\n  branches.forEach(function (branch) {\n    var thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({\n        arrayIndices: branch.arrayIndices,\n        value: branch.value\n      });\n    }\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach(function (value, i) {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value: value\n        });\n      });\n    }\n  });\n  return branchesOut;\n}\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) && operand.every(function (x) {\n    return Number.isInteger(x) && x >= 0;\n  })) {\n    var buffer = new ArrayBuffer((Math.max.apply(Math, _toConsumableArray(operand)) >> 3) + 1);\n    var view = new Uint8Array(buffer);\n    operand.forEach(function (x) {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n    return view;\n  }\n\n  // bad operand\n  throw Error(\"operand to \" + selector + \" must be a numeric bitmask (representable as a \" + 'non-negative 32-bit signed integer), a bindata bitmask or an array with ' + 'bit positions (non-negative integers)');\n}\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    var buffer = new ArrayBuffer(Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT));\n    var view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach(function (byte, i) {\n        view[i] = 0xff;\n      });\n    }\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(function (existingKey) {\n    if (existingKey.length > key.length && existingKey.indexOf(key + \".\") === 0 || key.length > existingKey.length && key.indexOf(existingKey + \".\") === 0) {\n      throw new Error(\"cannot infer query fields to set, both paths '\" + existingKey + \"' and \" + (\"'\" + key + \"' are matched\"));\n    } else if (existingKey === key) {\n      throw new Error(\"cannot infer query fields to set, path '\" + key + \"' is matched twice\");\n    }\n  });\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return function (branchValues) {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {\n      result: !branchedMatcher(branchValues).result\n    };\n  };\n}\nfunction isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\nfunction isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\nfunction isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n  var theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(function (selKey) {\n    var thisIsOperator = selKey.substr(0, 1) === '$' || selKey === 'diff';\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\"Inconsistent operator: \" + JSON.stringify(valueSelector));\n      }\n      theseAreOperators = false;\n    }\n  });\n  return !!theseAreOperators; // {} has no operators\n}\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector: function (operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return function () {\n          return false;\n        };\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n      var operandType = LocalCollection._f._type(operand);\n      return function (value) {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    }\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nfunction makeLookupFunction(key) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var parts = key.split('.');\n  var firstPart = parts.length ? parts[0] : '';\n  var lookupRest = parts.length > 1 && makeLookupFunction(parts.slice(1).join('.'), options);\n  function buildResult(arrayIndices, dontIterate, value) {\n    return arrayIndices && arrayIndices.length ? dontIterate ? [{\n      arrayIndices: arrayIndices,\n      dontIterate: dontIterate,\n      value: value\n    }] : [{\n      arrayIndices: arrayIndices,\n      value: value\n    }] : dontIterate ? [{\n      dontIterate: dontIterate,\n      value: value\n    }] : [{\n      value: value\n    }];\n  }\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return function (doc, arrayIndices) {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices ? arrayIndices.concat(+firstPart, 'x') : [+firstPart, 'x'];\n    }\n\n    // Do our first lookup.\n    var firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return buildResult(arrayIndices, Array.isArray(doc) && Array.isArray(firstLevel), firstLevel);\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n      return buildResult(arrayIndices, false, undefined);\n    }\n    var result = [];\n    var appendToResult = function (more) {\n      result.push.apply(result, _toConsumableArray(more));\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) && !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach(function (branch, arrayIndex) {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices ? arrayIndices.concat(arrayIndex) : [arrayIndex]));\n        }\n      });\n    }\n    return result;\n  };\n}\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {\n  makeLookupFunction: makeLookupFunction\n};\nMinimongoError = function (message) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (typeof message === 'string' && options.field) {\n    message += \" for field '\" + options.field + \"'\";\n  }\n  var error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\nfunction nothingMatcher(docOrBranchedValues) {\n  return {\n    result: false\n  };\n}\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  var operatorMatchers = Object.keys(valueSelector).map(function (operator) {\n    var operand = valueSelector[operator];\n    var simpleRange = ['$lt', '$lte', '$gt', '$gte'].includes(operator) && typeof operand === 'number';\n    var simpleEquality = ['$ne', '$eq'].includes(operator) && operand !== Object(operand);\n    var simpleInclusion = ['$in', '$nin'].includes(operator) && Array.isArray(operand) && !operand.some(function (x) {\n      return x === Object(x);\n    });\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      var options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(options.compileElementSelector(operand, valueSelector, matcher), options);\n    }\n    throw new Error(\"Unrecognized operator: \" + operator);\n  });\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nfunction pathsToTree(paths, newLeafFn, conflictFn) {\n  var root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  paths.forEach(function (path) {\n    var pathArray = path.split('.');\n    var tree = root;\n\n    // use .every just for iteration with break\n    var success = pathArray.slice(0, -1).every(function (key, i) {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(tree[key], pathArray.slice(0, i + 1).join('.'), path);\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n      tree = tree[key];\n      return true;\n    });\n    if (success) {\n      var lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n  return root;\n}\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  var keys = Object.keys(value);\n  var unprefixedKeys = keys.filter(function (op) {\n    return op[0] !== '$';\n  });\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(\"unknown operator: \" + unprefixedKeys[0]);\n    }\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(function (op) {\n      var object = value[op];\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(function (element) {\n          return populateDocumentWithKeyValue(document, key, element);\n        });\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nfunction populateDocumentWithQueryFields(query) {\n  var document = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(function (key) {\n      var value = query[key];\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(function (element) {\n          return populateDocumentWithQueryFields(element, document);\n        });\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n  return document;\n}\nfunction projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  var fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') && !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(function (key) {\n      return key !== '_id';\n    });\n  }\n  var including = null; // Unknown\n\n  fieldsKeys.forEach(function (keyPath) {\n    var rule = !!fields[keyPath];\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError('You cannot currently mix including and excluding fields.');\n    }\n  });\n  var projectionRulesTree = pathsToTree(fieldsKeys, function (path) {\n    return including;\n  }, function (node, path, fullPath) {\n    // Check passed projection fields' keys: If you have two rules such as\n    // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n    // that happens, there is a probability you are doing something wrong,\n    // framework should notify you about such mistake earlier on cursor\n    // compilation step than later during runtime.  Note, that real mongo\n    // doesn't do anything about it and the later rule appears in projection\n    // project, more priority it takes.\n    //\n    // Example, assume following in mongo shell:\n    // > db.coll.insert({ a: { b: 23, c: 44 } })\n    // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n    // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n    // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n    //\n    // Note, how second time the return set of keys is different.\n    var currentPath = fullPath;\n    var anotherPath = path;\n    throw MinimongoError(\"both \" + currentPath + \" and \" + anotherPath + \" found in fields option, \" + 'using both of them may trigger unexpected behavior. Did you mean to ' + 'use only one of them?');\n  });\n  return {\n    including: including,\n    tree: projectionRulesTree\n  };\n}\nfunction regexpElementMatcher(regexp) {\n  return function (value) {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n    return regexp.test(value);\n  };\n}\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\"The dotted field '\" + key + \"' in '\" + path + \".\" + key + \" is not valid for storage.\");\n  }\n  if (key[0] === '$') {\n    throw new Error(\"The dollar ($) prefixed field  '\" + path + \".\" + key + \" is not valid for storage.\");\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(function (key) {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"constants.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/constants.js                                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  getAsyncMethodName: function () {\n    return getAsyncMethodName;\n  },\n  ASYNC_COLLECTION_METHODS: function () {\n    return ASYNC_COLLECTION_METHODS;\n  },\n  ASYNC_CURSOR_METHODS: function () {\n    return ASYNC_CURSOR_METHODS;\n  }\n});\nfunction getAsyncMethodName(method) {\n  return method.replace('_', '') + \"Async\";\n}\nvar ASYNC_COLLECTION_METHODS = ['_createCappedCollection', '_dropCollection', '_dropIndex', 'createIndex', 'findOne', 'insert', 'remove', 'update', 'upsert'];\nvar ASYNC_CURSOR_METHODS = ['count', 'fetch', 'forEach', 'map'];\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"cursor.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/cursor.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nmodule.export({\n  \"default\": function () {\n    return Cursor;\n  }\n});\nvar LocalCollection;\nmodule.link(\"./local_collection.js\", {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn;\nmodule.link(\"./common.js\", {\n  hasOwn: function (v) {\n    hasOwn = v;\n  }\n}, 1);\nvar ASYNC_CURSOR_METHODS, getAsyncMethodName;\nmodule.link(\"./constants\", {\n  ASYNC_CURSOR_METHODS: function (v) {\n    ASYNC_CURSOR_METHODS = v;\n  },\n  getAsyncMethodName: function (v) {\n    getAsyncMethodName = v;\n  }\n}, 2);\nvar Cursor = /*#__PURE__*/function (_Symbol$iterator, _Symbol$asyncIterator) {\n  // don't call this ctor directly.  use LocalCollection.find().\n  function Cursor(collection, selector) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;\n    } else {\n      this._selectorId = undefined;\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @deprecated in 2.9\n   * @summary Returns the number of documents that match a query. This method is\n   *          [deprecated since MongoDB 4.0](https://www.mongodb.com/docs/v4.4/reference/command/count/);\n   *          see `Collection.countDocuments` and\n   *          `Collection.estimatedDocumentCount` for a replacement.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  var _proto = Cursor.prototype;\n  _proto.count = function () {\n    function count() {\n      if (this.reactive) {\n        // allow the observe to be unordered\n        this._depend({\n          added: true,\n          removed: true\n        }, true);\n      }\n      return this._getRawObjects({\n        ordered: true\n      }).length;\n    }\n    return count;\n  }()\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  ;\n  _proto.fetch = function () {\n    function fetch() {\n      var result = [];\n      this.forEach(function (doc) {\n        result.push(doc);\n      });\n      return result;\n    }\n    return fetch;\n  }();\n  _proto[_Symbol$iterator] = function () {\n    var _this = this;\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n    var index = 0;\n    var objects = this._getRawObjects({\n      ordered: true\n    });\n    return {\n      next: function () {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          var element = _this._projectionFn(objects[index++]);\n          if (_this._transform) element = _this._transform(element);\n          return {\n            value: element\n          };\n        }\n        return {\n          done: true\n        };\n      }\n    };\n  };\n  _proto[_Symbol$asyncIterator] = function () {\n    var syncResult = this[Symbol.iterator]();\n    return {\n      next: function () {\n        function _callee() {\n          return _regeneratorRuntime.async(function () {\n            function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", Promise.resolve(syncResult.next()));\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n            return _callee$;\n          }(), null, null, null, Promise);\n        }\n        return _callee;\n      }()\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */;\n  _proto.forEach = function () {\n    function forEach(callback, thisArg) {\n      var _this2 = this;\n      if (this.reactive) {\n        this._depend({\n          addedBefore: true,\n          removed: true,\n          changed: true,\n          movedBefore: true\n        });\n      }\n      this._getRawObjects({\n        ordered: true\n      }).forEach(function (element, i) {\n        // This doubles as a clone operation.\n        element = _this2._projectionFn(element);\n        if (_this2._transform) {\n          element = _this2._transform(element);\n        }\n        callback.call(thisArg, element, i, _this2);\n      });\n    }\n    return forEach;\n  }();\n  _proto.getTransform = function () {\n    function getTransform() {\n      return this._transform;\n    }\n    return getTransform;\n  }()\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  ;\n  _proto.map = function () {\n    function map(callback, thisArg) {\n      var _this3 = this;\n      var result = [];\n      this.forEach(function (doc, i) {\n        result.push(callback.call(thisArg, doc, i, _this3));\n      });\n      return result;\n    }\n    return map;\n  }() // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  ;\n  _proto.observe = function () {\n    function observe(options) {\n      return LocalCollection._observeFromObserveChanges(this, options);\n    }\n    return observe;\n  }()\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  ;\n  _proto.observeChanges = function () {\n    function observeChanges(options) {\n      var _this4 = this;\n      var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n      // there are several places that assume you aren't combining skip/limit with\n      // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n      // comment in _modifyAndNotify\n      // XXX allow skip/limit with unordered observe\n      if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n        throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n      }\n      if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n        throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n      }\n      var distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();\n      var query = {\n        cursor: this,\n        dirty: false,\n        distances: distances,\n        matcher: this.matcher,\n        // not fast pathed\n        ordered: ordered,\n        projectionFn: this._projectionFn,\n        resultsSnapshot: null,\n        sorter: ordered && this.sorter\n      };\n      var qid;\n\n      // Non-reactive queries call added[Before] and then never call anything\n      // else.\n      if (this.reactive) {\n        qid = this.collection.next_qid++;\n        this.collection.queries[qid] = query;\n      }\n      query.results = this._getRawObjects({\n        ordered: ordered,\n        distances: query.distances\n      });\n      if (this.collection.paused) {\n        query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();\n      }\n\n      // wrap callbacks we were passed. callbacks only fire when not paused and\n      // are never undefined\n      // Filters out blacklisted fields according to cursor's projection.\n      // XXX wrong place for this?\n\n      // furthermore, callbacks enqueue until the operation we're working on is\n      // done.\n      var wrapCallback = function (fn) {\n        if (!fn) {\n          return function () {};\n        }\n        var self = _this4;\n        return function /* args*/\n        () {\n          var _this5 = this;\n          if (self.collection.paused) {\n            return;\n          }\n          var args = arguments;\n          self.collection._observeQueue.queueTask(function () {\n            fn.apply(_this5, args);\n          });\n        };\n      };\n      query.added = wrapCallback(options.added);\n      query.changed = wrapCallback(options.changed);\n      query.removed = wrapCallback(options.removed);\n      if (ordered) {\n        query.addedBefore = wrapCallback(options.addedBefore);\n        query.movedBefore = wrapCallback(options.movedBefore);\n      }\n      if (!options._suppress_initial && !this.collection.paused) {\n        query.results.forEach(function (doc) {\n          var fields = EJSON.clone(doc);\n          delete fields._id;\n          if (ordered) {\n            query.addedBefore(doc._id, _this4._projectionFn(fields), null);\n          }\n          query.added(doc._id, _this4._projectionFn(fields));\n        });\n      }\n      var handle = Object.assign(new LocalCollection.ObserveHandle(), {\n        collection: this.collection,\n        stop: function () {\n          if (_this4.reactive) {\n            delete _this4.collection.queries[qid];\n          }\n        }\n      });\n      if (this.reactive && Tracker.active) {\n        // XXX in many cases, the same observe will be recreated when\n        // the current autorun is rerun.  we could save work by\n        // letting it linger across rerun and potentially get\n        // repurposed if the same observe is performed, using logic\n        // similar to that of Meteor.subscribe.\n        Tracker.onInvalidate(function () {\n          handle.stop();\n        });\n      }\n\n      // run the observe callbacks resulting from the initial contents\n      // before we leave the observe.\n      this.collection._observeQueue.drain();\n      return handle;\n    }\n    return observeChanges;\n  }() // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  ;\n  _proto._depend = function () {\n    function _depend(changers, _allow_unordered) {\n      if (Tracker.active) {\n        var dependency = new Tracker.Dependency();\n        var notify = dependency.changed.bind(dependency);\n        dependency.depend();\n        var options = {\n          _allow_unordered: _allow_unordered,\n          _suppress_initial: true\n        };\n        ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(function (fn) {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n        // observeChanges will stop() when this computation is invalidated\n        this.observeChanges(options);\n      }\n    }\n    return _depend;\n  }();\n  _proto._getCollectionName = function () {\n    function _getCollectionName() {\n      return this.collection.name;\n    }\n    return _getCollectionName;\n  }() // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  ;\n  _proto._getRawObjects = function () {\n    function _getRawObjects() {\n      var _this6 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // By default this method will respect skip and limit because .fetch(),\n      // .forEach() etc... expect this behaviour. It can be forced to ignore\n      // skip and limit by setting applySkipLimit to false (.count() does this,\n      // for example)\n      var applySkipLimit = options.applySkipLimit !== false;\n\n      // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n      // compatible\n      var results = options.ordered ? [] : new LocalCollection._IdMap();\n\n      // fast path for single ID value\n      if (this._selectorId !== undefined) {\n        // If you have non-zero skip and ask for a single id, you get nothing.\n        // This is so it matches the behavior of the '{_id: foo}' path.\n        if (applySkipLimit && this.skip) {\n          return results;\n        }\n        var selectedDoc = this.collection._docs.get(this._selectorId);\n        if (selectedDoc) {\n          if (options.ordered) {\n            results.push(selectedDoc);\n          } else {\n            results.set(this._selectorId, selectedDoc);\n          }\n        }\n        return results;\n      }\n\n      // slow path for arbitrary selector, sort, skip, limit\n\n      // in the observeChanges case, distances is actually part of the \"query\"\n      // (ie, live results set) object.  in other cases, distances is only used\n      // inside this function.\n      var distances;\n      if (this.matcher.hasGeoQuery() && options.ordered) {\n        if (options.distances) {\n          distances = options.distances;\n          distances.clear();\n        } else {\n          distances = new LocalCollection._IdMap();\n        }\n      }\n      this.collection._docs.forEach(function (doc, id) {\n        var matchResult = _this6.matcher.documentMatches(doc);\n        if (matchResult.result) {\n          if (options.ordered) {\n            results.push(doc);\n            if (distances && matchResult.distance !== undefined) {\n              distances.set(id, matchResult.distance);\n            }\n          } else {\n            results.set(id, doc);\n          }\n        }\n\n        // Override to ensure all docs are matched if ignoring skip & limit\n        if (!applySkipLimit) {\n          return true;\n        }\n\n        // Fast path for limited unsorted queries.\n        // XXX 'length' check here seems wrong for ordered\n        return !_this6.limit || _this6.skip || _this6.sorter || results.length !== _this6.limit;\n      });\n      if (!options.ordered) {\n        return results;\n      }\n      if (this.sorter) {\n        results.sort(this.sorter.getComparator({\n          distances: distances\n        }));\n      }\n\n      // Return the full set of results if there is no skip or limit or if we're\n      // ignoring them\n      if (!applySkipLimit || !this.limit && !this.skip) {\n        return results;\n      }\n      return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);\n    }\n    return _getRawObjects;\n  }();\n  _proto._publishCursor = function () {\n    function _publishCursor(subscription) {\n      // XXX minimongo should not depend on mongo-livedata!\n      if (!Package.mongo) {\n        throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');\n      }\n      if (!this.collection.name) {\n        throw new Error('Can\\'t publish a cursor from a collection without a name.');\n      }\n      return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);\n    }\n    return _publishCursor;\n  }();\n  return Cursor;\n}(Symbol.iterator, Symbol.asyncIterator);\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(function (method) {\n  var asyncName = getAsyncMethodName(method);\n  Cursor.prototype[asyncName] = function () {\n    try {\n      this[method].isCalledFromAsync = true;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return Promise.resolve(this[method].apply(this, args));\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n});\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"local_collection.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/local_collection.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _toConsumableArray;\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 2);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 3);\nmodule.export({\n  \"default\": function () {\n    return LocalCollection;\n  }\n});\nvar Cursor;\nmodule.link(\"./cursor.js\", {\n  \"default\": function (v) {\n    Cursor = v;\n  }\n}, 0);\nvar ObserveHandle;\nmodule.link(\"./observe_handle.js\", {\n  \"default\": function (v) {\n    ObserveHandle = v;\n  }\n}, 1);\nvar hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;\nmodule.link(\"./common.js\", {\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  isIndexable: function (v) {\n    isIndexable = v;\n  },\n  isNumericKey: function (v) {\n    isNumericKey = v;\n  },\n  isOperatorObject: function (v) {\n    isOperatorObject = v;\n  },\n  populateDocumentWithQueryFields: function (v) {\n    populateDocumentWithQueryFields = v;\n  },\n  projectionDetails: function (v) {\n    projectionDetails = v;\n  }\n}, 2);\nvar LocalCollection = /*#__PURE__*/function () {\n  function LocalCollection(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap();\n    this._observeQueue = new Meteor._SynchronousQueue();\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n  var _proto = LocalCollection.prototype;\n  _proto.countDocuments = function () {\n    function countDocuments(selector, options) {\n      return this.find(selector !== null && selector !== void 0 ? selector : {}, options).countAsync();\n    }\n    return countDocuments;\n  }();\n  _proto.estimatedDocumentCount = function () {\n    function estimatedDocumentCount(options) {\n      return this.find({}, options).countAsync();\n    }\n    return estimatedDocumentCount;\n  }() // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  ;\n  _proto.find = function () {\n    function find(selector, options) {\n      // default syntax for everything is to omit the selector argument.\n      // but if selector is explicitly passed in as false or undefined, we\n      // want a selector that matches nothing.\n      if (arguments.length === 0) {\n        selector = {};\n      }\n      return new LocalCollection.Cursor(this, selector, options);\n    }\n    return find;\n  }();\n  _proto.findOne = function () {\n    function findOne(selector) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (arguments.length === 0) {\n        selector = {};\n      }\n\n      // NOTE: by setting limit 1 here, we end up using very inefficient\n      // code that recomputes the whole query on each update. The upside is\n      // that when you reactively depend on a findOne you only get\n      // invalidated when the found object changes, not any object in the\n      // collection. Most findOne will be by id, which has a fast path, so\n      // this might not be a big deal. In most cases, invalidation causes\n      // the called to re-query anyway, so this should be a net performance\n      // improvement.\n      options.limit = 1;\n      return this.find(selector, options).fetch()[0];\n    }\n    return findOne;\n  }() // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  ;\n  _proto.insert = function () {\n    function insert(doc, callback) {\n      var _this = this;\n      doc = EJSON.clone(doc);\n      assertHasValidFieldNames(doc);\n\n      // if you really want to use ObjectIDs, set this global.\n      // Mongo.Collection specifies its own ids and does not use this code.\n      if (!hasOwn.call(doc, '_id')) {\n        doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n      }\n      var id = doc._id;\n      if (this._docs.has(id)) {\n        throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n      }\n      this._saveOriginal(id, undefined);\n      this._docs.set(id, doc);\n      var queriesToRecompute = [];\n\n      // trigger live queries that match\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        var matchResult = query.matcher.documentMatches(doc);\n        if (matchResult.result) {\n          if (query.distances && matchResult.distance !== undefined) {\n            query.distances.set(id, matchResult.distance);\n          }\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            LocalCollection._insertInResults(query, doc);\n          }\n        }\n      });\n      queriesToRecompute.forEach(function (qid) {\n        if (_this.queries[qid]) {\n          _this._recomputeResults(_this.queries[qid]);\n        }\n      });\n      this._observeQueue.drain();\n\n      // Defer because the caller likely doesn't expect the callback to be run\n      // immediately.\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, id);\n        });\n      }\n      return id;\n    }\n    return insert;\n  }() // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  ;\n  _proto.pauseObservers = function () {\n    function pauseObservers() {\n      var _this2 = this;\n      // No-op if already paused.\n      if (this.paused) {\n        return;\n      }\n\n      // Set the 'paused' flag such that new observer messages don't fire.\n      this.paused = true;\n\n      // Take a snapshot of the query results for each query.\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this2.queries[qid];\n        query.resultsSnapshot = EJSON.clone(query.results);\n      });\n    }\n    return pauseObservers;\n  }();\n  _proto.remove = function () {\n    function remove(selector, callback) {\n      var _this3 = this;\n      // Easy special case: if we're not calling observeChanges callbacks and\n      // we're not saving originals and we got asked to remove everything, then\n      // just empty everything directly.\n      if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n        var _result = this._docs.size();\n        this._docs.clear();\n        Object.keys(this.queries).forEach(function (qid) {\n          var query = _this3.queries[qid];\n          if (query.ordered) {\n            query.results = [];\n          } else {\n            query.results.clear();\n          }\n        });\n        if (callback) {\n          Meteor.defer(function () {\n            callback(null, _result);\n          });\n        }\n        return _result;\n      }\n      var matcher = new Minimongo.Matcher(selector);\n      var remove = [];\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        if (matcher.documentMatches(doc).result) {\n          remove.push(id);\n        }\n      });\n      var queriesToRecompute = [];\n      var queryRemove = [];\n      var _loop = function () {\n        var removeId = remove[i];\n        var removeDoc = _this3._docs.get(removeId);\n        Object.keys(_this3.queries).forEach(function (qid) {\n          var query = _this3.queries[qid];\n          if (query.dirty) {\n            return;\n          }\n          if (query.matcher.documentMatches(removeDoc).result) {\n            if (query.cursor.skip || query.cursor.limit) {\n              queriesToRecompute.push(qid);\n            } else {\n              queryRemove.push({\n                qid: qid,\n                doc: removeDoc\n              });\n            }\n          }\n        });\n        _this3._saveOriginal(removeId, removeDoc);\n        _this3._docs.remove(removeId);\n      };\n      for (var i = 0; i < remove.length; i++) {\n        _loop();\n      }\n\n      // run live query callbacks _after_ we've removed the documents.\n      queryRemove.forEach(function (remove) {\n        var query = _this3.queries[remove.qid];\n        if (query) {\n          query.distances && query.distances.remove(remove.doc._id);\n          LocalCollection._removeFromResults(query, remove.doc);\n        }\n      });\n      queriesToRecompute.forEach(function (qid) {\n        var query = _this3.queries[qid];\n        if (query) {\n          _this3._recomputeResults(query);\n        }\n      });\n      this._observeQueue.drain();\n      var result = remove.length;\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n      return result;\n    }\n    return remove;\n  }() // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  ;\n  _proto.resumeObservers = function () {\n    function resumeObservers() {\n      var _this4 = this;\n      // No-op if not paused.\n      if (!this.paused) {\n        return;\n      }\n\n      // Unset the 'paused' flag. Make sure to do this first, otherwise\n      // observer methods won't actually fire when we trigger them.\n      this.paused = false;\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this4.queries[qid];\n        if (query.dirty) {\n          query.dirty = false;\n\n          // re-compute results will perform `LocalCollection._diffQueryChanges`\n          // automatically.\n          _this4._recomputeResults(query, query.resultsSnapshot);\n        } else {\n          // Diff the current results against the snapshot and send to observers.\n          // pass the query object for its observer callbacks.\n          LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {\n            projectionFn: query.projectionFn\n          });\n        }\n        query.resultsSnapshot = null;\n      });\n      this._observeQueue.drain();\n    }\n    return resumeObservers;\n  }();\n  _proto.retrieveOriginals = function () {\n    function retrieveOriginals() {\n      if (!this._savedOriginals) {\n        throw new Error('Called retrieveOriginals without saveOriginals');\n      }\n      var originals = this._savedOriginals;\n      this._savedOriginals = null;\n      return originals;\n    }\n    return retrieveOriginals;\n  }() // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  ;\n  _proto.saveOriginals = function () {\n    function saveOriginals() {\n      if (this._savedOriginals) {\n        throw new Error('Called saveOriginals twice without retrieveOriginals');\n      }\n      this._savedOriginals = new LocalCollection._IdMap();\n    }\n    return saveOriginals;\n  }() // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  ;\n  _proto.update = function () {\n    function update(selector, mod, options, callback) {\n      var _this5 = this;\n      if (!callback && options instanceof Function) {\n        callback = options;\n        options = null;\n      }\n      if (!options) {\n        options = {};\n      }\n      var matcher = new Minimongo.Matcher(selector, true);\n\n      // Save the original results of any query that we might need to\n      // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n      // it. (We don't need to save the original results of paused queries because\n      // they already have a resultsSnapshot and we won't be diffing in\n      // _recomputeResults.)\n      var qidToOriginalResults = {};\n\n      // We should only clone each document once, even if it appears in multiple\n      // queries\n      var docMap = new LocalCollection._IdMap();\n      var idsMatched = LocalCollection._idsMatchedBySelector(selector);\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this5.queries[qid];\n        if ((query.cursor.skip || query.cursor.limit) && !_this5.paused) {\n          // Catch the case of a reactive `count()` on a cursor with skip\n          // or limit, which registers an unordered observe. This is a\n          // pretty rare case, so we just clone the entire result set with\n          // no optimizations for documents that appear in these result\n          // sets and other queries.\n          if (query.results instanceof LocalCollection._IdMap) {\n            qidToOriginalResults[qid] = query.results.clone();\n            return;\n          }\n          if (!(query.results instanceof Array)) {\n            throw new Error('Assertion failed: query.results not an array');\n          }\n\n          // Clones a document to be stored in `qidToOriginalResults`\n          // because it may be modified before the new and old result sets\n          // are diffed. But if we know exactly which document IDs we're\n          // going to modify, then we only need to clone those.\n          var memoizedCloneIfNeeded = function (doc) {\n            if (docMap.has(doc._id)) {\n              return docMap.get(doc._id);\n            }\n            var docToMemoize = idsMatched && !idsMatched.some(function (id) {\n              return EJSON.equals(id, doc._id);\n            }) ? doc : EJSON.clone(doc);\n            docMap.set(doc._id, docToMemoize);\n            return docToMemoize;\n          };\n          qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n        }\n      });\n      var recomputeQids = {};\n      var updateCount = 0;\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        var queryResult = matcher.documentMatches(doc);\n        if (queryResult.result) {\n          // XXX Should we save the original even if mod ends up being a no-op?\n          _this5._saveOriginal(id, doc);\n          _this5._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n          ++updateCount;\n          if (!options.multi) {\n            return false; // break\n          }\n        }\n        return true;\n      });\n      Object.keys(recomputeQids).forEach(function (qid) {\n        var query = _this5.queries[qid];\n        if (query) {\n          _this5._recomputeResults(query, qidToOriginalResults[qid]);\n        }\n      });\n      this._observeQueue.drain();\n\n      // If we are doing an upsert, and we didn't modify any documents yet, then\n      // it's time to do an insert. Figure out what document we are inserting, and\n      // generate an id for it.\n      var insertedId;\n      if (updateCount === 0 && options.upsert) {\n        var doc = LocalCollection._createUpsertDocument(selector, mod);\n        if (!doc._id && options.insertedId) {\n          doc._id = options.insertedId;\n        }\n        insertedId = this.insert(doc);\n        updateCount = 1;\n      }\n\n      // Return the number of affected documents, or in the upsert case, an object\n      // containing the number of affected docs and the id of the doc that was\n      // inserted, if any.\n      var result;\n      if (options._returnObject) {\n        result = {\n          numberAffected: updateCount\n        };\n        if (insertedId !== undefined) {\n          result.insertedId = insertedId;\n        }\n      } else {\n        result = updateCount;\n      }\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n      return result;\n    }\n    return update;\n  }() // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  ;\n  _proto.upsert = function () {\n    function upsert(selector, mod, options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      return this.update(selector, mod, Object.assign({}, options, {\n        upsert: true,\n        _returnObject: true\n      }), callback);\n    }\n    return upsert;\n  }() // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  ;\n  _proto._eachPossiblyMatchingDoc = function () {\n    function _eachPossiblyMatchingDoc(selector, fn) {\n      var _this6 = this;\n      var specificIds = LocalCollection._idsMatchedBySelector(selector);\n      if (specificIds) {\n        specificIds.some(function (id) {\n          var doc = _this6._docs.get(id);\n          if (doc) {\n            return fn(doc, id) === false;\n          }\n        });\n      } else {\n        this._docs.forEach(fn);\n      }\n    }\n    return _eachPossiblyMatchingDoc;\n  }();\n  _proto._modifyAndNotify = function () {\n    function _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n      var _this7 = this;\n      var matched_before = {};\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this7.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        if (query.ordered) {\n          matched_before[qid] = query.matcher.documentMatches(doc).result;\n        } else {\n          // Because we don't support skip or limit (yet) in unordered queries, we\n          // can just do a direct lookup.\n          matched_before[qid] = query.results.has(doc._id);\n        }\n      });\n      var old_doc = EJSON.clone(doc);\n      LocalCollection._modify(doc, mod, {\n        arrayIndices: arrayIndices\n      });\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this7.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        var afterMatch = query.matcher.documentMatches(doc);\n        var after = afterMatch.result;\n        var before = matched_before[qid];\n        if (after && query.distances && afterMatch.distance !== undefined) {\n          query.distances.set(doc._id, afterMatch.distance);\n        }\n        if (query.cursor.skip || query.cursor.limit) {\n          // We need to recompute any query where the doc may have been in the\n          // cursor's window either before or after the update. (Note that if skip\n          // or limit is set, \"before\" and \"after\" being true do not necessarily\n          // mean that the document is in the cursor's output after skip/limit is\n          // applied... but if they are false, then the document definitely is NOT\n          // in the output. So it's safe to skip recompute if neither before or\n          // after are true.)\n          if (before || after) {\n            recomputeQids[qid] = true;\n          }\n        } else if (before && !after) {\n          LocalCollection._removeFromResults(query, doc);\n        } else if (!before && after) {\n          LocalCollection._insertInResults(query, doc);\n        } else if (before && after) {\n          LocalCollection._updateInResults(query, doc, old_doc);\n        }\n      });\n    }\n    return _modifyAndNotify;\n  }() // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  ;\n  _proto._recomputeResults = function () {\n    function _recomputeResults(query, oldResults) {\n      if (this.paused) {\n        // There's no reason to recompute the results now as we're still paused.\n        // By flagging the query as \"dirty\", the recompute will be performed\n        // when resumeObservers is called.\n        query.dirty = true;\n        return;\n      }\n      if (!this.paused && !oldResults) {\n        oldResults = query.results;\n      }\n      if (query.distances) {\n        query.distances.clear();\n      }\n      query.results = query.cursor._getRawObjects({\n        distances: query.distances,\n        ordered: query.ordered\n      });\n      if (!this.paused) {\n        LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {\n          projectionFn: query.projectionFn\n        });\n      }\n    }\n    return _recomputeResults;\n  }();\n  _proto._saveOriginal = function () {\n    function _saveOriginal(id, doc) {\n      // Are we even trying to save originals?\n      if (!this._savedOriginals) {\n        return;\n      }\n\n      // Have we previously mutated the original (and so 'doc' is not actually\n      // original)?  (Note the 'has' check rather than truth: we store undefined\n      // here for inserted docs!)\n      if (this._savedOriginals.has(id)) {\n        return;\n      }\n      this._savedOriginals.set(id, EJSON.clone(doc));\n    }\n    return _saveOriginal;\n  }();\n  return LocalCollection;\n}();\nLocalCollection.Cursor = Cursor;\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function () {\n  function _CachingChangeObserver() {\n    var _this8 = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n    var callbacks = options.callbacks || {};\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: function (id, fields, before) {\n          // Take a shallow copy since the top-level properties can be changed\n          var doc = _objectSpread({}, fields);\n          doc._id = id;\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(_this8, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(_this8, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          _this8.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: function (id, before) {\n          var doc = _this8.docs.get(id);\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(_this8, id, before);\n          }\n          _this8.docs.moveBefore(id, before || null);\n        }\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap();\n      this.applyChange = {\n        added: function (id, fields) {\n          // Take a shallow copy since the top-level properties can be changed\n          var doc = _objectSpread({}, fields);\n          if (callbacks.added) {\n            callbacks.added.call(_this8, id, EJSON.clone(fields));\n          }\n          doc._id = id;\n          _this8.docs.set(id, doc);\n        }\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = function (id, fields) {\n      var doc = _this8.docs.get(id);\n      if (!doc) {\n        throw new Error(\"Unknown id for changed: \" + id);\n      }\n      if (callbacks.changed) {\n        callbacks.changed.call(_this8, id, EJSON.clone(fields));\n      }\n      DiffSequence.applyChanges(doc, fields);\n    };\n    this.applyChange.removed = function (id) {\n      if (callbacks.removed) {\n        callbacks.removed.call(_this8, id);\n      }\n      _this8.docs.remove(id);\n    };\n  }\n  return _CachingChangeObserver;\n}();\nLocalCollection._IdMap = /*#__PURE__*/function (_IdMap2) {\n  _inheritsLoose(_IdMap, _IdMap2);\n  function _IdMap() {\n    return _IdMap2.call(this, MongoID.idStringify, MongoID.idParse) || this;\n  }\n  return _IdMap;\n}(IdMap);\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = function (transform) {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n  var wrapped = function (doc) {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n    var id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0;\n  var range = array.length;\n  while (range > 0) {\n    var halfRange = Math.floor(range / 2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n  return first;\n};\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n  Object.keys(fields).forEach(function (keyPath) {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError('Minimongo doesn\\'t support $ operator in projections yet.');\n    }\n    var value = fields[keyPath];\n    if (_typeof(value) === 'object' && ['$elemMatch', '$meta', '$slice'].some(function (key) {\n      return hasOwn.call(value, key);\n    })) {\n      throw MinimongoError('Minimongo doesn\\'t support operators in projections yet.');\n    }\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError('Projection values should be one of 1, 0, true, or false');\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n  var _idProjection = fields._id === undefined ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(function (subdoc) {\n        return transform(subdoc, ruleTree);\n      });\n    }\n    var result = details.including ? {} : EJSON.clone(doc);\n    Object.keys(ruleTree).forEach(function (key) {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n      var rule = ruleTree[key];\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n    return doc != null ? result : doc;\n  };\n  return function (doc) {\n    var result = transform(doc, details.tree);\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = function (selector, modifier) {\n  var selectorDocument = populateDocumentWithQueryFields(selector);\n  var isModify = LocalCollection._isModificationMod(modifier);\n  var newDoc = {};\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {\n    $set: selectorDocument\n  });\n  LocalCollection._modify(newDoc, modifier, {\n    isInsert: true\n  });\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  var replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n  return replacement;\n};\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\nLocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n  for (var i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n  return null;\n};\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n        distances: query.distances\n      }), query.results, doc);\n      var next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n  var i = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(i, 0, value);\n  return i;\n};\nLocalCollection._isModificationMod = function (mod) {\n  var isModify = false;\n  var isReplace = false;\n  Object.keys(mod).forEach(function (key) {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n  if (isModify && isReplace) {\n    throw new Error('Update parameter cannot have both modifier and non-modifier fields.');\n  }\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, modifier) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n  var isModifier = isOperatorObject(modifier);\n  var newDoc = isModifier ? EJSON.clone(doc) : modifier;\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(function (operator) {\n      // Treat $setOnInsert as $set if this is an insert.\n      var setOnInsert = options.isInsert && operator === '$setOnInsert';\n      var modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      var operand = modifier[operator];\n      if (!modFunc) {\n        throw MinimongoError(\"Invalid modifier specified \" + operator);\n      }\n      Object.keys(operand).forEach(function (keypath) {\n        var arg = operand[keypath];\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n        var keyparts = keypath.split('.');\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\"The update path '\" + keypath + \"' contains an empty field name, \" + 'which is not allowed.');\n        }\n        var target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\"After applying the update to the document {_id: \\\"\" + doc._id + \"\\\", ...},\" + ' the (immutable) field \\'_id\\' was found to have been altered to ' + (\"_id: \\\"\" + newDoc._id + \"\\\"\"));\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\"The _id field cannot be changed from {_id: \\\"\" + doc._id + \"\\\"} to \" + (\"{_id: \\\"\" + modifier._id + \"\\\"}\"));\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(function (key) {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n  Object.keys(newDoc).forEach(function (key) {\n    doc[key] = newDoc[key];\n  });\n};\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {\n    return doc;\n  };\n  var suppressed = !!observeCallbacks._suppress_initial;\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n        var doc = transform(Object.assign(fields, {\n          _id: id\n        }));\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n        var doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(\"Unknown id for changed: \" + id);\n        }\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n        var from = indices ? this.docs.indexOf(id) : -1;\n        var to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n        observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);\n      },\n      removed: function (id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        var doc = transform(this.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {\n            _id: id\n          })));\n        }\n      },\n      changed: function (id, fields) {\n        if (observeCallbacks.changed) {\n          var oldDoc = this.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      }\n    };\n  }\n  var changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  var handle = cursor.observeChanges(changeObserver.applyChange, {\n    nonMutatingCallbacks: true\n  });\n  suppressed = false;\n  return handle;\n};\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n  return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);\n};\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id; // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;\n};\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n  var old_idx = LocalCollection._findInOrderedResults(query, doc);\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n    distances: query.distances\n  }), query.results, doc);\n  if (old_idx !== new_idx) {\n    var next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\nvar MODIFIERS = {\n  $currentDate: function (target, field, arg) {\n    if (_typeof(arg) === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {\n          field: field\n        });\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {\n        field: field\n      });\n    }\n    target[field] = new Date();\n  },\n  $inc: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $inc modifier to non-number', {\n          field: field\n        });\n      }\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $min modifier to non-number', {\n          field: field\n        });\n      }\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $max modifier to non-number', {\n          field: field\n        });\n      }\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $mul modifier to non-number', {\n          field: field\n        });\n      }\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {\n        field: field\n      });\n    }\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {\n        field: field\n      });\n    }\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {\n        field: field\n      });\n    }\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError('The \\'to\\' field for $rename cannot contain an embedded null byte', {\n        field: field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    var object = target[field];\n    delete target[field];\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {\n      forbidArray: true\n    });\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {\n        field: field\n      });\n    }\n    target2[keyparts.pop()] = object;\n  },\n  $set: function (target, field, arg) {\n    if (target !== Object(target)) {\n      // not an array or an object\n      var error = MinimongoError('Cannot set property on non-object field', {\n        field: field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (target === null) {\n      var _error = MinimongoError('Cannot set property on null', {\n        field: field\n      });\n      _error.setPropertyError = true;\n      throw _error;\n    }\n    assertHasValidFieldNames(arg);\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {\n        field: field\n      });\n    }\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {\n        field: field\n      });\n    }\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    var position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {\n          field: field\n        });\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError('$position in $push must be zero or positive', {\n          field: field\n        });\n      }\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {\n          field: field\n        });\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {\n          field: field\n        });\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      toPush.forEach(function (element) {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {\n            field: field\n          });\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(function (element) {\n        target[field].push(element);\n      });\n    } else {\n      var _target$field;\n      var spliceArguments = [position, 0];\n      toPush.forEach(function (element) {\n        spliceArguments.push(element);\n      });\n      (_target$field = target[field]).splice.apply(_target$field, spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(_typeof(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n    assertHasValidFieldNames(arg);\n    var toPush = target[field];\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError('Cannot apply $pushAll modifier to non-array', {\n        field: field\n      });\n    } else {\n      toPush.push.apply(toPush, _toConsumableArray(arg));\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n    if (_typeof(arg) === 'object') {\n      // check if first key is '$each'\n      var keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n    var values = isEach ? arg.$each : [arg];\n    assertHasValidFieldNames(values);\n    var toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError('Cannot apply $addToSet modifier to non-array', {\n        field: field\n      });\n    } else {\n      values.forEach(function (value) {\n        if (toAdd.some(function (element) {\n          return LocalCollection._f._equal(value, element);\n        })) {\n          return;\n        }\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    var toPop = target[field];\n    if (toPop === undefined) {\n      return;\n    }\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {\n        field: field\n      });\n    }\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    var toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n    var out;\n    if (arg != null && _typeof(arg) === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      var matcher = new Minimongo.Matcher(arg);\n      out = toPull.filter(function (element) {\n        return !matcher.documentMatches(element).result;\n      });\n    } else {\n      out = toPull.filter(function (element) {\n        return !LocalCollection._f._equal(element, arg);\n      });\n    }\n    target[field] = out;\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(_typeof(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {\n        field: field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    var toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n    target[field] = toPull.filter(function (object) {\n      return !arg.some(function (element) {\n        return LocalCollection._f._equal(object, element);\n      });\n    });\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {\n      field: field\n    });\n  },\n  $v: function () {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\nvar NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nvar invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && _typeof(doc) === 'object') {\n    JSON.stringify(doc, function (key, value) {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\nfunction assertIsValidFieldName(key) {\n  var match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(\"Key \" + key + \" must not \" + invalidCharMsg[match[0]]);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var usedArrayIndex = false;\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = i === keyparts.length - 1;\n    var keypart = keyparts[i];\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n      var error = MinimongoError(\"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n        throw MinimongoError(\"can't append to array using string field name [\" + keypart + \"]\");\n      }\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (_typeof(doc[keypart]) !== 'object') {\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] + \"' of list value \" + JSON.stringify(doc[keypart]));\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n    if (last) {\n      return doc;\n    }\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"matcher.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/matcher.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _Package$mongoDecima;\nmodule.export({\n  \"default\": function () {\n    return Matcher;\n  }\n});\nvar LocalCollection;\nmodule.link(\"./local_collection.js\", {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar compileDocumentSelector, hasOwn, nothingMatcher;\nmodule.link(\"./common.js\", {\n  compileDocumentSelector: function (v) {\n    compileDocumentSelector = v;\n  },\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  nothingMatcher: function (v) {\n    nothingMatcher = v;\n  }\n}, 1);\nvar Decimal = ((_Package$mongoDecima = Package['mongo-decimal']) === null || _Package$mongoDecima === void 0 ? void 0 : _Package$mongoDecima.Decimal) || function () {\n  function DecimalStub() {}\n  return DecimalStub;\n}();\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nvar Matcher = /*#__PURE__*/function () {\n  function Matcher(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n  var _proto = Matcher.prototype;\n  _proto.documentMatches = function () {\n    function documentMatches(doc) {\n      if (doc !== Object(doc)) {\n        throw Error('documentMatches needs a document');\n      }\n      return this._docMatcher(doc);\n    }\n    return documentMatches;\n  }();\n  _proto.hasGeoQuery = function () {\n    function hasGeoQuery() {\n      return this._hasGeoQuery;\n    }\n    return hasGeoQuery;\n  }();\n  _proto.hasWhere = function () {\n    function hasWhere() {\n      return this._hasWhere;\n    }\n    return hasWhere;\n  }();\n  _proto.isSimple = function () {\n    function isSimple() {\n      return this._isSimple;\n    }\n    return isSimple;\n  }() // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  ;\n  _proto._compileSelector = function () {\n    function _compileSelector(selector) {\n      // you can pass a literal function instead of a selector\n      if (selector instanceof Function) {\n        this._isSimple = false;\n        this._selector = selector;\n        this._recordPathUsed('');\n        return function (doc) {\n          return {\n            result: !!selector.call(doc)\n          };\n        };\n      }\n\n      // shorthand -- scalar _id\n      if (LocalCollection._selectorIsId(selector)) {\n        this._selector = {\n          _id: selector\n        };\n        this._recordPathUsed('_id');\n        return function (doc) {\n          return {\n            result: EJSON.equals(doc._id, selector)\n          };\n        };\n      }\n\n      // protect against dangerous selectors.  falsey and {_id: falsey} are both\n      // likely programmer error, and not what you want, particularly for\n      // destructive operations.\n      if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n        this._isSimple = false;\n        return nothingMatcher;\n      }\n\n      // Top level can't be an array or true or binary.\n      if (Array.isArray(selector) || EJSON.isBinary(selector) || typeof selector === 'boolean') {\n        throw new Error(\"Invalid selector: \" + selector);\n      }\n      this._selector = EJSON.clone(selector);\n      return compileDocumentSelector(selector, this, {\n        isRoot: true\n      });\n    }\n    return _compileSelector;\n  }() // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  ;\n  _proto._getPaths = function () {\n    function _getPaths() {\n      return Object.keys(this._paths);\n    }\n    return _getPaths;\n  }();\n  _proto._recordPathUsed = function () {\n    function _recordPathUsed(path) {\n      this._paths[path] = true;\n    }\n    return _recordPathUsed;\n  }();\n  return Matcher;\n}();\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type: function (v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n    if (typeof v === 'string') {\n      return 2;\n    }\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n    if (Array.isArray(v)) {\n      return 4;\n    }\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n    if (typeof v === 'function') {\n      return 13;\n    }\n    if (v instanceof Date) {\n      return 9;\n    }\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n    if (v instanceof Decimal) {\n      return 1;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n  // deep equality test: use for literal document and array matches\n  _equal: function (a, b) {\n    return EJSON.equals(a, b, {\n      keyOrderSensitive: true\n    });\n  },\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder: function (t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [-1,\n    // (not a type)\n    1,\n    // number\n    2,\n    // string\n    3,\n    // object\n    4,\n    // array\n    5,\n    // binary\n    -1,\n    // deprecated\n    6,\n    // ObjectID\n    7,\n    // bool\n    8,\n    // Date\n    0,\n    // null\n    9,\n    // RegExp\n    -1,\n    // deprecated\n    100,\n    // JS code\n    2,\n    // deprecated (symbol)\n    100,\n    // JS code\n    1,\n    // 32-bit int\n    8,\n    // Mongo timestamp\n    1 // 64-bit int\n    ][t];\n  },\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp: function (a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n    if (b === undefined) {\n      return 1;\n    }\n    var ta = LocalCollection._f._type(a);\n    var tb = LocalCollection._f._type(b);\n    var oa = LocalCollection._f._typeorder(ta);\n    var ob = LocalCollection._f._typeorder(tb);\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n    if (ta === 7) {\n      // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n    if (ta === 9) {\n      // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = isNaN(a) ? 0 : a.getTime();\n      b = isNaN(b) ? 0 : b.getTime();\n    }\n    if (ta === 1) {\n      // double\n      if (a instanceof Decimal) {\n        return a.minus(b).toNumber();\n      } else {\n        return a - b;\n      }\n    }\n    if (tb === 2)\n      // string\n      return a < b ? -1 : a === b ? 0 : 1;\n    if (ta === 3) {\n      // Object\n      // this could be much more efficient in the expected case ...\n      var toArray = function (object) {\n        var result = [];\n        Object.keys(object).forEach(function (key) {\n          result.push(key, object[key]);\n        });\n        return result;\n      };\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n    if (ta === 4) {\n      // Array\n      for (var i = 0;; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n        if (i === b.length) {\n          return 1;\n        }\n        var s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n    if (ta === 5) {\n      // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n      for (var _i = 0; _i < a.length; _i++) {\n        if (a[_i] < b[_i]) {\n          return -1;\n        }\n        if (a[_i] > b[_i]) {\n          return 1;\n        }\n      }\n      return 0;\n    }\n    if (ta === 8) {\n      // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n      return b ? -1 : 0;\n    }\n    if (ta === 10)\n      // null\n      return 0;\n    if (ta === 11)\n      // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13)\n      // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  }\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"minimongo_common.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/minimongo_common.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar LocalCollection_;\nmodule.link(\"./local_collection.js\", {\n  \"default\": function (v) {\n    LocalCollection_ = v;\n  }\n}, 0);\nvar Matcher;\nmodule.link(\"./matcher.js\", {\n  \"default\": function (v) {\n    Matcher = v;\n  }\n}, 1);\nvar Sorter;\nmodule.link(\"./sorter.js\", {\n  \"default\": function (v) {\n    Sorter = v;\n  }\n}, 2);\nLocalCollection = LocalCollection_;\nMinimongo = {\n  LocalCollection: LocalCollection_,\n  Matcher: Matcher,\n  Sorter: Sorter\n};\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"observe_handle.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/observe_handle.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({\n  \"default\": function () {\n    return ObserveHandle;\n  }\n});\nvar ObserveHandle = function () {\n  function ObserveHandle() {}\n  return ObserveHandle;\n}();\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"sorter.js\":function module(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/minimongo/sorter.js                                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 0);\nmodule.export({\n  \"default\": function () {\n    return Sorter;\n  }\n});\nvar ELEMENT_OPERATORS, equalityElementMatcher, expandArraysInBranches, hasOwn, isOperatorObject, makeLookupFunction, regexpElementMatcher;\nmodule.link(\"./common.js\", {\n  ELEMENT_OPERATORS: function (v) {\n    ELEMENT_OPERATORS = v;\n  },\n  equalityElementMatcher: function (v) {\n    equalityElementMatcher = v;\n  },\n  expandArraysInBranches: function (v) {\n    expandArraysInBranches = v;\n  },\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  isOperatorObject: function (v) {\n    isOperatorObject = v;\n  },\n  makeLookupFunction: function (v) {\n    makeLookupFunction = v;\n  },\n  regexpElementMatcher: function (v) {\n    regexpElementMatcher = v;\n  }\n}, 0);\nvar Sorter = /*#__PURE__*/function () {\n  function Sorter(spec) {\n    var _this = this;\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n    var addSpecPart = function (path, ascending) {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n      if (path.charAt(0) === '$') {\n        throw Error(\"unsupported sort key: \" + path);\n      }\n      _this._sortSpecParts.push({\n        ascending: ascending,\n        lookup: makeLookupFunction(path, {\n          forSort: true\n        }),\n        path: path\n      });\n    };\n    if (spec instanceof Array) {\n      spec.forEach(function (element) {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (_typeof(spec) === 'object') {\n      Object.keys(spec).forEach(function (key) {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(\"Bad sort specification: \" + JSON.stringify(spec));\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      var selector = {};\n      this._sortSpecParts.forEach(function (spec) {\n        selector[spec.path] = 1;\n      });\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n    this._keyComparator = composeComparators(this._sortSpecParts.map(function (spec, i) {\n      return _this._keyFieldComparator(i);\n    }));\n  }\n  var _proto = Sorter.prototype;\n  _proto.getComparator = function () {\n    function getComparator(options) {\n      // If sort is specified or have no distances, just use the comparator from\n      // the source specification (which defaults to \"everything is equal\".\n      // issue #3599\n      // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n      // sort effectively overrides $near\n      if (this._sortSpecParts.length || !options || !options.distances) {\n        return this._getBaseComparator();\n      }\n      var distances = options.distances;\n\n      // Return a comparator which compares using $near distances.\n      return function (a, b) {\n        if (!distances.has(a._id)) {\n          throw Error(\"Missing distance for \" + a._id);\n        }\n        if (!distances.has(b._id)) {\n          throw Error(\"Missing distance for \" + b._id);\n        }\n        return distances.get(a._id) - distances.get(b._id);\n      };\n    }\n    return getComparator;\n  }() // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  ;\n  _proto._compareKeys = function () {\n    function _compareKeys(key1, key2) {\n      if (key1.length !== this._sortSpecParts.length || key2.length !== this._sortSpecParts.length) {\n        throw Error('Key has wrong length');\n      }\n      return this._keyComparator(key1, key2);\n    }\n    return _compareKeys;\n  }() // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  ;\n  _proto._generateKeysFromDoc = function () {\n    function _generateKeysFromDoc(doc, cb) {\n      if (this._sortSpecParts.length === 0) {\n        throw new Error('can\\'t generate keys without a spec');\n      }\n      var pathFromIndices = function (indices) {\n        return indices.join(',') + \",\";\n      };\n      var knownPaths = null;\n\n      // maps index -> ({'' -> value} or {path -> value})\n      var valuesByIndexAndPath = this._sortSpecParts.map(function (spec) {\n        // Expand any leaf arrays that we find, and ignore those arrays\n        // themselves.  (We never sort based on an array itself.)\n        var branches = expandArraysInBranches(spec.lookup(doc), true);\n\n        // If there are no values for a key (eg, key goes to an empty array),\n        // pretend we found one undefined value.\n        if (!branches.length) {\n          branches = [{\n            value: void 0\n          }];\n        }\n        var element = Object.create(null);\n        var usedPaths = false;\n        branches.forEach(function (branch) {\n          if (!branch.arrayIndices) {\n            // If there are no array indices for a branch, then it must be the\n            // only branch, because the only thing that produces multiple branches\n            // is the use of arrays.\n            if (branches.length > 1) {\n              throw Error('multiple branches but no array used?');\n            }\n            element[''] = branch.value;\n            return;\n          }\n          usedPaths = true;\n          var path = pathFromIndices(branch.arrayIndices);\n          if (hasOwn.call(element, path)) {\n            throw Error(\"duplicate path: \" + path);\n          }\n          element[path] = branch.value;\n\n          // If two sort fields both go into arrays, they have to go into the\n          // exact same arrays and we have to find the same paths.  This is\n          // roughly the same condition that makes MongoDB throw this strange\n          // error message.  eg, the main thing is that if sort spec is {a: 1,\n          // b:1} then a and b cannot both be arrays.\n          //\n          // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n          // and 'a.x.y' are both arrays, but we don't allow this for now.\n          // #NestedArraySort\n          // XXX achieve full compatibility here\n          if (knownPaths && !hasOwn.call(knownPaths, path)) {\n            throw Error('cannot index parallel arrays');\n          }\n        });\n        if (knownPaths) {\n          // Similarly to above, paths must match everywhere, unless this is a\n          // non-array field.\n          if (!hasOwn.call(element, '') && Object.keys(knownPaths).length !== Object.keys(element).length) {\n            throw Error('cannot index parallel arrays!');\n          }\n        } else if (usedPaths) {\n          knownPaths = {};\n          Object.keys(element).forEach(function (path) {\n            knownPaths[path] = true;\n          });\n        }\n        return element;\n      });\n      if (!knownPaths) {\n        // Easy case: no use of arrays.\n        var soleKey = valuesByIndexAndPath.map(function (values) {\n          if (!hasOwn.call(values, '')) {\n            throw Error('no value in sole key case?');\n          }\n          return values[''];\n        });\n        cb(soleKey);\n        return;\n      }\n      Object.keys(knownPaths).forEach(function (path) {\n        var key = valuesByIndexAndPath.map(function (values) {\n          if (hasOwn.call(values, '')) {\n            return values[''];\n          }\n          if (!hasOwn.call(values, path)) {\n            throw Error('missing path?');\n          }\n          return values[path];\n        });\n        cb(key);\n      });\n    }\n    return _generateKeysFromDoc;\n  }() // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  ;\n  _proto._getBaseComparator = function () {\n    function _getBaseComparator() {\n      var _this2 = this;\n      if (this._sortFunction) {\n        return this._sortFunction;\n      }\n\n      // If we're only sorting on geoquery distance and no specs, just say\n      // everything is equal.\n      if (!this._sortSpecParts.length) {\n        return function (doc1, doc2) {\n          return 0;\n        };\n      }\n      return function (doc1, doc2) {\n        var key1 = _this2._getMinKeyFromDoc(doc1);\n        var key2 = _this2._getMinKeyFromDoc(doc2);\n        return _this2._compareKeys(key1, key2);\n      };\n    }\n    return _getBaseComparator;\n  }() // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  ;\n  _proto._getMinKeyFromDoc = function () {\n    function _getMinKeyFromDoc(doc) {\n      var _this3 = this;\n      var minKey = null;\n      this._generateKeysFromDoc(doc, function (key) {\n        if (minKey === null) {\n          minKey = key;\n          return;\n        }\n        if (_this3._compareKeys(key, minKey) < 0) {\n          minKey = key;\n        }\n      });\n      return minKey;\n    }\n    return _getMinKeyFromDoc;\n  }();\n  _proto._getPaths = function () {\n    function _getPaths() {\n      return this._sortSpecParts.map(function (part) {\n        return part.path;\n      });\n    }\n    return _getPaths;\n  }() // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  ;\n  _proto._keyFieldComparator = function () {\n    function _keyFieldComparator(i) {\n      var invert = !this._sortSpecParts[i].ascending;\n      return function (key1, key2) {\n        var compare = LocalCollection._f._cmp(key1[i], key2[i]);\n        return invert ? -compare : compare;\n      };\n    }\n    return _keyFieldComparator;\n  }();\n  return Sorter;\n}();\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return function (a, b) {\n    for (var i = 0; i < comparatorArray.length; ++i) {\n      var compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n    return 0;\n  };\n}\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/minimongo/minimongo_client.js\");\n\n/* Exports */\nPackage._define(\"minimongo\", exports, {\n  LocalCollection: LocalCollection,\n  Minimongo: Minimongo,\n  MinimongoTest: MinimongoTest,\n  MinimongoError: MinimongoError\n});\n\n})();\n","servePath":"/packages/minimongo.js","sourceMap":{"version":3,"sources":["packages/minimongo/minimongo_client.js","packages/minimongo/common.js","packages/minimongo/constants.js","packages/minimongo/cursor.js","packages/minimongo/local_collection.js","packages/minimongo/matcher.js","packages/minimongo/minimongo_common.js","packages/minimongo/observe_handle.js","packages/minimongo/sorter.js"],"names":["module","link","_toConsumableArray","default","v","_typeof","export","hasOwn","ELEMENT_OPERATORS","compileDocumentSelector","equalityElementMatcher","expandArraysInBranches","isIndexable","isNumericKey","isOperatorObject","makeLookupFunction","nothingMatcher","pathsToTree","populateDocumentWithQueryFields","projectionDetails","regexpElementMatcher","LocalCollection","Object","prototype","hasOwnProperty","$lt","makeInequality","cmpValue","$gt","$lte","$gte","$mod","compileElementSelector","operand","Array","isArray","length","Error","divisor","remainder","value","$in","elementMatchers","map","option","RegExp","undefined","some","matcher","$size","dontExpandLeafArrays","$type","dontIncludeLeafArrays","operandAliasMap","call","_f","_type","$bitsAllSet","mask","getOperandBitmask","bitmask","getValueBitmask","every","byte","i","$bitsAnySet","$bitsAllClear","$bitsAnyClear","$regex","valueSelector","regexp","$options","test","source","$elemMatch","_isPlainObject","isDocMatcher","keys","filter","key","LOGICAL_OPERATORS","reduce","a","b","_Object$assign","assign","subMatcher","inElemMatch","compileValueSelector","arrayElement","arg","dontIterate","result","$and","subSelector","andDocumentMatchers","compileArrayOfDocumentSelectors","$or","matchers","doc","fn","$nor","$where","selectorValue","_recordPathUsed","_hasWhere","Function","$comment","VALUE_OPERATORS","$eq","convertElementMatcherToBranchedMatcher","$not","invertBranchedMatcher","$ne","$nin","$exists","exists","everythingMatcher","$maxDistance","$near","$all","branchedMatchers","criterion","andBranchedMatchers","isRoot","_hasGeoQuery","maxDistance","point","distance","$geometry","type","GeoJSON","pointDistance","coordinates","pointToArray","geometryWithinRadius","distanceCoordinatePairs","branchedValues","branch","curDistance","_isUpdate","arrayIndices","andSomeMatchers","subMatchers","docOrBranches","match","subResult","selectors","docSelector","options","arguments","docMatchers","substr","_isSimple","lookUpByIndex","valueMatcher","Boolean","operatorBranchedMatcher","elementMatcher","branches","expanded","element","matched","pointA","pointB","Math","hypot","elementSelector","_equal","docOrBranchedValues","skipTheArrays","branchesOut","forEach","thisIsArray","push","concat","selector","Number","isInteger","Uint8Array","Int32Array","buffer","EJSON","isBinary","x","ArrayBuffer","max","apply","view","isSafeInteger","Uint32Array","BYTES_PER_ELEMENT","insertIntoDocument","document","existingKey","indexOf","branchedMatcher","branchValues","obj","s","inconsistentOK","theseAreOperators","selKey","thisIsOperator","JSON","stringify","cmpValueComparator","operandType","_cmp","parts","split","firstPart","lookupRest","slice","join","buildResult","firstLevel","appendToResult","more","forSort","arrayIndex","MinimongoTest","MinimongoError","message","field","error","name","operatorMatchers","operator","simpleRange","includes","simpleEquality","simpleInclusion","paths","newLeafFn","conflictFn","root","path","pathArray","tree","success","lastKey","y","populateDocumentWithKeyValue","getPrototypeOf","populateDocumentWithObject","unprefixedKeys","op","validateObject","object","query","_selectorIsId","fields","fieldsKeys","sort","_id","including","keyPath","rule","projectionRulesTree","node","fullPath","currentPath","anotherPath","toString","lastIndex","validateKeyInPath","getAsyncMethodName","ASYNC_COLLECTION_METHODS","ASYNC_CURSOR_METHODS","method","replace","_regeneratorRuntime","Cursor","_Symbol$iterator","_Symbol$asyncIterator","collection","sorter","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","hasGeoQuery","Sorter","skip","limit","projection","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","_proto","count","_depend","added","removed","_getRawObjects","ordered","fetch","_this","addedBefore","changed","movedBefore","index","objects","next","done","syncResult","Symbol","iterator","_callee","async","_callee$","_context","prev","abrupt","Promise","resolve","stop","callback","thisArg","_this2","getTransform","_this3","observe","_observeFromObserveChanges","observeChanges","_this4","_observeChangesCallbacksAreOrdered","_allow_unordered","distances","_IdMap","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","self","_this5","args","_observeQueue","queueTask","_suppress_initial","clone","handle","ObserveHandle","active","onInvalidate","drain","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","_this6","applySkipLimit","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","getComparator","_publishCursor","subscription","Package","mongo","Mongo","Collection","asyncIterator","asyncName","isCalledFromAsync","_len","_key","reject","_inheritsLoose","_objectSpread","Meteor","_SynchronousQueue","create","_savedOriginals","countDocuments","find","countAsync","estimatedDocumentCount","findOne","insert","assertHasValidFieldNames","_useOID","MongoID","ObjectID","Random","has","_saveOriginal","queriesToRecompute","_insertInResults","_recomputeResults","defer","pauseObservers","remove","equals","size","_eachPossiblyMatchingDoc","queryRemove","_loop","removeId","removeDoc","_removeFromResults","resumeObservers","_diffQueryChanges","retrieveOriginals","originals","saveOriginals","update","mod","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","memoizedCloneIfNeeded","docToMemoize","recomputeQids","updateCount","queryResult","_modifyAndNotify","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","specificIds","_this7","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResults","oldResults","_CachingChangeObserver","_this8","orderedFromCallbacks","callbacks","docs","OrderedDict","idStringify","applyChange","putBefore","moveBefore","DiffSequence","applyChanges","_IdMap2","idParse","IdMap","__wrappedTransform__","wrapped","transformed","nonreactive","_binarySearch","cmp","array","first","range","halfRange","floor","_checkSupportedProjection","_idProjection","details","ruleTree","subdoc","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","subIds","_insertInSortedList","splice","isReplace","isModifier","setOnInsert","modFunc","MODIFIERS","keypath","keyparts","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","observeCallbacks","suppressed","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","_fromObserve","nonMutatingCallbacks","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","Date","$inc","$min","$max","$mul","$rename","target2","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","$slice","sortFunction","$sort","_target$field","spliceArguments","$pushAll","$addToSet","isEach","values","toAdd","$pop","toPop","$pull","toPull","out","$pullAll","$bit","$v","invalidCharMsg","$","assertIsValidFieldName","usedArrayIndex","last","keypart","parseInt","Decimal","_Package$mongoDecima","DecimalStub","isUpdate","_paths","_matchingDocument","_selector","_docMatcher","_compileSelector","hasWhere","isSimple","_getPaths","keyOrderSensitive","_typeorder","t","ta","tb","oa","ob","toHexString","isNaN","getTime","minus","toNumber","toArray","LocalCollection_","spec","_sortSpecParts","_sortFunction","addSpecPart","ascending","charAt","lookup","affectedByModifier","_selectorForAffectedByModifier","_keyComparator","composeComparators","_keyFieldComparator","_getBaseComparator","_compareKeys","key1","key2","_generateKeysFromDoc","cb","pathFromIndices","knownPaths","valuesByIndexAndPath","usedPaths","soleKey","doc1","doc2","_getMinKeyFromDoc","minKey","part","invert","compare","comparatorArray"],"mappings":"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","file":"/packages/minimongo.js","sourcesContent":["import './minimongo_common.js';\n","import LocalCollection from './local_collection.js';\n\nexport const hasOwn = Object.prototype.hasOwnProperty;\n\n// Each element selector contains:\n//  - compileElementSelector, a function with args:\n//    - operand - the \"right hand side\" of the operator\n//    - valueSelector - the \"context\" for the operator (so that $regex can find\n//      $options)\n//    - matcher - the Matcher this is going into (so that $elemMatch can compile\n//      more things)\n//    returning a function mapping a single value to bool.\n//  - dontExpandLeafArrays, a bool which prevents expandArraysInBranches from\n//    being called\n//  - dontIncludeLeafArrays, a bool which causes an argument to be passed to\n//    expandArraysInBranches if it is called\nexport const ELEMENT_OPERATORS = {\n  $lt: makeInequality(cmpValue => cmpValue < 0),\n  $gt: makeInequality(cmpValue => cmpValue > 0),\n  $lte: makeInequality(cmpValue => cmpValue <= 0),\n  $gte: makeInequality(cmpValue => cmpValue >= 0),\n  $mod: {\n    compileElementSelector(operand) {\n      if (!(Array.isArray(operand) && operand.length === 2\n            && typeof operand[0] === 'number'\n            && typeof operand[1] === 'number')) {\n        throw Error('argument to $mod must be an array of two numbers');\n      }\n\n      // XXX could require to be ints or round or something\n      const divisor = operand[0];\n      const remainder = operand[1];\n      return value => (\n        typeof value === 'number' && value % divisor === remainder\n      );\n    },\n  },\n  $in: {\n    compileElementSelector(operand) {\n      if (!Array.isArray(operand)) {\n        throw Error('$in needs an array');\n      }\n\n      const elementMatchers = operand.map(option => {\n        if (option instanceof RegExp) {\n          return regexpElementMatcher(option);\n        }\n\n        if (isOperatorObject(option)) {\n          throw Error('cannot nest $ under $in');\n        }\n\n        return equalityElementMatcher(option);\n      });\n\n      return value => {\n        // Allow {a: {$in: [null]}} to match when 'a' does not exist.\n        if (value === undefined) {\n          value = null;\n        }\n\n        return elementMatchers.some(matcher => matcher(value));\n      };\n    },\n  },\n  $size: {\n    // {a: [[5, 5]]} must match {a: {$size: 1}} but not {a: {$size: 2}}, so we\n    // don't want to consider the element [5,5] in the leaf array [[5,5]] as a\n    // possible value.\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        // Don't ask me why, but by experimentation, this seems to be what Mongo\n        // does.\n        operand = 0;\n      } else if (typeof operand !== 'number') {\n        throw Error('$size needs a number');\n      }\n\n      return value => Array.isArray(value) && value.length === operand;\n    },\n  },\n  $type: {\n    // {a: [5]} must not match {a: {$type: 4}} (4 means array), but it should\n    // match {a: {$type: 1}} (1 means number), and {a: [[5]]} must match {$a:\n    // {$type: 4}}. Thus, when we see a leaf array, we *should* expand it but\n    // should *not* include it itself.\n    dontIncludeLeafArrays: true,\n    compileElementSelector(operand) {\n      if (typeof operand === 'string') {\n        const operandAliasMap = {\n          'double': 1,\n          'string': 2,\n          'object': 3,\n          'array': 4,\n          'binData': 5,\n          'undefined': 6,\n          'objectId': 7,\n          'bool': 8,\n          'date': 9,\n          'null': 10,\n          'regex': 11,\n          'dbPointer': 12,\n          'javascript': 13,\n          'symbol': 14,\n          'javascriptWithScope': 15,\n          'int': 16,\n          'timestamp': 17,\n          'long': 18,\n          'decimal': 19,\n          'minKey': -1,\n          'maxKey': 127,\n        };\n        if (!hasOwn.call(operandAliasMap, operand)) {\n          throw Error(`unknown string alias for $type: ${operand}`);\n        }\n        operand = operandAliasMap[operand];\n      } else if (typeof operand === 'number') {\n        if (operand === 0 || operand < -1\n          || (operand > 19 && operand !== 127)) {\n          throw Error(`Invalid numerical $type code: ${operand}`);\n        }\n      } else {\n        throw Error('argument to $type is not a number or a string');\n      }\n\n      return value => (\n        value !== undefined && LocalCollection._f._type(value) === operand\n      );\n    },\n  },\n  $bitsAllSet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllSet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => (bitmask[i] & byte) === byte);\n      };\n    },\n  },\n  $bitsAnySet: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnySet');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (~bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $bitsAllClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAllClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.every((byte, i) => !(bitmask[i] & byte));\n      };\n    },\n  },\n  $bitsAnyClear: {\n    compileElementSelector(operand) {\n      const mask = getOperandBitmask(operand, '$bitsAnyClear');\n      return value => {\n        const bitmask = getValueBitmask(value, mask.length);\n        return bitmask && mask.some((byte, i) => (bitmask[i] & byte) !== byte);\n      };\n    },\n  },\n  $regex: {\n    compileElementSelector(operand, valueSelector) {\n      if (!(typeof operand === 'string' || operand instanceof RegExp)) {\n        throw Error('$regex has to be a string or RegExp');\n      }\n\n      let regexp;\n      if (valueSelector.$options !== undefined) {\n        // Options passed in $options (even the empty string) always overrides\n        // options in the RegExp object itself.\n\n        // Be clear that we only support the JS-supported options, not extended\n        // ones (eg, Mongo supports x and s). Ideally we would implement x and s\n        // by transforming the regexp, but not today...\n        if (/[^gim]/.test(valueSelector.$options)) {\n          throw new Error('Only the i, m, and g regexp options are supported');\n        }\n\n        const source = operand instanceof RegExp ? operand.source : operand;\n        regexp = new RegExp(source, valueSelector.$options);\n      } else if (operand instanceof RegExp) {\n        regexp = operand;\n      } else {\n        regexp = new RegExp(operand);\n      }\n\n      return regexpElementMatcher(regexp);\n    },\n  },\n  $elemMatch: {\n    dontExpandLeafArrays: true,\n    compileElementSelector(operand, valueSelector, matcher) {\n      if (!LocalCollection._isPlainObject(operand)) {\n        throw Error('$elemMatch need an object');\n      }\n\n      const isDocMatcher = !isOperatorObject(\n        Object.keys(operand)\n          .filter(key => !hasOwn.call(LOGICAL_OPERATORS, key))\n          .reduce((a, b) => Object.assign(a, {[b]: operand[b]}), {}),\n        true);\n\n      let subMatcher;\n      if (isDocMatcher) {\n        // This is NOT the same as compileValueSelector(operand), and not just\n        // because of the slightly different calling convention.\n        // {$elemMatch: {x: 3}} means \"an element has a field x:3\", not\n        // \"consists only of a field x:3\". Also, regexps and sub-$ are allowed.\n        subMatcher =\n          compileDocumentSelector(operand, matcher, {inElemMatch: true});\n      } else {\n        subMatcher = compileValueSelector(operand, matcher);\n      }\n\n      return value => {\n        if (!Array.isArray(value)) {\n          return false;\n        }\n\n        for (let i = 0; i < value.length; ++i) {\n          const arrayElement = value[i];\n          let arg;\n          if (isDocMatcher) {\n            // We can only match {$elemMatch: {b: 3}} against objects.\n            // (We can also match against arrays, if there's numeric indices,\n            // eg {$elemMatch: {'0.b': 3}} or {$elemMatch: {0: 3}}.)\n            if (!isIndexable(arrayElement)) {\n              return false;\n            }\n\n            arg = arrayElement;\n          } else {\n            // dontIterate ensures that {a: {$elemMatch: {$gt: 5}}} matches\n            // {a: [8]} but not {a: [[8]]}\n            arg = [{value: arrayElement, dontIterate: true}];\n          }\n          // XXX support $near in $elemMatch by propagating $distance?\n          if (subMatcher(arg).result) {\n            return i; // specially understood to mean \"use as arrayIndices\"\n          }\n        }\n\n        return false;\n      };\n    },\n  },\n};\n\n// Operators that appear at the top level of a document selector.\nconst LOGICAL_OPERATORS = {\n  $and(subSelector, matcher, inElemMatch) {\n    return andDocumentMatchers(\n      compileArrayOfDocumentSelectors(subSelector, matcher, inElemMatch)\n    );\n  },\n\n  $or(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n\n    // Special case: if there is only one matcher, use it directly, *preserving*\n    // any arrayIndices it returns.\n    if (matchers.length === 1) {\n      return matchers[0];\n    }\n\n    return doc => {\n      const result = matchers.some(fn => fn(doc).result);\n      // $or does NOT set arrayIndices when it has multiple\n      // sub-expressions. (Tested against MongoDB.)\n      return {result};\n    };\n  },\n\n  $nor(subSelector, matcher, inElemMatch) {\n    const matchers = compileArrayOfDocumentSelectors(\n      subSelector,\n      matcher,\n      inElemMatch\n    );\n    return doc => {\n      const result = matchers.every(fn => !fn(doc).result);\n      // Never set arrayIndices, because we only match if nothing in particular\n      // 'matched' (and because this is consistent with MongoDB).\n      return {result};\n    };\n  },\n\n  $where(selectorValue, matcher) {\n    // Record that *any* path may be used.\n    matcher._recordPathUsed('');\n    matcher._hasWhere = true;\n\n    if (!(selectorValue instanceof Function)) {\n      // XXX MongoDB seems to have more complex logic to decide where or or not\n      // to add 'return'; not sure exactly what it is.\n      selectorValue = Function('obj', `return ${selectorValue}`);\n    }\n\n    // We make the document available as both `this` and `obj`.\n    // // XXX not sure what we should do if this throws\n    return doc => ({result: selectorValue.call(doc, doc)});\n  },\n\n  // This is just used as a comment in the query (in MongoDB, it also ends up in\n  // query logs); it has no effect on the actual selection.\n  $comment() {\n    return () => ({result: true});\n  },\n};\n\n// Operators that (unlike LOGICAL_OPERATORS) pertain to individual paths in a\n// document, but (unlike ELEMENT_OPERATORS) do not have a simple definition as\n// \"match each branched value independently and combine with\n// convertElementMatcherToBranchedMatcher\".\nconst VALUE_OPERATORS = {\n  $eq(operand) {\n    return convertElementMatcherToBranchedMatcher(\n      equalityElementMatcher(operand)\n    );\n  },\n  $not(operand, valueSelector, matcher) {\n    return invertBranchedMatcher(compileValueSelector(operand, matcher));\n  },\n  $ne(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(equalityElementMatcher(operand))\n    );\n  },\n  $nin(operand) {\n    return invertBranchedMatcher(\n      convertElementMatcherToBranchedMatcher(\n        ELEMENT_OPERATORS.$in.compileElementSelector(operand)\n      )\n    );\n  },\n  $exists(operand) {\n    const exists = convertElementMatcherToBranchedMatcher(\n      value => value !== undefined\n    );\n    return operand ? exists : invertBranchedMatcher(exists);\n  },\n  // $options just provides options for $regex; its logic is inside $regex\n  $options(operand, valueSelector) {\n    if (!hasOwn.call(valueSelector, '$regex')) {\n      throw Error('$options needs a $regex');\n    }\n\n    return everythingMatcher;\n  },\n  // $maxDistance is basically an argument to $near\n  $maxDistance(operand, valueSelector) {\n    if (!valueSelector.$near) {\n      throw Error('$maxDistance needs a $near');\n    }\n\n    return everythingMatcher;\n  },\n  $all(operand, valueSelector, matcher) {\n    if (!Array.isArray(operand)) {\n      throw Error('$all requires array');\n    }\n\n    // Not sure why, but this seems to be what MongoDB does.\n    if (operand.length === 0) {\n      return nothingMatcher;\n    }\n\n    const branchedMatchers = operand.map(criterion => {\n      // XXX handle $all/$elemMatch combination\n      if (isOperatorObject(criterion)) {\n        throw Error('no $ expressions in $all');\n      }\n\n      // This is always a regexp or equality selector.\n      return compileValueSelector(criterion, matcher);\n    });\n\n    // andBranchedMatchers does NOT require all selectors to return true on the\n    // SAME branch.\n    return andBranchedMatchers(branchedMatchers);\n  },\n  $near(operand, valueSelector, matcher, isRoot) {\n    if (!isRoot) {\n      throw Error('$near can\\'t be inside another $ operator');\n    }\n\n    matcher._hasGeoQuery = true;\n\n    // There are two kinds of geodata in MongoDB: legacy coordinate pairs and\n    // GeoJSON. They use different distance metrics, too. GeoJSON queries are\n    // marked with a $geometry property, though legacy coordinates can be\n    // matched using $geometry.\n    let maxDistance, point, distance;\n    if (LocalCollection._isPlainObject(operand) && hasOwn.call(operand, '$geometry')) {\n      // GeoJSON \"2dsphere\" mode.\n      maxDistance = operand.$maxDistance;\n      point = operand.$geometry;\n      distance = value => {\n        // XXX: for now, we don't calculate the actual distance between, say,\n        // polygon and circle. If people care about this use-case it will get\n        // a priority.\n        if (!value) {\n          return null;\n        }\n\n        if (!value.type) {\n          return GeoJSON.pointDistance(\n            point,\n            {type: 'Point', coordinates: pointToArray(value)}\n          );\n        }\n\n        if (value.type === 'Point') {\n          return GeoJSON.pointDistance(point, value);\n        }\n\n        return GeoJSON.geometryWithinRadius(value, point, maxDistance)\n          ? 0\n          : maxDistance + 1;\n      };\n    } else {\n      maxDistance = valueSelector.$maxDistance;\n\n      if (!isIndexable(operand)) {\n        throw Error('$near argument must be coordinate pair or GeoJSON');\n      }\n\n      point = pointToArray(operand);\n\n      distance = value => {\n        if (!isIndexable(value)) {\n          return null;\n        }\n\n        return distanceCoordinatePairs(point, value);\n      };\n    }\n\n    return branchedValues => {\n      // There might be multiple points in the document that match the given\n      // field. Only one of them needs to be within $maxDistance, but we need to\n      // evaluate all of them and use the nearest one for the implicit sort\n      // specifier. (That's why we can't just use ELEMENT_OPERATORS here.)\n      //\n      // Note: This differs from MongoDB's implementation, where a document will\n      // actually show up *multiple times* in the result set, with one entry for\n      // each within-$maxDistance branching point.\n      const result = {result: false};\n      expandArraysInBranches(branchedValues).every(branch => {\n        // if operation is an update, don't skip branches, just return the first\n        // one (#3599)\n        let curDistance;\n        if (!matcher._isUpdate) {\n          if (!(typeof branch.value === 'object')) {\n            return true;\n          }\n\n          curDistance = distance(branch.value);\n\n          // Skip branches that aren't real points or are too far away.\n          if (curDistance === null || curDistance > maxDistance) {\n            return true;\n          }\n\n          // Skip anything that's a tie.\n          if (result.distance !== undefined && result.distance <= curDistance) {\n            return true;\n          }\n        }\n\n        result.result = true;\n        result.distance = curDistance;\n\n        if (branch.arrayIndices) {\n          result.arrayIndices = branch.arrayIndices;\n        } else {\n          delete result.arrayIndices;\n        }\n\n        return !matcher._isUpdate;\n      });\n\n      return result;\n    };\n  },\n};\n\n// NB: We are cheating and using this function to implement 'AND' for both\n// 'document matchers' and 'branched matchers'. They both return result objects\n// but the argument is different: for the former it's a whole doc, whereas for\n// the latter it's an array of 'branched values'.\nfunction andSomeMatchers(subMatchers) {\n  if (subMatchers.length === 0) {\n    return everythingMatcher;\n  }\n\n  if (subMatchers.length === 1) {\n    return subMatchers[0];\n  }\n\n  return docOrBranches => {\n    const match = {};\n    match.result = subMatchers.every(fn => {\n      const subResult = fn(docOrBranches);\n\n      // Copy a 'distance' number out of the first sub-matcher that has\n      // one. Yes, this means that if there are multiple $near fields in a\n      // query, something arbitrary happens; this appears to be consistent with\n      // Mongo.\n      if (subResult.result &&\n          subResult.distance !== undefined &&\n          match.distance === undefined) {\n        match.distance = subResult.distance;\n      }\n\n      // Similarly, propagate arrayIndices from sub-matchers... but to match\n      // MongoDB behavior, this time the *last* sub-matcher with arrayIndices\n      // wins.\n      if (subResult.result && subResult.arrayIndices) {\n        match.arrayIndices = subResult.arrayIndices;\n      }\n\n      return subResult.result;\n    });\n\n    // If we didn't actually match, forget any extra metadata we came up with.\n    if (!match.result) {\n      delete match.distance;\n      delete match.arrayIndices;\n    }\n\n    return match;\n  };\n}\n\nconst andDocumentMatchers = andSomeMatchers;\nconst andBranchedMatchers = andSomeMatchers;\n\nfunction compileArrayOfDocumentSelectors(selectors, matcher, inElemMatch) {\n  if (!Array.isArray(selectors) || selectors.length === 0) {\n    throw Error('$and/$or/$nor must be nonempty array');\n  }\n\n  return selectors.map(subSelector => {\n    if (!LocalCollection._isPlainObject(subSelector)) {\n      throw Error('$or/$and/$nor entries need to be full objects');\n    }\n\n    return compileDocumentSelector(subSelector, matcher, {inElemMatch});\n  });\n}\n\n// Takes in a selector that could match a full document (eg, the original\n// selector). Returns a function mapping document->result object.\n//\n// matcher is the Matcher object we are compiling.\n//\n// If this is the root document selector (ie, not wrapped in $and or the like),\n// then isRoot is true. (This is used by $near.)\nexport function compileDocumentSelector(docSelector, matcher, options = {}) {\n  const docMatchers = Object.keys(docSelector).map(key => {\n    const subSelector = docSelector[key];\n\n    if (key.substr(0, 1) === '$') {\n      // Outer operators are either logical operators (they recurse back into\n      // this function), or $where.\n      if (!hasOwn.call(LOGICAL_OPERATORS, key)) {\n        throw new Error(`Unrecognized logical operator: ${key}`);\n      }\n\n      matcher._isSimple = false;\n      return LOGICAL_OPERATORS[key](subSelector, matcher, options.inElemMatch);\n    }\n\n    // Record this path, but only if we aren't in an elemMatcher, since in an\n    // elemMatch this is a path inside an object in an array, not in the doc\n    // root.\n    if (!options.inElemMatch) {\n      matcher._recordPathUsed(key);\n    }\n\n    // Don't add a matcher if subSelector is a function -- this is to match\n    // the behavior of Meteor on the server (inherited from the node mongodb\n    // driver), which is to ignore any part of a selector which is a function.\n    if (typeof subSelector === 'function') {\n      return undefined;\n    }\n\n    const lookUpByIndex = makeLookupFunction(key);\n    const valueMatcher = compileValueSelector(\n      subSelector,\n      matcher,\n      options.isRoot\n    );\n\n    return doc => valueMatcher(lookUpByIndex(doc));\n  }).filter(Boolean);\n\n  return andDocumentMatchers(docMatchers);\n}\n\n// Takes in a selector that could match a key-indexed value in a document; eg,\n// {$gt: 5, $lt: 9}, or a regular expression, or any non-expression object (to\n// indicate equality).  Returns a branched matcher: a function mapping\n// [branched value]->result object.\nfunction compileValueSelector(valueSelector, matcher, isRoot) {\n  if (valueSelector instanceof RegExp) {\n    matcher._isSimple = false;\n    return convertElementMatcherToBranchedMatcher(\n      regexpElementMatcher(valueSelector)\n    );\n  }\n\n  if (isOperatorObject(valueSelector)) {\n    return operatorBranchedMatcher(valueSelector, matcher, isRoot);\n  }\n\n  return convertElementMatcherToBranchedMatcher(\n    equalityElementMatcher(valueSelector)\n  );\n}\n\n// Given an element matcher (which evaluates a single value), returns a branched\n// value (which evaluates the element matcher on all the branches and returns a\n// more structured return value possibly including arrayIndices).\nfunction convertElementMatcherToBranchedMatcher(elementMatcher, options = {}) {\n  return branches => {\n    const expanded = options.dontExpandLeafArrays\n      ? branches\n      : expandArraysInBranches(branches, options.dontIncludeLeafArrays);\n\n    const match = {};\n    match.result = expanded.some(element => {\n      let matched = elementMatcher(element.value);\n\n      // Special case for $elemMatch: it means \"true, and use this as an array\n      // index if I didn't already have one\".\n      if (typeof matched === 'number') {\n        // XXX This code dates from when we only stored a single array index\n        // (for the outermost array). Should we be also including deeper array\n        // indices from the $elemMatch match?\n        if (!element.arrayIndices) {\n          element.arrayIndices = [matched];\n        }\n\n        matched = true;\n      }\n\n      // If some element matched, and it's tagged with array indices, include\n      // those indices in our result object.\n      if (matched && element.arrayIndices) {\n        match.arrayIndices = element.arrayIndices;\n      }\n\n      return matched;\n    });\n\n    return match;\n  };\n}\n\n// Helpers for $near.\nfunction distanceCoordinatePairs(a, b) {\n  const pointA = pointToArray(a);\n  const pointB = pointToArray(b);\n\n  return Math.hypot(pointA[0] - pointB[0], pointA[1] - pointB[1]);\n}\n\n// Takes something that is not an operator object and returns an element matcher\n// for equality with that thing.\nexport function equalityElementMatcher(elementSelector) {\n  if (isOperatorObject(elementSelector)) {\n    throw Error('Can\\'t create equalityValueSelector for operator object');\n  }\n\n  // Special-case: null and undefined are equal (if you got undefined in there\n  // somewhere, or if you got it due to some branch being non-existent in the\n  // weird special case), even though they aren't with EJSON.equals.\n  // undefined or null\n  if (elementSelector == null) {\n    return value => value == null;\n  }\n\n  return value => LocalCollection._f._equal(elementSelector, value);\n}\n\nfunction everythingMatcher(docOrBranchedValues) {\n  return {result: true};\n}\n\nexport function expandArraysInBranches(branches, skipTheArrays) {\n  const branchesOut = [];\n\n  branches.forEach(branch => {\n    const thisIsArray = Array.isArray(branch.value);\n\n    // We include the branch itself, *UNLESS* we it's an array that we're going\n    // to iterate and we're told to skip arrays.  (That's right, we include some\n    // arrays even skipTheArrays is true: these are arrays that were found via\n    // explicit numerical indices.)\n    if (!(skipTheArrays && thisIsArray && !branch.dontIterate)) {\n      branchesOut.push({arrayIndices: branch.arrayIndices, value: branch.value});\n    }\n\n    if (thisIsArray && !branch.dontIterate) {\n      branch.value.forEach((value, i) => {\n        branchesOut.push({\n          arrayIndices: (branch.arrayIndices || []).concat(i),\n          value\n        });\n      });\n    }\n  });\n\n  return branchesOut;\n}\n\n// Helpers for $bitsAllSet/$bitsAnySet/$bitsAllClear/$bitsAnyClear.\nfunction getOperandBitmask(operand, selector) {\n  // numeric bitmask\n  // You can provide a numeric bitmask to be matched against the operand field.\n  // It must be representable as a non-negative 32-bit signed integer.\n  // Otherwise, $bitsAllSet will return an error.\n  if (Number.isInteger(operand) && operand >= 0) {\n    return new Uint8Array(new Int32Array([operand]).buffer);\n  }\n\n  // bindata bitmask\n  // You can also use an arbitrarily large BinData instance as a bitmask.\n  if (EJSON.isBinary(operand)) {\n    return new Uint8Array(operand.buffer);\n  }\n\n  // position list\n  // If querying a list of bit positions, each <position> must be a non-negative\n  // integer. Bit positions start at 0 from the least significant bit.\n  if (Array.isArray(operand) &&\n      operand.every(x => Number.isInteger(x) && x >= 0)) {\n    const buffer = new ArrayBuffer((Math.max(...operand) >> 3) + 1);\n    const view = new Uint8Array(buffer);\n\n    operand.forEach(x => {\n      view[x >> 3] |= 1 << (x & 0x7);\n    });\n\n    return view;\n  }\n\n  // bad operand\n  throw Error(\n    `operand to ${selector} must be a numeric bitmask (representable as a ` +\n    'non-negative 32-bit signed integer), a bindata bitmask or an array with ' +\n    'bit positions (non-negative integers)'\n  );\n}\n\nfunction getValueBitmask(value, length) {\n  // The field value must be either numerical or a BinData instance. Otherwise,\n  // $bits... will not match the current document.\n\n  // numerical\n  if (Number.isSafeInteger(value)) {\n    // $bits... will not match numerical values that cannot be represented as a\n    // signed 64-bit integer. This can be the case if a value is either too\n    // large or small to fit in a signed 64-bit integer, or if it has a\n    // fractional component.\n    const buffer = new ArrayBuffer(\n      Math.max(length, 2 * Uint32Array.BYTES_PER_ELEMENT)\n    );\n\n    let view = new Uint32Array(buffer, 0, 2);\n    view[0] = value % ((1 << 16) * (1 << 16)) | 0;\n    view[1] = value / ((1 << 16) * (1 << 16)) | 0;\n\n    // sign extension\n    if (value < 0) {\n      view = new Uint8Array(buffer, 2);\n      view.forEach((byte, i) => {\n        view[i] = 0xff;\n      });\n    }\n\n    return new Uint8Array(buffer);\n  }\n\n  // bindata\n  if (EJSON.isBinary(value)) {\n    return new Uint8Array(value.buffer);\n  }\n\n  // no match\n  return false;\n}\n\n// Actually inserts a key value into the selector document\n// However, this checks there is no ambiguity in setting\n// the value for the given key, throws otherwise\nfunction insertIntoDocument(document, key, value) {\n  Object.keys(document).forEach(existingKey => {\n    if (\n      (existingKey.length > key.length && existingKey.indexOf(`${key}.`) === 0) ||\n      (key.length > existingKey.length && key.indexOf(`${existingKey}.`) === 0)\n    ) {\n      throw new Error(\n        `cannot infer query fields to set, both paths '${existingKey}' and ` +\n        `'${key}' are matched`\n      );\n    } else if (existingKey === key) {\n      throw new Error(\n        `cannot infer query fields to set, path '${key}' is matched twice`\n      );\n    }\n  });\n\n  document[key] = value;\n}\n\n// Returns a branched matcher that matches iff the given matcher does not.\n// Note that this implicitly \"deMorganizes\" the wrapped function.  ie, it\n// means that ALL branch values need to fail to match innerBranchedMatcher.\nfunction invertBranchedMatcher(branchedMatcher) {\n  return branchValues => {\n    // We explicitly choose to strip arrayIndices here: it doesn't make sense to\n    // say \"update the array element that does not match something\", at least\n    // in mongo-land.\n    return {result: !branchedMatcher(branchValues).result};\n  };\n}\n\nexport function isIndexable(obj) {\n  return Array.isArray(obj) || LocalCollection._isPlainObject(obj);\n}\n\nexport function isNumericKey(s) {\n  return /^[0-9]+$/.test(s);\n}\n\n// Returns true if this is an object with at least one key and all keys begin\n// with $.  Unless inconsistentOK is set, throws if some keys begin with $ and\n// others don't.\nexport function isOperatorObject(valueSelector, inconsistentOK) {\n  if (!LocalCollection._isPlainObject(valueSelector)) {\n    return false;\n  }\n\n  let theseAreOperators = undefined;\n  Object.keys(valueSelector).forEach(selKey => {\n    const thisIsOperator = selKey.substr(0, 1) === '$' || selKey === 'diff';\n\n    if (theseAreOperators === undefined) {\n      theseAreOperators = thisIsOperator;\n    } else if (theseAreOperators !== thisIsOperator) {\n      if (!inconsistentOK) {\n        throw new Error(\n          `Inconsistent operator: ${JSON.stringify(valueSelector)}`\n        );\n      }\n\n      theseAreOperators = false;\n    }\n  });\n\n  return !!theseAreOperators; // {} has no operators\n}\n\n// Helper for $lt/$gt/$lte/$gte.\nfunction makeInequality(cmpValueComparator) {\n  return {\n    compileElementSelector(operand) {\n      // Arrays never compare false with non-arrays for any inequality.\n      // XXX This was behavior we observed in pre-release MongoDB 2.5, but\n      //     it seems to have been reverted.\n      //     See https://jira.mongodb.org/browse/SERVER-11444\n      if (Array.isArray(operand)) {\n        return () => false;\n      }\n\n      // Special case: consider undefined and null the same (so true with\n      // $gte/$lte).\n      if (operand === undefined) {\n        operand = null;\n      }\n\n      const operandType = LocalCollection._f._type(operand);\n\n      return value => {\n        if (value === undefined) {\n          value = null;\n        }\n\n        // Comparisons are never true among things of different type (except\n        // null vs undefined).\n        if (LocalCollection._f._type(value) !== operandType) {\n          return false;\n        }\n\n        return cmpValueComparator(LocalCollection._f._cmp(value, operand));\n      };\n    },\n  };\n}\n\n// makeLookupFunction(key) returns a lookup function.\n//\n// A lookup function takes in a document and returns an array of matching\n// branches.  If no arrays are found while looking up the key, this array will\n// have exactly one branches (possibly 'undefined', if some segment of the key\n// was not found).\n//\n// If arrays are found in the middle, this can have more than one element, since\n// we 'branch'. When we 'branch', if there are more key segments to look up,\n// then we only pursue branches that are plain objects (not arrays or scalars).\n// This means we can actually end up with no branches!\n//\n// We do *NOT* branch on arrays that are found at the end (ie, at the last\n// dotted member of the key). We just return that array; if you want to\n// effectively 'branch' over the array's values, post-process the lookup\n// function with expandArraysInBranches.\n//\n// Each branch is an object with keys:\n//  - value: the value at the branch\n//  - dontIterate: an optional bool; if true, it means that 'value' is an array\n//    that expandArraysInBranches should NOT expand. This specifically happens\n//    when there is a numeric index in the key, and ensures the\n//    perhaps-surprising MongoDB behavior where {'a.0': 5} does NOT\n//    match {a: [[5]]}.\n//  - arrayIndices: if any array indexing was done during lookup (either due to\n//    explicit numeric indices or implicit branching), this will be an array of\n//    the array indices used, from outermost to innermost; it is falsey or\n//    absent if no array index is used. If an explicit numeric index is used,\n//    the index will be followed in arrayIndices by the string 'x'.\n//\n//    Note: arrayIndices is used for two purposes. First, it is used to\n//    implement the '$' modifier feature, which only ever looks at its first\n//    element.\n//\n//    Second, it is used for sort key generation, which needs to be able to tell\n//    the difference between different paths. Moreover, it needs to\n//    differentiate between explicit and implicit branching, which is why\n//    there's the somewhat hacky 'x' entry: this means that explicit and\n//    implicit array lookups will have different full arrayIndices paths. (That\n//    code only requires that different paths have different arrayIndices; it\n//    doesn't actually 'parse' arrayIndices. As an alternative, arrayIndices\n//    could contain objects with flags like 'implicit', but I think that only\n//    makes the code surrounding them more complex.)\n//\n//    (By the way, this field ends up getting passed around a lot without\n//    cloning, so never mutate any arrayIndices field/var in this package!)\n//\n//\n// At the top level, you may only pass in a plain object or array.\n//\n// See the test 'minimongo - lookup' for some examples of what lookup functions\n// return.\nexport function makeLookupFunction(key, options = {}) {\n  const parts = key.split('.');\n  const firstPart = parts.length ? parts[0] : '';\n  const lookupRest = (\n    parts.length > 1 &&\n    makeLookupFunction(parts.slice(1).join('.'), options)\n  );\n\n  function buildResult(arrayIndices, dontIterate, value) {\n    return arrayIndices && arrayIndices.length\n      ? dontIterate\n        ? [{ arrayIndices, dontIterate, value }]\n        : [{ arrayIndices, value }]\n      : dontIterate\n        ? [{ dontIterate, value }]\n        : [{ value }];\n  }\n\n  // Doc will always be a plain object or an array.\n  // apply an explicit numeric index, an array.\n  return (doc, arrayIndices) => {\n    if (Array.isArray(doc)) {\n      // If we're being asked to do an invalid lookup into an array (non-integer\n      // or out-of-bounds), return no results (which is different from returning\n      // a single undefined result, in that `null` equality checks won't match).\n      if (!(isNumericKey(firstPart) && firstPart < doc.length)) {\n        return [];\n      }\n\n      // Remember that we used this array index. Include an 'x' to indicate that\n      // the previous index came from being considered as an explicit array\n      // index (not branching).\n      arrayIndices = arrayIndices ? arrayIndices.concat(+firstPart, 'x') : [+firstPart, 'x'];\n    }\n\n    // Do our first lookup.\n    const firstLevel = doc[firstPart];\n\n    // If there is no deeper to dig, return what we found.\n    //\n    // If what we found is an array, most value selectors will choose to treat\n    // the elements of the array as matchable values in their own right, but\n    // that's done outside of the lookup function. (Exceptions to this are $size\n    // and stuff relating to $elemMatch.  eg, {a: {$size: 2}} does not match {a:\n    // [[1, 2]]}.)\n    //\n    // That said, if we just did an *explicit* array lookup (on doc) to find\n    // firstLevel, and firstLevel is an array too, we do NOT want value\n    // selectors to iterate over it.  eg, {'a.0': 5} does not match {a: [[5]]}.\n    // So in that case, we mark the return value as 'don't iterate'.\n    if (!lookupRest) {\n      return buildResult(\n        arrayIndices,\n        Array.isArray(doc) && Array.isArray(firstLevel),\n        firstLevel,\n      );\n    }\n\n    // We need to dig deeper.  But if we can't, because what we've found is not\n    // an array or plain object, we're done. If we just did a numeric index into\n    // an array, we return nothing here (this is a change in Mongo 2.5 from\n    // Mongo 2.4, where {'a.0.b': null} stopped matching {a: [5]}). Otherwise,\n    // return a single `undefined` (which can, for example, match via equality\n    // with `null`).\n    if (!isIndexable(firstLevel)) {\n      if (Array.isArray(doc)) {\n        return [];\n      }\n\n      return buildResult(arrayIndices, false, undefined);\n    }\n\n    const result = [];\n    const appendToResult = more => {\n      result.push(...more);\n    };\n\n    // Dig deeper: look up the rest of the parts on whatever we've found.\n    // (lookupRest is smart enough to not try to do invalid lookups into\n    // firstLevel if it's an array.)\n    appendToResult(lookupRest(firstLevel, arrayIndices));\n\n    // If we found an array, then in *addition* to potentially treating the next\n    // part as a literal integer lookup, we should also 'branch': try to look up\n    // the rest of the parts on each array element in parallel.\n    //\n    // In this case, we *only* dig deeper into array elements that are plain\n    // objects. (Recall that we only got this far if we have further to dig.)\n    // This makes sense: we certainly don't dig deeper into non-indexable\n    // objects. And it would be weird to dig into an array: it's simpler to have\n    // a rule that explicit integer indexes only apply to an outer array, not to\n    // an array you find after a branching search.\n    //\n    // In the special case of a numeric part in a *sort selector* (not a query\n    // selector), we skip the branching: we ONLY allow the numeric part to mean\n    // 'look up this index' in that case, not 'also look up this index in all\n    // the elements of the array'.\n    if (Array.isArray(firstLevel) &&\n        !(isNumericKey(parts[1]) && options.forSort)) {\n      firstLevel.forEach((branch, arrayIndex) => {\n        if (LocalCollection._isPlainObject(branch)) {\n          appendToResult(lookupRest(branch, arrayIndices ? arrayIndices.concat(arrayIndex) : [arrayIndex]));\n        }\n      });\n    }\n\n    return result;\n  };\n}\n\n// Object exported only for unit testing.\n// Use it to export private functions to test in Tinytest.\nMinimongoTest = {makeLookupFunction};\nMinimongoError = (message, options = {}) => {\n  if (typeof message === 'string' && options.field) {\n    message += ` for field '${options.field}'`;\n  }\n\n  const error = new Error(message);\n  error.name = 'MinimongoError';\n  return error;\n};\n\nexport function nothingMatcher(docOrBranchedValues) {\n  return {result: false};\n}\n\n// Takes an operator object (an object with $ keys) and returns a branched\n// matcher for it.\nfunction operatorBranchedMatcher(valueSelector, matcher, isRoot) {\n  // Each valueSelector works separately on the various branches.  So one\n  // operator can match one branch and another can match another branch.  This\n  // is OK.\n  const operatorMatchers = Object.keys(valueSelector).map(operator => {\n    const operand = valueSelector[operator];\n\n    const simpleRange = (\n      ['$lt', '$lte', '$gt', '$gte'].includes(operator) &&\n      typeof operand === 'number'\n    );\n\n    const simpleEquality = (\n      ['$ne', '$eq'].includes(operator) &&\n      operand !== Object(operand)\n    );\n\n    const simpleInclusion = (\n      ['$in', '$nin'].includes(operator)\n      && Array.isArray(operand)\n      && !operand.some(x => x === Object(x))\n    );\n\n    if (!(simpleRange || simpleInclusion || simpleEquality)) {\n      matcher._isSimple = false;\n    }\n\n    if (hasOwn.call(VALUE_OPERATORS, operator)) {\n      return VALUE_OPERATORS[operator](operand, valueSelector, matcher, isRoot);\n    }\n\n    if (hasOwn.call(ELEMENT_OPERATORS, operator)) {\n      const options = ELEMENT_OPERATORS[operator];\n      return convertElementMatcherToBranchedMatcher(\n        options.compileElementSelector(operand, valueSelector, matcher),\n        options\n      );\n    }\n\n    throw new Error(`Unrecognized operator: ${operator}`);\n  });\n\n  return andBranchedMatchers(operatorMatchers);\n}\n\n// paths - Array: list of mongo style paths\n// newLeafFn - Function: of form function(path) should return a scalar value to\n//                       put into list created for that path\n// conflictFn - Function: of form function(node, path, fullPath) is called\n//                        when building a tree path for 'fullPath' node on\n//                        'path' was already a leaf with a value. Must return a\n//                        conflict resolution.\n// initial tree - Optional Object: starting tree.\n// @returns - Object: tree represented as a set of nested objects\nexport function pathsToTree(paths, newLeafFn, conflictFn, root = {}) {\n  paths.forEach(path => {\n    const pathArray = path.split('.');\n    let tree = root;\n\n    // use .every just for iteration with break\n    const success = pathArray.slice(0, -1).every((key, i) => {\n      if (!hasOwn.call(tree, key)) {\n        tree[key] = {};\n      } else if (tree[key] !== Object(tree[key])) {\n        tree[key] = conflictFn(\n          tree[key],\n          pathArray.slice(0, i + 1).join('.'),\n          path\n        );\n\n        // break out of loop if we are failing for this path\n        if (tree[key] !== Object(tree[key])) {\n          return false;\n        }\n      }\n\n      tree = tree[key];\n\n      return true;\n    });\n\n    if (success) {\n      const lastKey = pathArray[pathArray.length - 1];\n      if (hasOwn.call(tree, lastKey)) {\n        tree[lastKey] = conflictFn(tree[lastKey], path, path);\n      } else {\n        tree[lastKey] = newLeafFn(path);\n      }\n    }\n  });\n\n  return root;\n}\n\n// Makes sure we get 2 elements array and assume the first one to be x and\n// the second one to y no matter what user passes.\n// In case user passes { lon: x, lat: y } returns [x, y]\nfunction pointToArray(point) {\n  return Array.isArray(point) ? point.slice() : [point.x, point.y];\n}\n\n// Creating a document from an upsert is quite tricky.\n// E.g. this selector: {\"$or\": [{\"b.foo\": {\"$all\": [\"bar\"]}}]}, should result\n// in: {\"b.foo\": \"bar\"}\n// But this selector: {\"$or\": [{\"b\": {\"foo\": {\"$all\": [\"bar\"]}}}]} should throw\n// an error\n\n// Some rules (found mainly with trial & error, so there might be more):\n// - handle all childs of $and (or implicit $and)\n// - handle $or nodes with exactly 1 child\n// - ignore $or nodes with more than 1 child\n// - ignore $nor and $not nodes\n// - throw when a value can not be set unambiguously\n// - every value for $all should be dealt with as separate $eq-s\n// - threat all children of $all as $eq setters (=> set if $all.length === 1,\n//   otherwise throw error)\n// - you can not mix '$'-prefixed keys and non-'$'-prefixed keys\n// - you can only have dotted keys on a root-level\n// - you can not have '$'-prefixed keys more than one-level deep in an object\n\n// Handles one key/value pair to put in the selector document\nfunction populateDocumentWithKeyValue(document, key, value) {\n  if (value && Object.getPrototypeOf(value) === Object.prototype) {\n    populateDocumentWithObject(document, key, value);\n  } else if (!(value instanceof RegExp)) {\n    insertIntoDocument(document, key, value);\n  }\n}\n\n// Handles a key, value pair to put in the selector document\n// if the value is an object\nfunction populateDocumentWithObject(document, key, value) {\n  const keys = Object.keys(value);\n  const unprefixedKeys = keys.filter(op => op[0] !== '$');\n\n  if (unprefixedKeys.length > 0 || !keys.length) {\n    // Literal (possibly empty) object ( or empty object )\n    // Don't allow mixing '$'-prefixed with non-'$'-prefixed fields\n    if (keys.length !== unprefixedKeys.length) {\n      throw new Error(`unknown operator: ${unprefixedKeys[0]}`);\n    }\n\n    validateObject(value, key);\n    insertIntoDocument(document, key, value);\n  } else {\n    Object.keys(value).forEach(op => {\n      const object = value[op];\n\n      if (op === '$eq') {\n        populateDocumentWithKeyValue(document, key, object);\n      } else if (op === '$all') {\n        // every value for $all should be dealt with as separate $eq-s\n        object.forEach(element =>\n          populateDocumentWithKeyValue(document, key, element)\n        );\n      }\n    });\n  }\n}\n\n// Fills a document with certain fields from an upsert selector\nexport function populateDocumentWithQueryFields(query, document = {}) {\n  if (Object.getPrototypeOf(query) === Object.prototype) {\n    // handle implicit $and\n    Object.keys(query).forEach(key => {\n      const value = query[key];\n\n      if (key === '$and') {\n        // handle explicit $and\n        value.forEach(element =>\n          populateDocumentWithQueryFields(element, document)\n        );\n      } else if (key === '$or') {\n        // handle $or nodes with exactly 1 child\n        if (value.length === 1) {\n          populateDocumentWithQueryFields(value[0], document);\n        }\n      } else if (key[0] !== '$') {\n        // Ignore other '$'-prefixed logical selectors\n        populateDocumentWithKeyValue(document, key, value);\n      }\n    });\n  } else {\n    // Handle meteor-specific shortcut for selecting _id\n    if (LocalCollection._selectorIsId(query)) {\n      insertIntoDocument(document, '_id', query);\n    }\n  }\n\n  return document;\n}\n\n// Traverses the keys of passed projection and constructs a tree where all\n// leaves are either all True or all False\n// @returns Object:\n//  - tree - Object - tree representation of keys involved in projection\n//  (exception for '_id' as it is a special case handled separately)\n//  - including - Boolean - \"take only certain fields\" type of projection\nexport function projectionDetails(fields) {\n  // Find the non-_id keys (_id is handled specially because it is included\n  // unless explicitly excluded). Sort the keys, so that our code to detect\n  // overlaps like 'foo' and 'foo.bar' can assume that 'foo' comes first.\n  let fieldsKeys = Object.keys(fields).sort();\n\n  // If _id is the only field in the projection, do not remove it, since it is\n  // required to determine if this is an exclusion or exclusion. Also keep an\n  // inclusive _id, since inclusive _id follows the normal rules about mixing\n  // inclusive and exclusive fields. If _id is not the only field in the\n  // projection and is exclusive, remove it so it can be handled later by a\n  // special case, since exclusive _id is always allowed.\n  if (!(fieldsKeys.length === 1 && fieldsKeys[0] === '_id') &&\n      !(fieldsKeys.includes('_id') && fields._id)) {\n    fieldsKeys = fieldsKeys.filter(key => key !== '_id');\n  }\n\n  let including = null; // Unknown\n\n  fieldsKeys.forEach(keyPath => {\n    const rule = !!fields[keyPath];\n\n    if (including === null) {\n      including = rule;\n    }\n\n    // This error message is copied from MongoDB shell\n    if (including !== rule) {\n      throw MinimongoError(\n        'You cannot currently mix including and excluding fields.'\n      );\n    }\n  });\n\n  const projectionRulesTree = pathsToTree(\n    fieldsKeys,\n    path => including,\n    (node, path, fullPath) => {\n      // Check passed projection fields' keys: If you have two rules such as\n      // 'foo.bar' and 'foo.bar.baz', then the result becomes ambiguous. If\n      // that happens, there is a probability you are doing something wrong,\n      // framework should notify you about such mistake earlier on cursor\n      // compilation step than later during runtime.  Note, that real mongo\n      // doesn't do anything about it and the later rule appears in projection\n      // project, more priority it takes.\n      //\n      // Example, assume following in mongo shell:\n      // > db.coll.insert({ a: { b: 23, c: 44 } })\n      // > db.coll.find({}, { 'a': 1, 'a.b': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23}}\n      // > db.coll.find({}, { 'a.b': 1, 'a': 1 })\n      // {\"_id\": ObjectId(\"520bfe456024608e8ef24af3\"), \"a\": {\"b\": 23, \"c\": 44}}\n      //\n      // Note, how second time the return set of keys is different.\n      const currentPath = fullPath;\n      const anotherPath = path;\n      throw MinimongoError(\n        `both ${currentPath} and ${anotherPath} found in fields option, ` +\n        'using both of them may trigger unexpected behavior. Did you mean to ' +\n        'use only one of them?'\n      );\n    });\n\n  return {including, tree: projectionRulesTree};\n}\n\n// Takes a RegExp object and returns an element matcher.\nexport function regexpElementMatcher(regexp) {\n  return value => {\n    if (value instanceof RegExp) {\n      return value.toString() === regexp.toString();\n    }\n\n    // Regexps only work against strings.\n    if (typeof value !== 'string') {\n      return false;\n    }\n\n    // Reset regexp's state to avoid inconsistent matching for objects with the\n    // same value on consecutive calls of regexp.test. This happens only if the\n    // regexp has the 'g' flag. Also note that ES6 introduces a new flag 'y' for\n    // which we should *not* change the lastIndex but MongoDB doesn't support\n    // either of these flags.\n    regexp.lastIndex = 0;\n\n    return regexp.test(value);\n  };\n}\n\n// Validates the key in a path.\n// Objects that are nested more then 1 level cannot have dotted fields\n// or fields starting with '$'\nfunction validateKeyInPath(key, path) {\n  if (key.includes('.')) {\n    throw new Error(\n      `The dotted field '${key}' in '${path}.${key} is not valid for storage.`\n    );\n  }\n\n  if (key[0] === '$') {\n    throw new Error(\n      `The dollar ($) prefixed field  '${path}.${key} is not valid for storage.`\n    );\n  }\n}\n\n// Recursively validates an object that is nested more than one level deep\nfunction validateObject(object, path) {\n  if (object && Object.getPrototypeOf(object) === Object.prototype) {\n    Object.keys(object).forEach(key => {\n      validateKeyInPath(key, path);\n      validateObject(object[key], path + '.' + key);\n    });\n  }\n}\n","/** Exported values are also used in the mongo package. */\n\n/** @param {string} method */\nexport function getAsyncMethodName(method) {\n  return `${method.replace('_', '')}Async`;\n}\n\nexport const ASYNC_COLLECTION_METHODS = [\n  '_createCappedCollection',\n  '_dropCollection',\n  '_dropIndex',\n  'createIndex',\n  'findOne',\n  'insert',\n  'remove',\n  'update',\n  'upsert',\n];\n\nexport const ASYNC_CURSOR_METHODS = ['count', 'fetch', 'forEach', 'map'];\n","import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\nimport { ASYNC_CURSOR_METHODS, getAsyncMethodName } from \"./constants\";\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @deprecated in 2.9\n   * @summary Returns the number of documents that match a query. This method is\n   *          [deprecated since MongoDB 4.0](https://www.mongodb.com/docs/v4.4/reference/command/count/);\n   *          see `Collection.countDocuments` and\n   *          `Collection.estimatedDocumentCount` for a replacement.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count() {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  [Symbol.asyncIterator]() {\n    const syncResult = this[Symbol.iterator]();\n    return {\n      async next() {\n        return Promise.resolve(syncResult.next());\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      query.results.forEach(doc => {\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(method => {\n  const asyncName = getAsyncMethodName(method);\n  Cursor.prototype[asyncName] = function(...args) {\n    try {\n      this[method].isCalledFromAsync = true;\n      return Promise.resolve(this[method].apply(this, args));\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n});\n","import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  countDocuments(selector, options) {\n    return this.find(selector ?? {}, options).countAsync();\n  }\n\n  estimatedDocumentCount(options) {\n    return this.find({}, options).countAsync();\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return doc != null ? result : doc;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  const handle = cursor.observeChanges(changeObserver.applyChange,\n    { nonMutatingCallbacks: true });\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $mul modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n","import LocalCollection from './local_collection.js';\nimport {\n  compileDocumentSelector,\n  hasOwn,\n  nothingMatcher,\n} from './common.js';\n\nconst Decimal = Package['mongo-decimal']?.Decimal || class DecimalStub {}\n\n// The minimongo selector compiler!\n\n// Terminology:\n//  - a 'selector' is the EJSON object representing a selector\n//  - a 'matcher' is its compiled form (whether a full Minimongo.Matcher\n//    object or one of the component lambdas that matches parts of it)\n//  - a 'result object' is an object with a 'result' field and maybe\n//    distance and arrayIndices.\n//  - a 'branched value' is an object with a 'value' field and maybe\n//    'dontIterate' and 'arrayIndices'.\n//  - a 'document' is a top-level object that can be stored in a collection.\n//  - a 'lookup function' is a function that takes in a document and returns\n//    an array of 'branched values'.\n//  - a 'branched matcher' maps from an array of branched values to a result\n//    object.\n//  - an 'element matcher' maps from a single value to a bool.\n\n// Main entry point.\n//   var matcher = new Minimongo.Matcher({a: {$gt: 5}});\n//   if (matcher.documentMatches({a: 7})) ...\nexport default class Matcher {\n  constructor(selector, isUpdate) {\n    // A set (object mapping string -> *) of all of the document paths looked\n    // at by the selector. Also includes the empty string if it may look at any\n    // path (eg, $where).\n    this._paths = {};\n    // Set to true if compilation finds a $near.\n    this._hasGeoQuery = false;\n    // Set to true if compilation finds a $where.\n    this._hasWhere = false;\n    // Set to false if compilation finds anything other than a simple equality\n    // or one or more of '$gt', '$gte', '$lt', '$lte', '$ne', '$in', '$nin' used\n    // with scalars as operands.\n    this._isSimple = true;\n    // Set to a dummy document which always matches this Matcher. Or set to null\n    // if such document is too hard to find.\n    this._matchingDocument = undefined;\n    // A clone of the original selector. It may just be a function if the user\n    // passed in a function; otherwise is definitely an object (eg, IDs are\n    // translated into {_id: ID} first. Used by canBecomeTrueByModifier and\n    // Sorter._useWithMatcher.\n    this._selector = null;\n    this._docMatcher = this._compileSelector(selector);\n    // Set to true if selection is done for an update operation\n    // Default is false\n    // Used for $near array update (issue #3599)\n    this._isUpdate = isUpdate;\n  }\n\n  documentMatches(doc) {\n    if (doc !== Object(doc)) {\n      throw Error('documentMatches needs a document');\n    }\n\n    return this._docMatcher(doc);\n  }\n\n  hasGeoQuery() {\n    return this._hasGeoQuery;\n  }\n\n  hasWhere() {\n    return this._hasWhere;\n  }\n\n  isSimple() {\n    return this._isSimple;\n  }\n\n  // Given a selector, return a function that takes one argument, a\n  // document. It returns a result object.\n  _compileSelector(selector) {\n    // you can pass a literal function instead of a selector\n    if (selector instanceof Function) {\n      this._isSimple = false;\n      this._selector = selector;\n      this._recordPathUsed('');\n\n      return doc => ({result: !!selector.call(doc)});\n    }\n\n    // shorthand -- scalar _id\n    if (LocalCollection._selectorIsId(selector)) {\n      this._selector = {_id: selector};\n      this._recordPathUsed('_id');\n\n      return doc => ({result: EJSON.equals(doc._id, selector)});\n    }\n\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for\n    // destructive operations.\n    if (!selector || hasOwn.call(selector, '_id') && !selector._id) {\n      this._isSimple = false;\n      return nothingMatcher;\n    }\n\n    // Top level can't be an array or true or binary.\n    if (Array.isArray(selector) ||\n        EJSON.isBinary(selector) ||\n        typeof selector === 'boolean') {\n      throw new Error(`Invalid selector: ${selector}`);\n    }\n\n    this._selector = EJSON.clone(selector);\n\n    return compileDocumentSelector(selector, this, {isRoot: true});\n  }\n\n  // Returns a list of key paths the given selector is looking for. It includes\n  // the empty string if there is a $where.\n  _getPaths() {\n    return Object.keys(this._paths);\n  }\n\n  _recordPathUsed(path) {\n    this._paths[path] = true;\n  }\n}\n\n// helpers used by compiled selector code\nLocalCollection._f = {\n  // XXX for _all and _in, consider building 'inquery' at compile time..\n  _type(v) {\n    if (typeof v === 'number') {\n      return 1;\n    }\n\n    if (typeof v === 'string') {\n      return 2;\n    }\n\n    if (typeof v === 'boolean') {\n      return 8;\n    }\n\n    if (Array.isArray(v)) {\n      return 4;\n    }\n\n    if (v === null) {\n      return 10;\n    }\n\n    // note that typeof(/x/) === \"object\"\n    if (v instanceof RegExp) {\n      return 11;\n    }\n\n    if (typeof v === 'function') {\n      return 13;\n    }\n\n    if (v instanceof Date) {\n      return 9;\n    }\n\n    if (EJSON.isBinary(v)) {\n      return 5;\n    }\n\n    if (v instanceof MongoID.ObjectID) {\n      return 7;\n    }\n\n    if (v instanceof Decimal) {\n      return 1;\n    }\n\n    // object\n    return 3;\n\n    // XXX support some/all of these:\n    // 14, symbol\n    // 15, javascript code with scope\n    // 16, 18: 32-bit/64-bit integer\n    // 17, timestamp\n    // 255, minkey\n    // 127, maxkey\n  },\n\n  // deep equality test: use for literal document and array matches\n  _equal(a, b) {\n    return EJSON.equals(a, b, {keyOrderSensitive: true});\n  },\n\n  // maps a type code to a value that can be used to sort values of different\n  // types\n  _typeorder(t) {\n    // http://www.mongodb.org/display/DOCS/What+is+the+Compare+Order+for+BSON+Types\n    // XXX what is the correct sort position for Javascript code?\n    // ('100' in the matrix below)\n    // XXX minkey/maxkey\n    return [\n      -1,  // (not a type)\n      1,   // number\n      2,   // string\n      3,   // object\n      4,   // array\n      5,   // binary\n      -1,  // deprecated\n      6,   // ObjectID\n      7,   // bool\n      8,   // Date\n      0,   // null\n      9,   // RegExp\n      -1,  // deprecated\n      100, // JS code\n      2,   // deprecated (symbol)\n      100, // JS code\n      1,   // 32-bit int\n      8,   // Mongo timestamp\n      1    // 64-bit int\n    ][t];\n  },\n\n  // compare two values of unknown type according to BSON ordering\n  // semantics. (as an extension, consider 'undefined' to be less than\n  // any other value.) return negative if a is less, positive if b is\n  // less, or 0 if equal\n  _cmp(a, b) {\n    if (a === undefined) {\n      return b === undefined ? 0 : -1;\n    }\n\n    if (b === undefined) {\n      return 1;\n    }\n\n    let ta = LocalCollection._f._type(a);\n    let tb = LocalCollection._f._type(b);\n\n    const oa = LocalCollection._f._typeorder(ta);\n    const ob = LocalCollection._f._typeorder(tb);\n\n    if (oa !== ob) {\n      return oa < ob ? -1 : 1;\n    }\n\n    // XXX need to implement this if we implement Symbol or integers, or\n    // Timestamp\n    if (ta !== tb) {\n      throw Error('Missing type coercion logic in _cmp');\n    }\n\n    if (ta === 7) { // ObjectID\n      // Convert to string.\n      ta = tb = 2;\n      a = a.toHexString();\n      b = b.toHexString();\n    }\n\n    if (ta === 9) { // Date\n      // Convert to millis.\n      ta = tb = 1;\n      a = isNaN(a) ? 0 : a.getTime();\n      b = isNaN(b) ? 0 : b.getTime();\n    }\n\n    if (ta === 1) { // double\n      if (a instanceof Decimal) {\n        return a.minus(b).toNumber();\n      } else {\n        return a - b;\n      }\n    }\n\n    if (tb === 2) // string\n      return a < b ? -1 : a === b ? 0 : 1;\n\n    if (ta === 3) { // Object\n      // this could be much more efficient in the expected case ...\n      const toArray = object => {\n        const result = [];\n\n        Object.keys(object).forEach(key => {\n          result.push(key, object[key]);\n        });\n\n        return result;\n      };\n\n      return LocalCollection._f._cmp(toArray(a), toArray(b));\n    }\n\n    if (ta === 4) { // Array\n      for (let i = 0; ; i++) {\n        if (i === a.length) {\n          return i === b.length ? 0 : -1;\n        }\n\n        if (i === b.length) {\n          return 1;\n        }\n\n        const s = LocalCollection._f._cmp(a[i], b[i]);\n        if (s !== 0) {\n          return s;\n        }\n      }\n    }\n\n    if (ta === 5) { // binary\n      // Surprisingly, a small binary blob is always less than a large one in\n      // Mongo.\n      if (a.length !== b.length) {\n        return a.length - b.length;\n      }\n\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] < b[i]) {\n          return -1;\n        }\n\n        if (a[i] > b[i]) {\n          return 1;\n        }\n      }\n\n      return 0;\n    }\n\n    if (ta === 8) { // boolean\n      if (a) {\n        return b ? 0 : 1;\n      }\n\n      return b ? -1 : 0;\n    }\n\n    if (ta === 10) // null\n      return 0;\n\n    if (ta === 11) // regexp\n      throw Error('Sorting not supported on regular expression'); // XXX\n\n    // 13: javascript code\n    // 14: symbol\n    // 15: javascript code with scope\n    // 16: 32-bit integer\n    // 17: timestamp\n    // 18: 64-bit integer\n    // 255: minkey\n    // 127: maxkey\n    if (ta === 13) // javascript code\n      throw Error('Sorting not supported on Javascript code'); // XXX\n\n    throw Error('Unknown type to sort');\n  },\n};\n","import LocalCollection_ from './local_collection.js';\nimport Matcher from './matcher.js';\nimport Sorter from './sorter.js';\n\nLocalCollection = LocalCollection_;\nMinimongo = {\n    LocalCollection: LocalCollection_,\n    Matcher,\n    Sorter\n};\n","// ObserveHandle: the return value of a live query.\nexport default class ObserveHandle {}\n","import {\n  ELEMENT_OPERATORS,\n  equalityElementMatcher,\n  expandArraysInBranches,\n  hasOwn,\n  isOperatorObject,\n  makeLookupFunction,\n  regexpElementMatcher,\n} from './common.js';\n\n// Give a sort spec, which can be in any of these forms:\n//   {\"key1\": 1, \"key2\": -1}\n//   [[\"key1\", \"asc\"], [\"key2\", \"desc\"]]\n//   [\"key1\", [\"key2\", \"desc\"]]\n//\n// (.. with the first form being dependent on the key enumeration\n// behavior of your javascript VM, which usually does what you mean in\n// this case if the key names don't look like integers ..)\n//\n// return a function that takes two objects, and returns -1 if the\n// first object comes first in order, 1 if the second object comes\n// first, or 0 if neither object comes before the other.\n\nexport default class Sorter {\n  constructor(spec) {\n    this._sortSpecParts = [];\n    this._sortFunction = null;\n\n    const addSpecPart = (path, ascending) => {\n      if (!path) {\n        throw Error('sort keys must be non-empty');\n      }\n\n      if (path.charAt(0) === '$') {\n        throw Error(`unsupported sort key: ${path}`);\n      }\n\n      this._sortSpecParts.push({\n        ascending,\n        lookup: makeLookupFunction(path, {forSort: true}),\n        path\n      });\n    };\n\n    if (spec instanceof Array) {\n      spec.forEach(element => {\n        if (typeof element === 'string') {\n          addSpecPart(element, true);\n        } else {\n          addSpecPart(element[0], element[1] !== 'desc');\n        }\n      });\n    } else if (typeof spec === 'object') {\n      Object.keys(spec).forEach(key => {\n        addSpecPart(key, spec[key] >= 0);\n      });\n    } else if (typeof spec === 'function') {\n      this._sortFunction = spec;\n    } else {\n      throw Error(`Bad sort specification: ${JSON.stringify(spec)}`);\n    }\n\n    // If a function is specified for sorting, we skip the rest.\n    if (this._sortFunction) {\n      return;\n    }\n\n    // To implement affectedByModifier, we piggy-back on top of Matcher's\n    // affectedByModifier code; we create a selector that is affected by the\n    // same modifiers as this sort order. This is only implemented on the\n    // server.\n    if (this.affectedByModifier) {\n      const selector = {};\n\n      this._sortSpecParts.forEach(spec => {\n        selector[spec.path] = 1;\n      });\n\n      this._selectorForAffectedByModifier = new Minimongo.Matcher(selector);\n    }\n\n    this._keyComparator = composeComparators(\n      this._sortSpecParts.map((spec, i) => this._keyFieldComparator(i))\n    );\n  }\n\n  getComparator(options) {\n    // If sort is specified or have no distances, just use the comparator from\n    // the source specification (which defaults to \"everything is equal\".\n    // issue #3599\n    // https://docs.mongodb.com/manual/reference/operator/query/near/#sort-operation\n    // sort effectively overrides $near\n    if (this._sortSpecParts.length || !options || !options.distances) {\n      return this._getBaseComparator();\n    }\n\n    const distances = options.distances;\n\n    // Return a comparator which compares using $near distances.\n    return (a, b) => {\n      if (!distances.has(a._id)) {\n        throw Error(`Missing distance for ${a._id}`);\n      }\n\n      if (!distances.has(b._id)) {\n        throw Error(`Missing distance for ${b._id}`);\n      }\n\n      return distances.get(a._id) - distances.get(b._id);\n    };\n  }\n\n  // Takes in two keys: arrays whose lengths match the number of spec\n  // parts. Returns negative, 0, or positive based on using the sort spec to\n  // compare fields.\n  _compareKeys(key1, key2) {\n    if (key1.length !== this._sortSpecParts.length ||\n        key2.length !== this._sortSpecParts.length) {\n      throw Error('Key has wrong length');\n    }\n\n    return this._keyComparator(key1, key2);\n  }\n\n  // Iterates over each possible \"key\" from doc (ie, over each branch), calling\n  // 'cb' with the key.\n  _generateKeysFromDoc(doc, cb) {\n    if (this._sortSpecParts.length === 0) {\n      throw new Error('can\\'t generate keys without a spec');\n    }\n\n    const pathFromIndices = indices => `${indices.join(',')},`;\n\n    let knownPaths = null;\n\n    // maps index -> ({'' -> value} or {path -> value})\n    const valuesByIndexAndPath = this._sortSpecParts.map(spec => {\n      // Expand any leaf arrays that we find, and ignore those arrays\n      // themselves.  (We never sort based on an array itself.)\n      let branches = expandArraysInBranches(spec.lookup(doc), true);\n\n      // If there are no values for a key (eg, key goes to an empty array),\n      // pretend we found one undefined value.\n      if (!branches.length) {\n        branches = [{ value: void 0 }];\n      }\n\n      const element = Object.create(null);\n      let usedPaths = false;\n\n      branches.forEach(branch => {\n        if (!branch.arrayIndices) {\n          // If there are no array indices for a branch, then it must be the\n          // only branch, because the only thing that produces multiple branches\n          // is the use of arrays.\n          if (branches.length > 1) {\n            throw Error('multiple branches but no array used?');\n          }\n\n          element[''] = branch.value;\n          return;\n        }\n\n        usedPaths = true;\n\n        const path = pathFromIndices(branch.arrayIndices);\n\n        if (hasOwn.call(element, path)) {\n          throw Error(`duplicate path: ${path}`);\n        }\n\n        element[path] = branch.value;\n\n        // If two sort fields both go into arrays, they have to go into the\n        // exact same arrays and we have to find the same paths.  This is\n        // roughly the same condition that makes MongoDB throw this strange\n        // error message.  eg, the main thing is that if sort spec is {a: 1,\n        // b:1} then a and b cannot both be arrays.\n        //\n        // (In MongoDB it seems to be OK to have {a: 1, 'a.x.y': 1} where 'a'\n        // and 'a.x.y' are both arrays, but we don't allow this for now.\n        // #NestedArraySort\n        // XXX achieve full compatibility here\n        if (knownPaths && !hasOwn.call(knownPaths, path)) {\n          throw Error('cannot index parallel arrays');\n        }\n      });\n\n      if (knownPaths) {\n        // Similarly to above, paths must match everywhere, unless this is a\n        // non-array field.\n        if (!hasOwn.call(element, '') &&\n            Object.keys(knownPaths).length !== Object.keys(element).length) {\n          throw Error('cannot index parallel arrays!');\n        }\n      } else if (usedPaths) {\n        knownPaths = {};\n\n        Object.keys(element).forEach(path => {\n          knownPaths[path] = true;\n        });\n      }\n\n      return element;\n    });\n\n    if (!knownPaths) {\n      // Easy case: no use of arrays.\n      const soleKey = valuesByIndexAndPath.map(values => {\n        if (!hasOwn.call(values, '')) {\n          throw Error('no value in sole key case?');\n        }\n\n        return values[''];\n      });\n\n      cb(soleKey);\n\n      return;\n    }\n\n    Object.keys(knownPaths).forEach(path => {\n      const key = valuesByIndexAndPath.map(values => {\n        if (hasOwn.call(values, '')) {\n          return values[''];\n        }\n\n        if (!hasOwn.call(values, path)) {\n          throw Error('missing path?');\n        }\n\n        return values[path];\n      });\n\n      cb(key);\n    });\n  }\n\n  // Returns a comparator that represents the sort specification (but not\n  // including a possible geoquery distance tie-breaker).\n  _getBaseComparator() {\n    if (this._sortFunction) {\n      return this._sortFunction;\n    }\n\n    // If we're only sorting on geoquery distance and no specs, just say\n    // everything is equal.\n    if (!this._sortSpecParts.length) {\n      return (doc1, doc2) => 0;\n    }\n\n    return (doc1, doc2) => {\n      const key1 = this._getMinKeyFromDoc(doc1);\n      const key2 = this._getMinKeyFromDoc(doc2);\n      return this._compareKeys(key1, key2);\n    };\n  }\n\n  // Finds the minimum key from the doc, according to the sort specs.  (We say\n  // \"minimum\" here but this is with respect to the sort spec, so \"descending\"\n  // sort fields mean we're finding the max for that field.)\n  //\n  // Note that this is NOT \"find the minimum value of the first field, the\n  // minimum value of the second field, etc\"... it's \"choose the\n  // lexicographically minimum value of the key vector, allowing only keys which\n  // you can find along the same paths\".  ie, for a doc {a: [{x: 0, y: 5}, {x:\n  // 1, y: 3}]} with sort spec {'a.x': 1, 'a.y': 1}, the only keys are [0,5] and\n  // [1,3], and the minimum key is [0,5]; notably, [0,3] is NOT a key.\n  _getMinKeyFromDoc(doc) {\n    let minKey = null;\n\n    this._generateKeysFromDoc(doc, key => {\n      if (minKey === null) {\n        minKey = key;\n        return;\n      }\n\n      if (this._compareKeys(key, minKey) < 0) {\n        minKey = key;\n      }\n    });\n\n    return minKey;\n  }\n\n  _getPaths() {\n    return this._sortSpecParts.map(part => part.path);\n  }\n\n  // Given an index 'i', returns a comparator that compares two key arrays based\n  // on field 'i'.\n  _keyFieldComparator(i) {\n    const invert = !this._sortSpecParts[i].ascending;\n\n    return (key1, key2) => {\n      const compare = LocalCollection._f._cmp(key1[i], key2[i]);\n      return invert ? -compare : compare;\n    };\n  }\n}\n\n// Given an array of comparators\n// (functions (a,b)->(negative or positive or zero)), returns a single\n// comparator which uses each comparator in order and returns the first\n// non-zero value.\nfunction composeComparators(comparatorArray) {\n  return (a, b) => {\n    for (let i = 0; i < comparatorArray.length; ++i) {\n      const compare = comparatorArray[i](a, b);\n      if (compare !== 0) {\n        return compare;\n      }\n    }\n\n    return 0;\n  };\n}\n"]}}]