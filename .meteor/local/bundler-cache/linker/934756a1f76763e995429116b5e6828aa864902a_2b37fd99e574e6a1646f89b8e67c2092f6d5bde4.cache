[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Formatter, Log;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"logging\":{\"logging.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/logging/logging.js                                                                                    //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  Log: () => Log\n});\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 0);\nconst hasOwn = Object.prototype.hasOwnProperty;\nfunction Log() {\n  Log.info(...arguments);\n}\n\n/// FOR TESTING\nlet intercept = 0;\nlet interceptedLines = [];\nlet suppress = 0;\n\n// Intercept the next 'count' calls to a Log function. The actual\n// lines printed to the console can be cleared and read by calling\n// Log._intercepted().\nLog._intercept = count => {\n  intercept += count;\n};\n\n// Suppress the next 'count' calls to a Log function. Use this to stop\n// tests from spamming the console, especially with red errors that\n// might look like a failing test.\nLog._suppress = count => {\n  suppress += count;\n};\n\n// Returns intercepted lines and resets the intercept counter.\nLog._intercepted = () => {\n  const lines = interceptedLines;\n  interceptedLines = [];\n  intercept = 0;\n  return lines;\n};\n\n// Either 'json' or 'colored-text'.\n//\n// When this is set to 'json', print JSON documents that are parsed by another\n// process ('satellite' or 'meteor run'). This other process should call\n// 'Log.format' for nice output.\n//\n// When this is set to 'colored-text', call 'Log.format' before printing.\n// This should be used for logging from within satellite, since there is no\n// other process that will be reading its standard output.\nLog.outputFormat = 'json';\nconst LEVEL_COLORS = {\n  debug: 'green',\n  // leave info as the default color\n  warn: 'magenta',\n  error: 'red'\n};\nconst META_COLOR = 'blue';\n\n// Default colors cause readability problems on Windows Powershell,\n// switch to bright variants. While still capable of millions of\n// operations per second, the benchmark showed a 25%+ increase in\n// ops per second (on Node 8) by caching \"process.platform\".\nconst isWin32 = typeof process === 'object' && process.platform === 'win32';\nconst platformColor = color => {\n  if (isWin32 && typeof color === 'string' && !color.endsWith('Bright')) {\n    return \"\".concat(color, \"Bright\");\n  }\n  return color;\n};\n\n// XXX package\nconst RESTRICTED_KEYS = ['time', 'timeInexact', 'level', 'file', 'line', 'program', 'originApp', 'satellite', 'stderr'];\nconst FORMATTED_KEYS = [...RESTRICTED_KEYS, 'app', 'message'];\nconst logInBrowser = obj => {\n  const str = Log.format(obj);\n\n  // XXX Some levels should be probably be sent to the server\n  const level = obj.level;\n  if (typeof console !== 'undefined' && console[level]) {\n    console[level](str);\n  } else {\n    // IE doesn't have console.log.apply, it's not a real Object.\n    // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n    // http://patik.com/blog/complete-cross-browser-console-log/\n    if (typeof console.log.apply === \"function\") {\n      // Most browsers\n      console.log.apply(console, [str]);\n    } else if (typeof Function.prototype.bind === \"function\") {\n      // IE9\n      const log = Function.prototype.bind.call(console.log, console);\n      log.apply(console, [str]);\n    }\n  }\n};\n\n// @returns {Object: { line: Number, file: String }}\nLog._getCallerDetails = () => {\n  const getStack = () => {\n    // We do NOT use Error.prepareStackTrace here (a V8 extension that gets us a\n    // pre-parsed stack) since it's impossible to compose it with the use of\n    // Error.prepareStackTrace used on the server for source maps.\n    const err = new Error();\n    const stack = err.stack;\n    return stack;\n  };\n  const stack = getStack();\n  if (!stack) return {};\n\n  // looking for the first line outside the logging package (or an\n  // eval if we find that first)\n  let line;\n  const lines = stack.split('\\n').slice(1);\n  for (line of lines) {\n    if (line.match(/^\\s*(at eval \\(eval)|(eval:)/)) {\n      return {\n        file: \"eval\"\n      };\n    }\n    if (!line.match(/packages\\/(?:local-test[:_])?logging(?:\\/|\\.js)/)) {\n      break;\n    }\n  }\n  const details = {};\n\n  // The format for FF is 'functionName@filePath:lineNumber'\n  // The format for V8 is 'functionName (packages/logging/logging.js:81)' or\n  //                      'packages/logging/logging.js:81'\n  const match = /(?:[@(]| at )([^(]+?):([0-9:]+)(?:\\)|$)/.exec(line);\n  if (!match) {\n    return details;\n  }\n\n  // in case the matched block here is line:column\n  details.line = match[2].split(':')[0];\n\n  // Possible format: https://foo.bar.com/scripts/file.js?random=foobar\n  // XXX: if you can write the following in better way, please do it\n  // XXX: what about evals?\n  details.file = match[1].split('/').slice(-1)[0].split('?')[0];\n  return details;\n};\n['debug', 'info', 'warn', 'error'].forEach(level => {\n  // @param arg {String|Object}\n  Log[level] = arg => {\n    if (suppress) {\n      suppress--;\n      return;\n    }\n    let intercepted = false;\n    if (intercept) {\n      intercept--;\n      intercepted = true;\n    }\n    let obj = arg === Object(arg) && !(arg instanceof RegExp) && !(arg instanceof Date) ? arg : {\n      message: new String(arg).toString()\n    };\n    RESTRICTED_KEYS.forEach(key => {\n      if (obj[key]) {\n        throw new Error(\"Can't set '\".concat(key, \"' in log message\"));\n      }\n    });\n    if (hasOwn.call(obj, 'message') && typeof obj.message !== 'string') {\n      throw new Error(\"The 'message' field in log objects must be a string\");\n    }\n    if (!obj.omitCallerDetails) {\n      obj = _objectSpread(_objectSpread({}, Log._getCallerDetails()), obj);\n    }\n    obj.time = new Date();\n    obj.level = level;\n\n    // If we are in production don't write out debug logs.\n    if (level === 'debug' && Meteor.isProduction) {\n      return;\n    }\n    if (intercepted) {\n      interceptedLines.push(EJSON.stringify(obj));\n    } else if (Meteor.isServer) {\n      if (Log.outputFormat === 'colored-text') {\n        console.log(Log.format(obj, {\n          color: true\n        }));\n      } else if (Log.outputFormat === 'json') {\n        console.log(EJSON.stringify(obj));\n      } else {\n        throw new Error(\"Unknown logging output format: \".concat(Log.outputFormat));\n      }\n    } else {\n      logInBrowser(obj);\n    }\n  };\n});\n\n// tries to parse line as EJSON. returns object if parse is successful, or null if not\nLog.parse = line => {\n  let obj = null;\n  if (line && line.startsWith('{')) {\n    // might be json generated from calling 'Log'\n    try {\n      obj = EJSON.parse(line);\n    } catch (e) {}\n  }\n\n  // XXX should probably check fields other than 'time'\n  if (obj && obj.time && obj.time instanceof Date) {\n    return obj;\n  } else {\n    return null;\n  }\n};\n\n// formats a log object into colored human and machine-readable text\nLog.format = function (obj) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  obj = _objectSpread({}, obj); // don't mutate the argument\n  let {\n    time,\n    timeInexact,\n    level = 'info',\n    file,\n    line: lineNumber,\n    app: appName = '',\n    originApp,\n    message = '',\n    program = '',\n    satellite = '',\n    stderr = ''\n  } = obj;\n  if (!(time instanceof Date)) {\n    throw new Error(\"'time' must be a Date object\");\n  }\n  FORMATTED_KEYS.forEach(key => {\n    delete obj[key];\n  });\n  if (Object.keys(obj).length > 0) {\n    if (message) {\n      message += ' ';\n    }\n    message += EJSON.stringify(obj);\n  }\n  const pad2 = n => n.toString().padStart(2, '0');\n  const pad3 = n => n.toString().padStart(3, '0');\n  const dateStamp = time.getFullYear().toString() + pad2(time.getMonth() + 1 /*0-based*/) + pad2(time.getDate());\n  const timeStamp = pad2(time.getHours()) + ':' + pad2(time.getMinutes()) + ':' + pad2(time.getSeconds()) + '.' + pad3(time.getMilliseconds());\n\n  // eg in San Francisco in June this will be '(-7)'\n  const utcOffsetStr = \"(\".concat(-(new Date().getTimezoneOffset() / 60), \")\");\n  let appInfo = '';\n  if (appName) {\n    appInfo += appName;\n  }\n  if (originApp && originApp !== appName) {\n    appInfo += \" via \".concat(originApp);\n  }\n  if (appInfo) {\n    appInfo = \"[\".concat(appInfo, \"] \");\n  }\n  const sourceInfoParts = [];\n  if (program) {\n    sourceInfoParts.push(program);\n  }\n  if (file) {\n    sourceInfoParts.push(file);\n  }\n  if (lineNumber) {\n    sourceInfoParts.push(lineNumber);\n  }\n  let sourceInfo = !sourceInfoParts.length ? '' : \"(\".concat(sourceInfoParts.join(':'), \") \");\n  if (satellite) sourceInfo += \"[\".concat(satellite, \"]\");\n  const stderrIndicator = stderr ? '(STDERR) ' : '';\n  const metaPrefix = [level.charAt(0).toUpperCase(), dateStamp, '-', timeStamp, utcOffsetStr, timeInexact ? '? ' : ' ', appInfo, sourceInfo, stderrIndicator].join('');\n  return Formatter.prettify(metaPrefix, options.color && platformColor(options.metaColor || META_COLOR)) + Formatter.prettify(message, options.color && platformColor(LEVEL_COLORS[level]));\n};\n\n// Turn a line of text into a loggable object.\n// @param line {String}\n// @param override {Object}\nLog.objFromText = (line, override) => {\n  return _objectSpread({\n    message: line,\n    level: 'info',\n    time: new Date(),\n    timeInexact: true\n  }, override);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"logging_server.js\":function module(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/logging/logging_server.js                                                                             //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nFormatter = {};\nFormatter.prettify = function (line, color) {\n  if (!color) return line;\n  return require(\"chalk\")[color](line);\n};\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"chalk\":{\"package.json\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// node_modules/meteor/logging/node_modules/chalk/package.json                                                    //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nmodule.exports = {\n  \"name\": \"chalk\",\n  \"version\": \"4.1.2\",\n  \"main\": \"source\"\n};\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"source\":{\"index.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// node_modules/meteor/logging/node_modules/chalk/source/index.js                                                 //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nmodule.useNode();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\",\n    \".ts\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/logging/logging.js\");\nrequire(\"/node_modules/meteor/logging/logging_server.js\");\n\n/* Exports */\nPackage._define(\"logging\", exports, {\n  Log: Log\n});\n\n})();\n","servePath":"/packages/logging.js","sourceMap":{"version":3,"sources":["packages/logging/logging.js","packages/logging/logging_server.js"],"names":["_objectSpread","module","link","default","v","export","Log","Meteor","hasOwn","Object","prototype","hasOwnProperty","info","arguments","intercept","interceptedLines","suppress","_intercept","count","_suppress","_intercepted","lines","outputFormat","LEVEL_COLORS","debug","warn","error","META_COLOR","isWin32","process","platform","platformColor","color","endsWith","concat","RESTRICTED_KEYS","FORMATTED_KEYS","logInBrowser","obj","str","format","level","console","log","apply","Function","bind","call","_getCallerDetails","getStack","err","Error","stack","line","split","slice","match","file","details","exec","forEach","arg","intercepted","RegExp","Date","message","String","toString","key","omitCallerDetails","time","isProduction","push","EJSON","stringify","isServer","parse","startsWith","e","options","length","undefined","timeInexact","lineNumber","app","appName","originApp","program","satellite","stderr","keys","pad2","n","padStart","pad3","dateStamp","getFullYear","getMonth","getDate","timeStamp","getHours","getMinutes","getSeconds","getMilliseconds","utcOffsetStr","getTimezoneOffset","appInfo","sourceInfoParts","sourceInfo","join","stderrIndicator","metaPrefix","charAt","toUpperCase","Formatter","prettify","metaColor","objFromText","override","require"],"mappings":"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","file":"/packages/logging.js","sourcesContent":["import { Meteor } from 'meteor/meteor';\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nfunction Log(...args) {\n  Log.info(...args);\n}\n\n/// FOR TESTING\nlet intercept = 0;\nlet interceptedLines = [];\nlet suppress = 0;\n\n// Intercept the next 'count' calls to a Log function. The actual\n// lines printed to the console can be cleared and read by calling\n// Log._intercepted().\nLog._intercept = (count) => {\n  intercept += count;\n};\n\n// Suppress the next 'count' calls to a Log function. Use this to stop\n// tests from spamming the console, especially with red errors that\n// might look like a failing test.\nLog._suppress = (count) => {\n  suppress += count;\n};\n\n// Returns intercepted lines and resets the intercept counter.\nLog._intercepted = () => {\n  const lines = interceptedLines;\n  interceptedLines = [];\n  intercept = 0;\n  return lines;\n};\n\n// Either 'json' or 'colored-text'.\n//\n// When this is set to 'json', print JSON documents that are parsed by another\n// process ('satellite' or 'meteor run'). This other process should call\n// 'Log.format' for nice output.\n//\n// When this is set to 'colored-text', call 'Log.format' before printing.\n// This should be used for logging from within satellite, since there is no\n// other process that will be reading its standard output.\nLog.outputFormat = 'json';\n\nconst LEVEL_COLORS = {\n  debug: 'green',\n  // leave info as the default color\n  warn: 'magenta',\n  error: 'red'\n};\n\nconst META_COLOR = 'blue';\n\n// Default colors cause readability problems on Windows Powershell,\n// switch to bright variants. While still capable of millions of\n// operations per second, the benchmark showed a 25%+ increase in\n// ops per second (on Node 8) by caching \"process.platform\".\nconst isWin32 = typeof process === 'object' && process.platform === 'win32';\nconst platformColor = (color) => {\n  if (isWin32 && typeof color === 'string' && !color.endsWith('Bright')) {\n    return `${color}Bright`;\n  }\n  return color;\n};\n\n// XXX package\nconst RESTRICTED_KEYS = ['time', 'timeInexact', 'level', 'file', 'line',\n                        'program', 'originApp', 'satellite', 'stderr'];\n\nconst FORMATTED_KEYS = [...RESTRICTED_KEYS, 'app', 'message'];\n\nconst logInBrowser = obj => {\n  const str = Log.format(obj);\n\n  // XXX Some levels should be probably be sent to the server\n  const level = obj.level;\n\n  if ((typeof console !== 'undefined') && console[level]) {\n    console[level](str);\n  } else {\n    // IE doesn't have console.log.apply, it's not a real Object.\n    // http://stackoverflow.com/questions/5538972/console-log-apply-not-working-in-ie9\n    // http://patik.com/blog/complete-cross-browser-console-log/\n    if (typeof console.log.apply === \"function\") {\n      // Most browsers\n      console.log.apply(console, [str]);\n\n    } else if (typeof Function.prototype.bind === \"function\") {\n      // IE9\n      const log = Function.prototype.bind.call(console.log, console);\n      log.apply(console, [str]);\n    }\n  }\n};\n\n// @returns {Object: { line: Number, file: String }}\nLog._getCallerDetails = () => {\n  const getStack = () => {\n    // We do NOT use Error.prepareStackTrace here (a V8 extension that gets us a\n    // pre-parsed stack) since it's impossible to compose it with the use of\n    // Error.prepareStackTrace used on the server for source maps.\n    const err = new Error;\n    const stack = err.stack;\n    return stack;\n  };\n\n  const stack = getStack();\n\n  if (!stack) return {};\n\n  // looking for the first line outside the logging package (or an\n  // eval if we find that first)\n  let line;\n  const lines = stack.split('\\n').slice(1);\n  for (line of lines) {\n    if (line.match(/^\\s*(at eval \\(eval)|(eval:)/)) {\n      return {file: \"eval\"};\n    }\n\n    if (!line.match(/packages\\/(?:local-test[:_])?logging(?:\\/|\\.js)/)) {\n      break;\n    }\n  }\n\n  const details = {};\n\n  // The format for FF is 'functionName@filePath:lineNumber'\n  // The format for V8 is 'functionName (packages/logging/logging.js:81)' or\n  //                      'packages/logging/logging.js:81'\n  const match = /(?:[@(]| at )([^(]+?):([0-9:]+)(?:\\)|$)/.exec(line);\n  if (!match) {\n    return details;\n  }\n\n  // in case the matched block here is line:column\n  details.line = match[2].split(':')[0];\n\n  // Possible format: https://foo.bar.com/scripts/file.js?random=foobar\n  // XXX: if you can write the following in better way, please do it\n  // XXX: what about evals?\n  details.file = match[1].split('/').slice(-1)[0].split('?')[0];\n\n  return details;\n};\n\n['debug', 'info', 'warn', 'error'].forEach((level) => {\n // @param arg {String|Object}\n Log[level] = (arg) => {\n  if (suppress) {\n    suppress--;\n    return;\n  }\n\n  let intercepted = false;\n  if (intercept) {\n    intercept--;\n    intercepted = true;\n  }\n\n  let obj = (arg === Object(arg)\n    && !(arg instanceof RegExp)\n    && !(arg instanceof Date))\n    ? arg\n    : { message: new String(arg).toString() };\n\n  RESTRICTED_KEYS.forEach(key => {\n    if (obj[key]) {\n      throw new Error(`Can't set '${key}' in log message`);\n    }\n  });\n\n  if (hasOwn.call(obj, 'message') && typeof obj.message !== 'string') {\n    throw new Error(\"The 'message' field in log objects must be a string\");\n  }\n\n  if (!obj.omitCallerDetails) {\n    obj = { ...Log._getCallerDetails(), ...obj };\n  }\n\n  obj.time = new Date();\n  obj.level = level;\n\n  // If we are in production don't write out debug logs.\n  if (level === 'debug' && Meteor.isProduction) {\n    return;\n  }\n\n  if (intercepted) {\n    interceptedLines.push(EJSON.stringify(obj));\n  } else if (Meteor.isServer) {\n    if (Log.outputFormat === 'colored-text') {\n      console.log(Log.format(obj, {color: true}));\n    } else if (Log.outputFormat === 'json') {\n      console.log(EJSON.stringify(obj));\n    } else {\n      throw new Error(`Unknown logging output format: ${Log.outputFormat}`);\n    }\n  } else {\n    logInBrowser(obj);\n  }\n};\n});\n\n\n// tries to parse line as EJSON. returns object if parse is successful, or null if not\nLog.parse = (line) => {\n  let obj = null;\n  if (line && line.startsWith('{')) { // might be json generated from calling 'Log'\n    try { obj = EJSON.parse(line); } catch (e) {}\n  }\n\n  // XXX should probably check fields other than 'time'\n  if (obj && obj.time && (obj.time instanceof Date)) {\n    return obj;\n  } else {\n    return null;\n  }\n};\n\n// formats a log object into colored human and machine-readable text\nLog.format = (obj, options = {}) => {\n  obj = { ...obj }; // don't mutate the argument\n  let {\n    time,\n    timeInexact,\n    level = 'info',\n    file,\n    line: lineNumber,\n    app: appName = '',\n    originApp,\n    message = '',\n    program = '',\n    satellite = '',\n    stderr = '',\n  } = obj;\n\n  if (!(time instanceof Date)) {\n    throw new Error(\"'time' must be a Date object\");\n  }\n\n  FORMATTED_KEYS.forEach((key) => { delete obj[key]; });\n\n  if (Object.keys(obj).length > 0) {\n    if (message) {\n      message += ' ';\n    }\n    message += EJSON.stringify(obj);\n  }\n\n  const pad2 = n => n.toString().padStart(2, '0');\n  const pad3 = n => n.toString().padStart(3, '0');\n\n  const dateStamp = time.getFullYear().toString() +\n    pad2(time.getMonth() + 1 /*0-based*/) +\n    pad2(time.getDate());\n  const timeStamp = pad2(time.getHours()) +\n        ':' +\n        pad2(time.getMinutes()) +\n        ':' +\n        pad2(time.getSeconds()) +\n        '.' +\n        pad3(time.getMilliseconds());\n\n  // eg in San Francisco in June this will be '(-7)'\n  const utcOffsetStr = `(${(-(new Date().getTimezoneOffset() / 60))})`;\n\n  let appInfo = '';\n  if (appName) {\n    appInfo += appName;\n  }\n  if (originApp && originApp !== appName) {\n    appInfo += ` via ${originApp}`;\n  }\n  if (appInfo) {\n    appInfo = `[${appInfo}] `;\n  }\n\n  const sourceInfoParts = [];\n  if (program) {\n    sourceInfoParts.push(program);\n  }\n  if (file) {\n    sourceInfoParts.push(file);\n  }\n  if (lineNumber) {\n    sourceInfoParts.push(lineNumber);\n  }\n\n  let sourceInfo = !sourceInfoParts.length ?\n    '' : `(${sourceInfoParts.join(':')}) `;\n\n  if (satellite)\n    sourceInfo += `[${satellite}]`;\n\n  const stderrIndicator = stderr ? '(STDERR) ' : '';\n\n  const metaPrefix = [\n    level.charAt(0).toUpperCase(),\n    dateStamp,\n    '-',\n    timeStamp,\n    utcOffsetStr,\n    timeInexact ? '? ' : ' ',\n    appInfo,\n    sourceInfo,\n    stderrIndicator].join('');\n\n\n  return Formatter.prettify(metaPrefix, options.color && platformColor(options.metaColor || META_COLOR)) +\n      Formatter.prettify(message, options.color && platformColor(LEVEL_COLORS[level]));\n};\n\n// Turn a line of text into a loggable object.\n// @param line {String}\n// @param override {Object}\nLog.objFromText = (line, override) => {\n  return {\n    message: line,\n    level: 'info',\n    time: new Date(),\n    timeInexact: true,\n    ...override\n  };\n};\n\nexport { Log };\n","Formatter = {};\nFormatter.prettify = function(line, color){\n    if(!color) return line;\n    return require(\"chalk\")[color](line);\n};\n"]}}]