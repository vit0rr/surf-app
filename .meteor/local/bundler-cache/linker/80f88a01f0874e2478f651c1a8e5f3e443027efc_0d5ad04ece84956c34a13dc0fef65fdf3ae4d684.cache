[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar Autoupdate;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"autoupdate\":{\"autoupdate_server.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/autoupdate/autoupdate_server.js                                                                     //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\n!function (module1) {\n  let _objectSpread;\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n  }, 0);\n  module1.export({\n    Autoupdate: () => Autoupdate\n  });\n  let ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions(v) {\n      ClientVersions = v;\n    }\n  }, 0);\n  let onMessage;\n  module1.link(\"meteor/inter-process-messaging\", {\n    onMessage(v) {\n      onMessage = v;\n    }\n  }, 1);\n  var Future = Npm.require(\"fibers/future\");\n  const Autoupdate = __meteor_runtime_config__.autoupdate = {\n    // Map from client architectures (web.browser, web.browser.legacy,\n    // web.cordova) to version fields { version, versionRefreshable,\n    // versionNonRefreshable, refreshable } that will be stored in\n    // ClientVersions documents (whose IDs are client architectures). This\n    // data gets serialized into the boilerplate because it's stored in\n    // __meteor_runtime_config__.autoupdate.versions.\n    versions: {}\n  };\n  // Stores acceptable client versions.\n  const clientVersions = new ClientVersions();\n\n  // The client hash includes __meteor_runtime_config__, so wait until\n  // all packages have loaded and have had a chance to populate the\n  // runtime config before using the client hash as our default auto\n  // update version id.\n\n  // Note: Tests allow people to override Autoupdate.autoupdateVersion before\n  // startup.\n  Autoupdate.autoupdateVersion = null;\n  Autoupdate.autoupdateVersionRefreshable = null;\n  Autoupdate.autoupdateVersionCordova = null;\n  Autoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n  var syncQueue = new Meteor._SynchronousQueue();\n  function updateVersions(shouldReloadClientProgram) {\n    // Step 1: load the current client program on the server\n    if (shouldReloadClientProgram) {\n      WebAppInternals.reloadClientPrograms();\n    }\n    const {\n      // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n      // precedence, but Autoupdate.autoupdateVersion is still supported as\n      // a fallback. In most cases neither of these values will be defined.\n      AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n    } = process.env;\n\n    // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n    const clientArchs = Object.keys(WebApp.clientPrograms);\n    clientArchs.forEach(arch => {\n      Autoupdate.versions[arch] = {\n        version: AUTOUPDATE_VERSION || WebApp.calculateClientHash(arch),\n        versionRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashRefreshable(arch),\n        versionNonRefreshable: AUTOUPDATE_VERSION || WebApp.calculateClientHashNonRefreshable(arch),\n        versionReplaceable: AUTOUPDATE_VERSION || WebApp.calculateClientHashReplaceable(arch),\n        versionHmr: WebApp.clientPrograms[arch].hmrVersion\n      };\n    });\n\n    // Step 3: form the new client boilerplate which contains the updated\n    // assets and __meteor_runtime_config__.\n    if (shouldReloadClientProgram) {\n      WebAppInternals.generateBoilerplate();\n    }\n\n    // Step 4: update the ClientVersions collection.\n    // We use `onListening` here because we need to use\n    // `WebApp.getRefreshableAssets`, which is only set after\n    // `WebApp.generateBoilerplate` is called by `main` in webapp.\n    WebApp.onListening(() => {\n      clientArchs.forEach(arch => {\n        const payload = _objectSpread(_objectSpread({}, Autoupdate.versions[arch]), {}, {\n          assets: WebApp.getRefreshableAssets(arch)\n        });\n        clientVersions.set(arch, payload);\n      });\n    });\n  }\n  Meteor.publish(\"meteor_autoupdate_clientVersions\", function (appId) {\n    // `null` happens when a client doesn't have an appId and passes\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n    // `null` as JSON doesn't have `undefined.\n    check(appId, Match.OneOf(String, undefined, null));\n\n    // Don't notify clients using wrong appId such as mobile apps built with a\n    // different server but pointing at the same local url\n    if (Autoupdate.appId && appId && Autoupdate.appId !== appId) return [];\n    const stop = clientVersions.watch((version, isNew) => {\n      (isNew ? this.added : this.changed).call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n    });\n    this.onStop(() => stop());\n    this.ready();\n  }, {\n    is_auto: true\n  });\n  Meteor.startup(function () {\n    updateVersions(false);\n\n    // Force any connected clients that are still looking for these older\n    // document IDs to reload.\n    [\"version\", \"version-refreshable\", \"version-cordova\"].forEach(_id => {\n      clientVersions.set(_id, {\n        version: \"outdated\"\n      });\n    });\n  });\n  var fut = new Future();\n\n  // We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n  // so we add a queued task that waits for onListen before 'refresh' can queue\n  // tasks. Note that the `onListening` callbacks do not fire until after\n  // Meteor.startup, so there is no concern that the 'updateVersions' calls from\n  // 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\n  syncQueue.queueTask(function () {\n    fut.wait();\n  });\n  WebApp.onListening(function () {\n    fut.return();\n  });\n  function enqueueVersionsRefresh() {\n    syncQueue.queueTask(function () {\n      updateVersions(true);\n    });\n  }\n\n  // Listen for messages pertaining to the client-refresh topic.\n\n  onMessage(\"client-refresh\", enqueueVersionsRefresh);\n\n  // Another way to tell the process to refresh: send SIGHUP signal\n  process.on('SIGHUP', Meteor.bindEnvironment(function () {\n    enqueueVersionsRefresh();\n  }, \"handling SIGHUP signal for refresh\"));\n}.call(this, module);\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_versions.js\":function module(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                              //\n// packages/autoupdate/client_versions.js                                                                       //\n//                                                                                                              //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                //\nlet _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nmodule.export({\n  ClientVersions: () => ClientVersions\n});\nlet Tracker;\nmodule.link(\"meteor/tracker\", {\n  Tracker(v) {\n    Tracker = v;\n  }\n}, 0);\nclass ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: _ref => {\n        let {\n          id,\n          msg,\n          fields\n        } = _ref;\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = _objectSpread({\n        _id: id\n      }, fields);\n      isNew = true;\n      this._versions.set(id, version);\n    }\n    this._watchCallbacks.forEach(_ref2 => {\n      let {\n        fn,\n        filter\n      } = _ref2;\n      if (!filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn) {\n    let {\n      skipInitial,\n      filter\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!skipInitial) {\n      const resolved = Promise.resolve();\n      this._versions.forEach(version => {\n        if (!filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n    const callback = {\n      fn,\n      filter\n    };\n    this._watchCallbacks.add(callback);\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return version._id === id && fields.some(field => version[field] !== currentVersion[field]);\n    }\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n    dependency.depend();\n    const stop = this.watch(version => {\n      if (isNewVersion(version)) {\n        dependency.changed();\n        stop();\n      }\n    }, {\n      skipInitial: true\n    });\n    return !!version && isNewVersion(version);\n  }\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/autoupdate/autoupdate_server.js\");\n\n/* Exports */\nPackage._define(\"autoupdate\", exports, {\n  Autoupdate: Autoupdate\n});\n\n})();\n","servePath":"/packages/autoupdate.js","sourceMap":{"version":3,"sources":["packages/autoupdate/autoupdate_server.js","packages/autoupdate/client_versions.js"],"names":["_objectSpread","module1","link","default","v","export","Autoupdate","ClientVersions","onMessage","Future","Npm","require","__meteor_runtime_config__","autoupdate","versions","clientVersions","autoupdateVersion","autoupdateVersionRefreshable","autoupdateVersionCordova","appId","process","env","APP_ID","syncQueue","Meteor","_SynchronousQueue","updateVersions","shouldReloadClientProgram","WebAppInternals","reloadClientPrograms","AUTOUPDATE_VERSION","clientArchs","Object","keys","WebApp","clientPrograms","forEach","arch","version","calculateClientHash","versionRefreshable","calculateClientHashRefreshable","versionNonRefreshable","calculateClientHashNonRefreshable","versionReplaceable","calculateClientHashReplaceable","versionHmr","hmrVersion","generateBoilerplate","onListening","payload","assets","getRefreshableAssets","set","publish","check","Match","OneOf","String","undefined","stop","watch","isNew","added","changed","call","_id","onStop","ready","is_auto","startup","fut","queueTask","wait","return","enqueueVersionsRefresh","on","bindEnvironment","module","Tracker","constructor","_versions","Map","_watchCallbacks","Set","createStore","update","_ref","id","msg","fields","hasVersions","size","get","assign","_ref2","fn","filter","skipInitial","arguments","length","resolved","Promise","resolve","then","callback","add","delete","newClientAvailable","currentVersion","isNewVersion","some","field","dependency","Dependency","depend"],"mappings":"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","file":"/packages/autoupdate.js","sourcesContent":["// Publish the current client versions for each client architecture\n// (web.browser, web.browser.legacy, web.cordova). When a client observes\n// a change in the versions associated with its client architecture,\n// it will refresh itself, either by swapping out CSS assets or by\n// reloading the page. Changes to the replaceable version are ignored\n// and handled by the hot-module-replacement package.\n//\n// There are four versions for any given client architecture: `version`,\n// `versionRefreshable`, `versionNonRefreshable`, and\n// `versionReplaceable`. The refreshable version is a hash of just the\n// client resources that are refreshable, such as CSS. The replaceable\n// version is a hash of files that can be updated with HMR. The\n// non-refreshable version is a hash of the rest of the client assets,\n// excluding the refreshable ones: HTML, JS that is not replaceable, and\n// static files in the `public` directory. The `version` version is a\n// combined hash of everything.\n//\n// If the environment variable `AUTOUPDATE_VERSION` is set, it will be\n// used in place of all client versions. You can use this variable to\n// control when the client reloads. For example, if you want to force a\n// reload only after major changes, use a custom AUTOUPDATE_VERSION and\n// change it only when something worth pushing to clients happens.\n//\n// The server publishes a `meteor_autoupdate_clientVersions` collection.\n// The ID of each document is the client architecture, and the fields of\n// the document are the versions described above.\n\nimport { ClientVersions } from \"./client_versions.js\";\nvar Future = Npm.require(\"fibers/future\");\n\nexport const Autoupdate = __meteor_runtime_config__.autoupdate = {\n  // Map from client architectures (web.browser, web.browser.legacy,\n  // web.cordova) to version fields { version, versionRefreshable,\n  // versionNonRefreshable, refreshable } that will be stored in\n  // ClientVersions documents (whose IDs are client architectures). This\n  // data gets serialized into the boilerplate because it's stored in\n  // __meteor_runtime_config__.autoupdate.versions.\n  versions: {}\n};\n\n// Stores acceptable client versions.\nconst clientVersions = new ClientVersions();\n\n// The client hash includes __meteor_runtime_config__, so wait until\n// all packages have loaded and have had a chance to populate the\n// runtime config before using the client hash as our default auto\n// update version id.\n\n// Note: Tests allow people to override Autoupdate.autoupdateVersion before\n// startup.\nAutoupdate.autoupdateVersion = null;\nAutoupdate.autoupdateVersionRefreshable = null;\nAutoupdate.autoupdateVersionCordova = null;\nAutoupdate.appId = __meteor_runtime_config__.appId = process.env.APP_ID;\n\nvar syncQueue = new Meteor._SynchronousQueue();\n\nfunction updateVersions(shouldReloadClientProgram) {\n  // Step 1: load the current client program on the server\n  if (shouldReloadClientProgram) {\n    WebAppInternals.reloadClientPrograms();\n  }\n\n  const {\n    // If the AUTOUPDATE_VERSION environment variable is defined, it takes\n    // precedence, but Autoupdate.autoupdateVersion is still supported as\n    // a fallback. In most cases neither of these values will be defined.\n    AUTOUPDATE_VERSION = Autoupdate.autoupdateVersion\n  } = process.env;\n\n  // Step 2: update __meteor_runtime_config__.autoupdate.versions.\n  const clientArchs = Object.keys(WebApp.clientPrograms);\n  clientArchs.forEach(arch => {\n    Autoupdate.versions[arch] = {\n      version: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHash(arch),\n      versionRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashRefreshable(arch),\n      versionNonRefreshable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashNonRefreshable(arch),\n      versionReplaceable: AUTOUPDATE_VERSION ||\n        WebApp.calculateClientHashReplaceable(arch),\n      versionHmr: WebApp.clientPrograms[arch].hmrVersion\n    };\n  });\n\n  // Step 3: form the new client boilerplate which contains the updated\n  // assets and __meteor_runtime_config__.\n  if (shouldReloadClientProgram) {\n    WebAppInternals.generateBoilerplate();\n  }\n\n  // Step 4: update the ClientVersions collection.\n  // We use `onListening` here because we need to use\n  // `WebApp.getRefreshableAssets`, which is only set after\n  // `WebApp.generateBoilerplate` is called by `main` in webapp.\n  WebApp.onListening(() => {\n    clientArchs.forEach(arch => {\n      const payload = {\n        ...Autoupdate.versions[arch],\n        assets: WebApp.getRefreshableAssets(arch),\n      };\n\n      clientVersions.set(arch, payload);\n    });\n  });\n}\n\nMeteor.publish(\n  \"meteor_autoupdate_clientVersions\",\n  function (appId) {\n    // `null` happens when a client doesn't have an appId and passes\n    // `undefined` to `Meteor.subscribe`. `undefined` is translated to\n    // `null` as JSON doesn't have `undefined.\n    check(appId, Match.OneOf(String, undefined, null));\n\n    // Don't notify clients using wrong appId such as mobile apps built with a\n    // different server but pointing at the same local url\n    if (Autoupdate.appId && appId && Autoupdate.appId !== appId)\n      return [];\n\n    const stop = clientVersions.watch((version, isNew) => {\n      (isNew ? this.added : this.changed)\n        .call(this, \"meteor_autoupdate_clientVersions\", version._id, version);\n    });\n\n    this.onStop(() => stop());\n    this.ready();\n  },\n  {is_auto: true}\n);\n\nMeteor.startup(function () {\n  updateVersions(false);\n\n  // Force any connected clients that are still looking for these older\n  // document IDs to reload.\n  [\"version\",\n   \"version-refreshable\",\n   \"version-cordova\",\n  ].forEach(_id => {\n    clientVersions.set(_id, {\n      version: \"outdated\"\n    });\n  });\n});\n\nvar fut = new Future();\n\n// We only want 'refresh' to trigger 'updateVersions' AFTER onListen,\n// so we add a queued task that waits for onListen before 'refresh' can queue\n// tasks. Note that the `onListening` callbacks do not fire until after\n// Meteor.startup, so there is no concern that the 'updateVersions' calls from\n// 'refresh' will overlap with the `updateVersions` call from Meteor.startup.\n\nsyncQueue.queueTask(function () {\n  fut.wait();\n});\n\nWebApp.onListening(function () {\n  fut.return();\n});\n\nfunction enqueueVersionsRefresh() {\n  syncQueue.queueTask(function () {\n    updateVersions(true);\n  });\n}\n\n// Listen for messages pertaining to the client-refresh topic.\nimport { onMessage } from \"meteor/inter-process-messaging\";\nonMessage(\"client-refresh\", enqueueVersionsRefresh);\n\n// Another way to tell the process to refresh: send SIGHUP signal\nprocess.on('SIGHUP', Meteor.bindEnvironment(function () {\n  enqueueVersionsRefresh();\n}, \"handling SIGHUP signal for refresh\"));\n","import { Tracker } from \"meteor/tracker\";\n\nexport class ClientVersions {\n  constructor() {\n    this._versions = new Map();\n    this._watchCallbacks = new Set();\n  }\n\n  // Creates a Livedata store for use with `Meteor.connection.registerStore`.\n  // After the store is registered, document updates reported by Livedata are\n  // merged with the documents in this `ClientVersions` instance.\n  createStore() {\n    return {\n      update: ({ id, msg, fields }) => {\n        if (msg === \"added\" || msg === \"changed\") {\n          this.set(id, fields);\n        }\n      }\n    };\n  }\n\n  hasVersions() {\n    return this._versions.size > 0;\n  }\n\n  get(id) {\n    return this._versions.get(id);\n  }\n\n  // Adds or updates a version document and invokes registered callbacks for the\n  // added/updated document. If a document with the given ID already exists, its\n  // fields are merged with `fields`.\n  set(id, fields) {\n    let version = this._versions.get(id);\n    let isNew = false;\n\n    if (version) {\n      Object.assign(version, fields);\n    } else {\n      version = {\n        _id: id,\n        ...fields\n      };\n\n      isNew = true;\n      this._versions.set(id, version);\n    }\n\n    this._watchCallbacks.forEach(({ fn, filter }) => {\n      if (! filter || filter === version._id) {\n        fn(version, isNew);\n      }\n    });\n  }\n\n  // Registers a callback that will be invoked when a version document is added\n  // or changed. Calling the function returned by `watch` removes the callback.\n  // If `skipInitial` is true, the callback isn't be invoked for existing\n  // documents. If `filter` is set, the callback is only invoked for documents\n  // with ID `filter`.\n  watch(fn, { skipInitial, filter } = {}) {\n    if (! skipInitial) {\n      const resolved = Promise.resolve();\n\n      this._versions.forEach((version) => {\n        if (! filter || filter === version._id) {\n          resolved.then(() => fn(version, true));\n        }\n      });\n    }\n\n    const callback = { fn, filter };\n    this._watchCallbacks.add(callback);\n\n    return () => this._watchCallbacks.delete(callback);\n  }\n\n  // A reactive data source for `Autoupdate.newClientAvailable`.\n  newClientAvailable(id, fields, currentVersion) {\n    function isNewVersion(version) {\n      return (\n        version._id === id &&\n        fields.some((field) => version[field] !== currentVersion[field])\n      );\n    }\n\n    const dependency = new Tracker.Dependency();\n    const version = this.get(id);\n\n    dependency.depend();\n\n    const stop = this.watch(\n      (version) => {\n        if (isNewVersion(version)) {\n          dependency.changed();\n          stop();\n        }\n      },\n      { skipInitial: true }\n    );\n\n    return !! version && isNewVersion(version);\n  }\n}\n"]}}]