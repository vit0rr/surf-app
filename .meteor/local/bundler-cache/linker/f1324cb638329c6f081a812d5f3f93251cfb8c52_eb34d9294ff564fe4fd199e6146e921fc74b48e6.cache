[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar check, Match;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"check\":{\"match.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/check/match.js                                                                                       //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  check: () => check,\n  Match: () => Match\n});\nlet isPlainObject;\nmodule.link(\"./isPlainObject\", {\n  isPlainObject(v) {\n    isPlainObject = v;\n  }\n}, 0);\n// Things we explicitly do NOT support:\n//    - heterogenous arrays\n\nconst currentArgumentChecker = new Meteor.EnvironmentVariable();\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * @summary Check that a value matches a [pattern](#matchpatterns).\n * If the value does not match the pattern, throw a `Match.Error`.\n *\n * Particularly useful to assert that arguments to a function have the right\n * types and structure.\n * @locus Anywhere\n * @param {Any} value The value to check\n * @param {MatchPattern} pattern The pattern to match `value` against\n */\nfunction check(value, pattern) {\n  // Record that check got called, if somebody cared.\n  //\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()\n  // from non-Fiber server contexts; the downside is that if you forget to\n  // bindEnvironment on some random callback in your method/publisher,\n  // it might not find the argumentChecker and you'll get an error about\n  // not checking an argument that it looks like you're checking (instead\n  // of just getting a \"Node code must run in a Fiber\" error).\n  const argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();\n  if (argChecker) {\n    argChecker.checking(value);\n  }\n  const result = testSubtree(value, pattern);\n  if (result) {\n    const err = new Match.Error(result.message);\n    if (result.path) {\n      err.message += \" in field \".concat(result.path);\n      err.path = result.path;\n    }\n    throw err;\n  }\n}\n;\n\n/**\n * @namespace Match\n * @summary The namespace for all Match types and methods.\n */\nconst Match = {\n  Optional: function (pattern) {\n    return new Optional(pattern);\n  },\n  Maybe: function (pattern) {\n    return new Maybe(pattern);\n  },\n  OneOf: function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    return new OneOf(args);\n  },\n  Any: ['__any__'],\n  Where: function (condition) {\n    return new Where(condition);\n  },\n  ObjectIncluding: function (pattern) {\n    return new ObjectIncluding(pattern);\n  },\n  ObjectWithValues: function (pattern) {\n    return new ObjectWithValues(pattern);\n  },\n  // Matches only signed 32-bit integers\n  Integer: ['__integer__'],\n  // XXX matchers should know how to describe themselves for errors\n  Error: Meteor.makeErrorType('Match.Error', function (msg) {\n    this.message = \"Match error: \".concat(msg);\n\n    // The path of the value that failed to match. Initially empty, this gets\n    // populated by catching and rethrowing the exception as it goes back up the\n    // stack.\n    // E.g.: \"vals[3].entity.created\"\n    this.path = '';\n\n    // If this gets sent over DDP, don't give full internal details but at least\n    // provide something better than 500 Internal server error.\n    this.sanitizedError = new Meteor.Error(400, 'Match failed');\n  }),\n  // Tests to see if value matches pattern. Unlike check, it merely returns true\n  // or false (unless an error other than Match.Error was thrown). It does not\n  // interact with _failIfArgumentsAreNotAllChecked.\n  // XXX maybe also implement a Match.match which returns more information about\n  //     failures but without using exception handling or doing what check()\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion\n\n  /**\n   * @summary Returns true if the value matches the pattern.\n   * @locus Anywhere\n   * @param {Any} value The value to check\n   * @param {MatchPattern} pattern The pattern to match `value` against\n   */\n  test(value, pattern) {\n    return !testSubtree(value, pattern);\n  },\n  // Runs `f.apply(context, args)`. If check() is not called on every element of\n  // `args` (either directly or in the first level of an array), throws an error\n  // (using `description` in the message).\n  _failIfArgumentsAreNotAllChecked(f, context, args, description) {\n    const argChecker = new ArgumentChecker(args, description);\n    const result = currentArgumentChecker.withValue(argChecker, () => f.apply(context, args));\n\n    // If f didn't itself throw, make sure it checked all of its arguments.\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();\n    return result;\n  }\n};\nclass Optional {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\nclass Maybe {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\nclass OneOf {\n  constructor(choices) {\n    if (!choices || choices.length === 0) {\n      throw new Error('Must provide at least one choice to Match.OneOf');\n    }\n    this.choices = choices;\n  }\n}\nclass Where {\n  constructor(condition) {\n    this.condition = condition;\n  }\n}\nclass ObjectIncluding {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\nclass ObjectWithValues {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\nconst stringForErrorMessage = function (value) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (value === null) {\n    return 'null';\n  }\n  if (options.onlyShowType) {\n    return typeof value;\n  }\n\n  // Your average non-object things.  Saves from doing the try/catch below for.\n  if (typeof value !== 'object') {\n    return EJSON.stringify(value);\n  }\n  try {\n    // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)\n    // If the native stringify is going to choke, EJSON.stringify is going to choke too.\n    JSON.stringify(value);\n  } catch (stringifyError) {\n    if (stringifyError.name === 'TypeError') {\n      return typeof value;\n    }\n  }\n  return EJSON.stringify(value);\n};\nconst typeofChecks = [[String, 'string'], [Number, 'number'], [Boolean, 'boolean'],\n// While we don't allow undefined/function in EJSON, this is good for optional\n// arguments with OneOf.\n[Function, 'function'], [undefined, 'undefined']];\n\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.\nconst testSubtree = (value, pattern) => {\n  // Match anything!\n  if (pattern === Match.Any) {\n    return false;\n  }\n\n  // Basic atomic types.\n  // Do not match boxed objects (e.g. String, Boolean)\n  for (let i = 0; i < typeofChecks.length; ++i) {\n    if (pattern === typeofChecks[i][0]) {\n      if (typeof value === typeofChecks[i][1]) {\n        return false;\n      }\n      return {\n        message: \"Expected \".concat(typeofChecks[i][1], \", got \").concat(stringForErrorMessage(value, {\n          onlyShowType: true\n        })),\n        path: ''\n      };\n    }\n  }\n  if (pattern === null) {\n    if (value === null) {\n      return false;\n    }\n    return {\n      message: \"Expected null, got \".concat(stringForErrorMessage(value)),\n      path: ''\n    };\n  }\n\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.\n  if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {\n    if (value === pattern) {\n      return false;\n    }\n    return {\n      message: \"Expected \".concat(pattern, \", got \").concat(stringForErrorMessage(value)),\n      path: ''\n    };\n  }\n\n  // Match.Integer is special type encoded with array\n  if (pattern === Match.Integer) {\n    // There is no consistent and reliable way to check if variable is a 64-bit\n    // integer. One of the popular solutions is to get reminder of division by 1\n    // but this method fails on really large floats with big precision.\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8\n    // Bitwise operators work consistantly but always cast variable to 32-bit\n    // signed integer according to JavaScript specs.\n    if (typeof value === 'number' && (value | 0) === value) {\n      return false;\n    }\n    return {\n      message: \"Expected Integer, got \".concat(stringForErrorMessage(value)),\n      path: ''\n    };\n  }\n\n  // 'Object' is shorthand for Match.ObjectIncluding({});\n  if (pattern === Object) {\n    pattern = Match.ObjectIncluding({});\n  }\n\n  // Array (checked AFTER Any, which is implemented as an Array).\n  if (pattern instanceof Array) {\n    if (pattern.length !== 1) {\n      return {\n        message: \"Bad pattern: arrays must have one type element \".concat(stringForErrorMessage(pattern)),\n        path: ''\n      };\n    }\n    if (!Array.isArray(value) && !isArguments(value)) {\n      return {\n        message: \"Expected array, got \".concat(stringForErrorMessage(value)),\n        path: ''\n      };\n    }\n    for (let i = 0, length = value.length; i < length; i++) {\n      const result = testSubtree(value[i], pattern[0]);\n      if (result) {\n        result.path = _prependPath(i, result.path);\n        return result;\n      }\n    }\n    return false;\n  }\n\n  // Arbitrary validation checks. The condition can return false or throw a\n  // Match.Error (ie, it can internally use check()) to fail.\n  if (pattern instanceof Where) {\n    let result;\n    try {\n      result = pattern.condition(value);\n    } catch (err) {\n      if (!(err instanceof Match.Error)) {\n        throw err;\n      }\n      return {\n        message: err.message,\n        path: err.path\n      };\n    }\n    if (result) {\n      return false;\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.Where validation',\n      path: ''\n    };\n  }\n  if (pattern instanceof Maybe) {\n    pattern = Match.OneOf(undefined, null, pattern.pattern);\n  } else if (pattern instanceof Optional) {\n    pattern = Match.OneOf(undefined, pattern.pattern);\n  }\n  if (pattern instanceof OneOf) {\n    for (let i = 0; i < pattern.choices.length; ++i) {\n      const result = testSubtree(value, pattern.choices[i]);\n      if (!result) {\n        // No error? Yay, return.\n        return false;\n      }\n\n      // Match errors just mean try another choice.\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',\n      path: ''\n    };\n  }\n\n  // A function that isn't something we special-case is assumed to be a\n  // constructor.\n  if (pattern instanceof Function) {\n    if (value instanceof pattern) {\n      return false;\n    }\n    return {\n      message: \"Expected \".concat(pattern.name || 'particular constructor'),\n      path: ''\n    };\n  }\n  let unknownKeysAllowed = false;\n  let unknownKeyPattern;\n  if (pattern instanceof ObjectIncluding) {\n    unknownKeysAllowed = true;\n    pattern = pattern.pattern;\n  }\n  if (pattern instanceof ObjectWithValues) {\n    unknownKeysAllowed = true;\n    unknownKeyPattern = [pattern.pattern];\n    pattern = {}; // no required keys\n  }\n  if (typeof pattern !== 'object') {\n    return {\n      message: 'Bad pattern: unknown pattern type',\n      path: ''\n    };\n  }\n\n  // An object, with required and optional keys. Note that this does NOT do\n  // structural matches against objects of special types that happen to match\n  // the pattern: this really needs to be a plain old {Object}!\n  if (typeof value !== 'object') {\n    return {\n      message: \"Expected object, got \".concat(typeof value),\n      path: ''\n    };\n  }\n  if (value === null) {\n    return {\n      message: \"Expected object, got null\",\n      path: ''\n    };\n  }\n  if (!isPlainObject(value)) {\n    return {\n      message: \"Expected plain object\",\n      path: ''\n    };\n  }\n  const requiredPatterns = Object.create(null);\n  const optionalPatterns = Object.create(null);\n  Object.keys(pattern).forEach(key => {\n    const subPattern = pattern[key];\n    if (subPattern instanceof Optional || subPattern instanceof Maybe) {\n      optionalPatterns[key] = subPattern.pattern;\n    } else {\n      requiredPatterns[key] = subPattern;\n    }\n  });\n  for (let key in Object(value)) {\n    const subValue = value[key];\n    if (hasOwn.call(requiredPatterns, key)) {\n      const result = testSubtree(subValue, requiredPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n      delete requiredPatterns[key];\n    } else if (hasOwn.call(optionalPatterns, key)) {\n      const result = testSubtree(subValue, optionalPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n    } else {\n      if (!unknownKeysAllowed) {\n        return {\n          message: 'Unknown key',\n          path: key\n        };\n      }\n      if (unknownKeyPattern) {\n        const result = testSubtree(subValue, unknownKeyPattern[0]);\n        if (result) {\n          result.path = _prependPath(key, result.path);\n          return result;\n        }\n      }\n    }\n  }\n  const keys = Object.keys(requiredPatterns);\n  if (keys.length) {\n    return {\n      message: \"Missing key '\".concat(keys[0], \"'\"),\n      path: ''\n    };\n  }\n};\nclass ArgumentChecker {\n  constructor(args, description) {\n    // Make a SHALLOW copy of the arguments. (We'll be doing identity checks\n    // against its contents.)\n    this.args = [...args];\n\n    // Since the common case will be to check arguments in order, and we splice\n    // out arguments when we check them, make it so we splice out from the end\n    // rather than the beginning.\n    this.args.reverse();\n    this.description = description;\n  }\n  checking(value) {\n    if (this._checkingOneValue(value)) {\n      return;\n    }\n\n    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])\n    // or check([foo, bar], [String]) to count... but only if value wasn't\n    // itself an argument.\n    if (Array.isArray(value) || isArguments(value)) {\n      Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));\n    }\n  }\n  _checkingOneValue(value) {\n    for (let i = 0; i < this.args.length; ++i) {\n      // Is this value one of the arguments? (This can have a false positive if\n      // the argument is an interned primitive, but it's still a good enough\n      // check.)\n      // (NaN is not === to itself, so we have to check specially.)\n      if (value === this.args[i] || Number.isNaN(value) && Number.isNaN(this.args[i])) {\n        this.args.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n  throwUnlessAllArgumentsHaveBeenChecked() {\n    if (this.args.length > 0) throw new Error(\"Did not check() all arguments during \".concat(this.description));\n  }\n}\nconst _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case', 'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with', 'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield', 'delete', 'export', 'import', 'public', 'return', 'static', 'switch', 'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue', 'debugger', 'function', 'arguments', 'interface', 'protected', 'implements', 'instanceof'];\n\n// Assumes the base of path is already escaped properly\n// returns key + base\nconst _prependPath = (key, base) => {\n  if (typeof key === 'number' || key.match(/^[0-9]+$/)) {\n    key = \"[\".concat(key, \"]\");\n  } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) || _jsKeywords.indexOf(key) >= 0) {\n    key = JSON.stringify([key]);\n  }\n  if (base && base[0] !== '[') {\n    return \"\".concat(key, \".\").concat(base);\n  }\n  return key + base;\n};\nconst isObject = value => typeof value === 'object' && value !== null;\nconst baseIsArguments = item => isObject(item) && Object.prototype.toString.call(item) === '[object Arguments]';\nconst isArguments = baseIsArguments(function () {\n  return arguments;\n}()) ? baseIsArguments : value => isObject(value) && typeof value.callee === 'function';\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"isPlainObject.js\":function module(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                               //\n// packages/check/isPlainObject.js                                                                               //\n//                                                                                                               //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                 //\nmodule.export({\n  isPlainObject: () => isPlainObject\n});\n// Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.\n\nconst class2type = {};\nconst toString = class2type.toString;\nconst hasOwn = Object.prototype.hasOwnProperty;\nconst fnToString = hasOwn.toString;\nconst ObjectFunctionString = fnToString.call(Object);\nconst getProto = Object.getPrototypeOf;\nconst isPlainObject = obj => {\n  let proto;\n  let Ctor;\n\n  // Detect obvious negatives\n  // Use toString instead of jQuery.type to catch host objects\n  if (!obj || toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n  proto = getProto(obj);\n\n  // Objects with no prototype (e.g., `Object.create( null )`) are plain\n  if (!proto) {\n    return true;\n  }\n\n  // Objects with prototype are plain iff they were constructed by a global Object function\n  Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor === 'function' && fnToString.call(Ctor) === ObjectFunctionString;\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/check/match.js\");\n\n/* Exports */\nPackage._define(\"check\", exports, {\n  check: check,\n  Match: Match\n});\n\n})();\n","servePath":"/packages/check.js","sourceMap":{"version":3,"sources":["packages/check/match.js","packages/check/isPlainObject.js"],"names":["module","export","check","Match","isPlainObject","link","v","currentArgumentChecker","Meteor","EnvironmentVariable","hasOwn","Object","prototype","hasOwnProperty","value","pattern","argChecker","getOrNullIfOutsideFiber","checking","result","testSubtree","err","Error","message","path","concat","Optional","Maybe","OneOf","_len","arguments","length","args","Array","_key","Any","Where","condition","ObjectIncluding","ObjectWithValues","Integer","makeErrorType","msg","sanitizedError","test","_failIfArgumentsAreNotAllChecked","f","context","description","ArgumentChecker","withValue","apply","throwUnlessAllArgumentsHaveBeenChecked","constructor","choices","stringForErrorMessage","options","undefined","onlyShowType","EJSON","stringify","JSON","stringifyError","name","typeofChecks","String","Number","Boolean","Function","i","isArray","isArguments","_prependPath","unknownKeysAllowed","unknownKeyPattern","requiredPatterns","create","optionalPatterns","keys","forEach","key","subPattern","subValue","call","reverse","_checkingOneValue","bind","isNaN","splice","_jsKeywords","base","match","indexOf","isObject","baseIsArguments","item","toString","callee","class2type","fnToString","ObjectFunctionString","getProto","getPrototypeOf","obj","proto","Ctor"],"mappings":"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","file":"/packages/check.js","sourcesContent":["// XXX docs\nimport { isPlainObject } from './isPlainObject';\n\n// Things we explicitly do NOT support:\n//    - heterogenous arrays\n\nconst currentArgumentChecker = new Meteor.EnvironmentVariable;\nconst hasOwn = Object.prototype.hasOwnProperty;\n\n/**\n * @summary Check that a value matches a [pattern](#matchpatterns).\n * If the value does not match the pattern, throw a `Match.Error`.\n *\n * Particularly useful to assert that arguments to a function have the right\n * types and structure.\n * @locus Anywhere\n * @param {Any} value The value to check\n * @param {MatchPattern} pattern The pattern to match `value` against\n */\nexport function check(value, pattern) {\n  // Record that check got called, if somebody cared.\n  //\n  // We use getOrNullIfOutsideFiber so that it's OK to call check()\n  // from non-Fiber server contexts; the downside is that if you forget to\n  // bindEnvironment on some random callback in your method/publisher,\n  // it might not find the argumentChecker and you'll get an error about\n  // not checking an argument that it looks like you're checking (instead\n  // of just getting a \"Node code must run in a Fiber\" error).\n  const argChecker = currentArgumentChecker.getOrNullIfOutsideFiber();\n  if (argChecker) {\n    argChecker.checking(value);\n  }\n\n  const result = testSubtree(value, pattern);\n  if (result) {\n    const err = new Match.Error(result.message);\n    if (result.path) {\n      err.message += ` in field ${result.path}`;\n      err.path = result.path;\n    }\n\n    throw err;\n  }\n};\n\n/**\n * @namespace Match\n * @summary The namespace for all Match types and methods.\n */\nexport const Match = {\n  Optional: function(pattern) {\n    return new Optional(pattern);\n  },\n\n  Maybe: function(pattern) {\n    return new Maybe(pattern);\n  },\n\n  OneOf: function(...args) {\n    return new OneOf(args);\n  },\n\n  Any: ['__any__'],\n  Where: function(condition) {\n    return new Where(condition);\n  },\n\n  ObjectIncluding: function(pattern) {\n    return new ObjectIncluding(pattern)\n  },\n\n  ObjectWithValues: function(pattern) {\n    return new ObjectWithValues(pattern);\n  },\n\n  // Matches only signed 32-bit integers\n  Integer: ['__integer__'],\n\n  // XXX matchers should know how to describe themselves for errors\n  Error: Meteor.makeErrorType('Match.Error', function (msg) {\n    this.message = `Match error: ${msg}`;\n\n    // The path of the value that failed to match. Initially empty, this gets\n    // populated by catching and rethrowing the exception as it goes back up the\n    // stack.\n    // E.g.: \"vals[3].entity.created\"\n    this.path = '';\n\n    // If this gets sent over DDP, don't give full internal details but at least\n    // provide something better than 500 Internal server error.\n    this.sanitizedError = new Meteor.Error(400, 'Match failed');\n  }),\n\n  // Tests to see if value matches pattern. Unlike check, it merely returns true\n  // or false (unless an error other than Match.Error was thrown). It does not\n  // interact with _failIfArgumentsAreNotAllChecked.\n  // XXX maybe also implement a Match.match which returns more information about\n  //     failures but without using exception handling or doing what check()\n  //     does with _failIfArgumentsAreNotAllChecked and Meteor.Error conversion\n\n  /**\n   * @summary Returns true if the value matches the pattern.\n   * @locus Anywhere\n   * @param {Any} value The value to check\n   * @param {MatchPattern} pattern The pattern to match `value` against\n   */\n  test(value, pattern) {\n    return !testSubtree(value, pattern);\n  },\n\n  // Runs `f.apply(context, args)`. If check() is not called on every element of\n  // `args` (either directly or in the first level of an array), throws an error\n  // (using `description` in the message).\n  _failIfArgumentsAreNotAllChecked(f, context, args, description) {\n    const argChecker = new ArgumentChecker(args, description);\n    const result = currentArgumentChecker.withValue(\n      argChecker,\n      () => f.apply(context, args)\n    );\n\n    // If f didn't itself throw, make sure it checked all of its arguments.\n    argChecker.throwUnlessAllArgumentsHaveBeenChecked();\n    return result;\n  }\n};\n\nclass Optional {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nclass Maybe {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nclass OneOf {\n  constructor(choices) {\n    if (!choices || choices.length === 0) {\n      throw new Error('Must provide at least one choice to Match.OneOf');\n    }\n\n    this.choices = choices;\n  }\n}\n\nclass Where {\n  constructor(condition) {\n    this.condition = condition;\n  }\n}\n\nclass ObjectIncluding {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nclass ObjectWithValues {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n}\n\nconst stringForErrorMessage = (value, options = {}) => {\n  if ( value === null ) {\n    return 'null';\n  }\n\n  if ( options.onlyShowType ) {\n    return typeof value;\n  }\n\n  // Your average non-object things.  Saves from doing the try/catch below for.\n  if ( typeof value !== 'object' ) {\n    return EJSON.stringify(value)\n  }\n\n  try {\n\n    // Find objects with circular references since EJSON doesn't support them yet (Issue #4778 + Unaccepted PR)\n    // If the native stringify is going to choke, EJSON.stringify is going to choke too.\n    JSON.stringify(value);\n  } catch (stringifyError) {\n    if ( stringifyError.name === 'TypeError' ) {\n      return typeof value;\n    }\n  }\n\n  return EJSON.stringify(value);\n};\n\nconst typeofChecks = [\n  [String, 'string'],\n  [Number, 'number'],\n  [Boolean, 'boolean'],\n\n  // While we don't allow undefined/function in EJSON, this is good for optional\n  // arguments with OneOf.\n  [Function, 'function'],\n  [undefined, 'undefined'],\n];\n\n// Return `false` if it matches. Otherwise, return an object with a `message` and a `path` field.\nconst testSubtree = (value, pattern) => {\n\n  // Match anything!\n  if (pattern === Match.Any) {\n    return false;\n  }\n\n  // Basic atomic types.\n  // Do not match boxed objects (e.g. String, Boolean)\n  for (let i = 0; i < typeofChecks.length; ++i) {\n    if (pattern === typeofChecks[i][0]) {\n      if (typeof value === typeofChecks[i][1]) {\n        return false;\n      }\n\n      return {\n        message: `Expected ${typeofChecks[i][1]}, got ${stringForErrorMessage(value, { onlyShowType: true })}`,\n        path: '',\n      };\n    }\n  }\n\n  if (pattern === null) {\n    if (value === null) {\n      return false;\n    }\n\n    return {\n      message: `Expected null, got ${stringForErrorMessage(value)}`,\n      path: '',\n    };\n  }\n\n  // Strings, numbers, and booleans match literally. Goes well with Match.OneOf.\n  if (typeof pattern === 'string' || typeof pattern === 'number' || typeof pattern === 'boolean') {\n    if (value === pattern) {\n      return false;\n    }\n\n    return {\n      message: `Expected ${pattern}, got ${stringForErrorMessage(value)}`,\n      path: '',\n    };\n  }\n\n  // Match.Integer is special type encoded with array\n  if (pattern === Match.Integer) {\n\n    // There is no consistent and reliable way to check if variable is a 64-bit\n    // integer. One of the popular solutions is to get reminder of division by 1\n    // but this method fails on really large floats with big precision.\n    // E.g.: 1.348192308491824e+23 % 1 === 0 in V8\n    // Bitwise operators work consistantly but always cast variable to 32-bit\n    // signed integer according to JavaScript specs.\n    if (typeof value === 'number' && (value | 0) === value) {\n      return false;\n    }\n\n    return {\n      message: `Expected Integer, got ${stringForErrorMessage(value)}`,\n      path: '',\n    };\n  }\n\n  // 'Object' is shorthand for Match.ObjectIncluding({});\n  if (pattern === Object) {\n    pattern = Match.ObjectIncluding({});\n  }\n\n  // Array (checked AFTER Any, which is implemented as an Array).\n  if (pattern instanceof Array) {\n    if (pattern.length !== 1) {\n      return {\n        message: `Bad pattern: arrays must have one type element ${stringForErrorMessage(pattern)}`,\n        path: '',\n      };\n    }\n\n    if (!Array.isArray(value) && !isArguments(value)) {\n      return {\n        message: `Expected array, got ${stringForErrorMessage(value)}`,\n        path: '',\n      };\n    }\n\n    for (let i = 0, length = value.length; i < length; i++) {\n      const result = testSubtree(value[i], pattern[0]);\n      if (result) {\n        result.path = _prependPath(i, result.path);\n        return result;\n      }\n    }\n\n    return false;\n  }\n\n  // Arbitrary validation checks. The condition can return false or throw a\n  // Match.Error (ie, it can internally use check()) to fail.\n  if (pattern instanceof Where) {\n    let result;\n    try {\n      result = pattern.condition(value);\n    } catch (err) {\n      if (!(err instanceof Match.Error)) {\n        throw err;\n      }\n\n      return {\n        message: err.message,\n        path: err.path\n      };\n    }\n\n    if (result) {\n      return false;\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.Where validation',\n      path: '',\n    };\n  }\n\n  if (pattern instanceof Maybe) {\n    pattern = Match.OneOf(undefined, null, pattern.pattern);\n  } else if (pattern instanceof Optional) {\n    pattern = Match.OneOf(undefined, pattern.pattern);\n  }\n\n  if (pattern instanceof OneOf) {\n    for (let i = 0; i < pattern.choices.length; ++i) {\n      const result = testSubtree(value, pattern.choices[i]);\n      if (!result) {\n\n        // No error? Yay, return.\n        return false;\n      }\n\n      // Match errors just mean try another choice.\n    }\n\n    // XXX this error is terrible\n    return {\n      message: 'Failed Match.OneOf, Match.Maybe or Match.Optional validation',\n      path: '',\n    };\n  }\n\n  // A function that isn't something we special-case is assumed to be a\n  // constructor.\n  if (pattern instanceof Function) {\n    if (value instanceof pattern) {\n      return false;\n    }\n\n    return {\n      message: `Expected ${pattern.name || 'particular constructor'}`,\n      path: '',\n    };\n  }\n\n  let unknownKeysAllowed = false;\n  let unknownKeyPattern;\n  if (pattern instanceof ObjectIncluding) {\n    unknownKeysAllowed = true;\n    pattern = pattern.pattern;\n  }\n\n  if (pattern instanceof ObjectWithValues) {\n    unknownKeysAllowed = true;\n    unknownKeyPattern = [pattern.pattern];\n    pattern = {};  // no required keys\n  }\n\n  if (typeof pattern !== 'object') {\n    return {\n      message: 'Bad pattern: unknown pattern type',\n      path: '',\n    };\n  }\n\n  // An object, with required and optional keys. Note that this does NOT do\n  // structural matches against objects of special types that happen to match\n  // the pattern: this really needs to be a plain old {Object}!\n  if (typeof value !== 'object') {\n    return {\n      message: `Expected object, got ${typeof value}`,\n      path: '',\n    };\n  }\n\n  if (value === null) {\n    return {\n      message: `Expected object, got null`,\n      path: '',\n    };\n  }\n\n  if (! isPlainObject(value)) {\n    return {\n      message: `Expected plain object`,\n      path: '',\n    };\n  }\n\n  const requiredPatterns = Object.create(null);\n  const optionalPatterns = Object.create(null);\n\n  Object.keys(pattern).forEach(key => {\n    const subPattern = pattern[key];\n    if (subPattern instanceof Optional ||\n        subPattern instanceof Maybe) {\n      optionalPatterns[key] = subPattern.pattern;\n    } else {\n      requiredPatterns[key] = subPattern;\n    }\n  });\n\n  for (let key in Object(value)) {\n    const subValue = value[key];\n    if (hasOwn.call(requiredPatterns, key)) {\n      const result = testSubtree(subValue, requiredPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n\n      delete requiredPatterns[key];\n    } else if (hasOwn.call(optionalPatterns, key)) {\n      const result = testSubtree(subValue, optionalPatterns[key]);\n      if (result) {\n        result.path = _prependPath(key, result.path);\n        return result;\n      }\n\n    } else {\n      if (!unknownKeysAllowed) {\n        return {\n          message: 'Unknown key',\n          path: key,\n        };\n      }\n\n      if (unknownKeyPattern) {\n        const result = testSubtree(subValue, unknownKeyPattern[0]);\n        if (result) {\n          result.path = _prependPath(key, result.path);\n          return result;\n        }\n      }\n    }\n  }\n\n  const keys = Object.keys(requiredPatterns);\n  if (keys.length) {\n    return {\n      message: `Missing key '${keys[0]}'`,\n      path: '',\n    };\n  }\n};\n\nclass ArgumentChecker {\n  constructor (args, description) {\n\n    // Make a SHALLOW copy of the arguments. (We'll be doing identity checks\n    // against its contents.)\n    this.args = [...args];\n\n    // Since the common case will be to check arguments in order, and we splice\n    // out arguments when we check them, make it so we splice out from the end\n    // rather than the beginning.\n    this.args.reverse();\n    this.description = description;\n  }\n\n  checking(value) {\n    if (this._checkingOneValue(value)) {\n      return;\n    }\n\n    // Allow check(arguments, [String]) or check(arguments.slice(1), [String])\n    // or check([foo, bar], [String]) to count... but only if value wasn't\n    // itself an argument.\n    if (Array.isArray(value) || isArguments(value)) {\n      Array.prototype.forEach.call(value, this._checkingOneValue.bind(this));\n    }\n  }\n\n  _checkingOneValue(value) {\n    for (let i = 0; i < this.args.length; ++i) {\n\n      // Is this value one of the arguments? (This can have a false positive if\n      // the argument is an interned primitive, but it's still a good enough\n      // check.)\n      // (NaN is not === to itself, so we have to check specially.)\n      if (value === this.args[i] ||\n          (Number.isNaN(value) && Number.isNaN(this.args[i]))) {\n        this.args.splice(i, 1);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  throwUnlessAllArgumentsHaveBeenChecked() {\n    if (this.args.length > 0)\n      throw new Error(`Did not check() all arguments during ${this.description}`);\n  }\n}\n\nconst _jsKeywords = ['do', 'if', 'in', 'for', 'let', 'new', 'try', 'var', 'case',\n  'else', 'enum', 'eval', 'false', 'null', 'this', 'true', 'void', 'with',\n  'break', 'catch', 'class', 'const', 'super', 'throw', 'while', 'yield',\n  'delete', 'export', 'import', 'public', 'return', 'static', 'switch',\n  'typeof', 'default', 'extends', 'finally', 'package', 'private', 'continue',\n  'debugger', 'function', 'arguments', 'interface', 'protected', 'implements',\n  'instanceof'];\n\n// Assumes the base of path is already escaped properly\n// returns key + base\nconst _prependPath = (key, base) => {\n  if ((typeof key) === 'number' || key.match(/^[0-9]+$/)) {\n    key = `[${key}]`;\n  } else if (!key.match(/^[a-z_$][0-9a-z_$]*$/i) ||\n             _jsKeywords.indexOf(key) >= 0) {\n    key = JSON.stringify([key]);\n  }\n\n  if (base && base[0] !== '[') {\n    return `${key}.${base}`;\n  }\n\n  return key + base;\n}\n\nconst isObject = value => typeof value === 'object' && value !== null;\n\nconst baseIsArguments = item =>\n  isObject(item) &&\n  Object.prototype.toString.call(item) === '[object Arguments]';\n\nconst isArguments = baseIsArguments(function() { return arguments; }()) ?\n  baseIsArguments :\n  value => isObject(value) && typeof value.callee === 'function';\n","// Copy of jQuery.isPlainObject for the server side from jQuery v3.1.1.\n\nconst class2type = {};\n\nconst toString = class2type.toString;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst fnToString = hasOwn.toString;\n\nconst ObjectFunctionString = fnToString.call(Object);\n\nconst getProto = Object.getPrototypeOf;\n\nexport const isPlainObject = obj => {\n  let proto;\n  let Ctor;\n\n  // Detect obvious negatives\n  // Use toString instead of jQuery.type to catch host objects\n  if (!obj || toString.call(obj) !== '[object Object]') {\n    return false;\n  }\n\n  proto = getProto(obj);\n\n  // Objects with no prototype (e.g., `Object.create( null )`) are plain\n  if (!proto) {\n    return true;\n  }\n\n  // Objects with prototype are plain iff they were constructed by a global Object function\n  Ctor = hasOwn.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor === 'function' && \n    fnToString.call(Ctor) === ObjectFunctionString;\n};\n"]}}]