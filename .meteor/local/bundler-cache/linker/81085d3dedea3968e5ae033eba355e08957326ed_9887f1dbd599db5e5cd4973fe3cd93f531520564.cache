[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package.modules.meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar IdMap;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"id-map\":{\"id-map.js\":function module(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                            //\n// packages/id-map/id-map.js                                                                                  //\n//                                                                                                            //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                              //\nvar _createForOfIteratorHelperLoose;\nmodule.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n  default: function (v) {\n    _createForOfIteratorHelperLoose = v;\n  }\n}, 0);\nvar _slicedToArray;\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 1);\nmodule.export({\n  IdMap: function () {\n    return IdMap;\n  }\n});\nvar IdMap = /*#__PURE__*/function () {\n  function IdMap(idStringify, idParse) {\n    this._map = new Map();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n  // Some of these methods are designed to match methods on OrderedDict, since\n  // (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n  // (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n  // set of methods that overlap between the two.)\n  var _proto = IdMap.prototype;\n  _proto.get = function () {\n    function get(id) {\n      var key = this._idStringify(id);\n      return this._map.get(key);\n    }\n    return get;\n  }();\n  _proto.set = function () {\n    function set(id, value) {\n      var key = this._idStringify(id);\n      this._map.set(key, value);\n    }\n    return set;\n  }();\n  _proto.remove = function () {\n    function remove(id) {\n      var key = this._idStringify(id);\n      this._map.delete(key);\n    }\n    return remove;\n  }();\n  _proto.has = function () {\n    function has(id) {\n      var key = this._idStringify(id);\n      return this._map.has(key);\n    }\n    return has;\n  }();\n  _proto.empty = function () {\n    function empty() {\n      return this._map.size === 0;\n    }\n    return empty;\n  }();\n  _proto.clear = function () {\n    function clear() {\n      this._map.clear();\n    }\n    return clear;\n  }() // Iterates over the items in the map. Return `false` to break the loop.\n  ;\n  _proto.forEach = function () {\n    function forEach(iterator) {\n      // don't use _.each, because we can't break out of it.\n      for (var _iterator = _createForOfIteratorHelperLoose(this._map), _step; !(_step = _iterator()).done;) {\n        var _ref = _step.value;\n        var _ref2 = _slicedToArray(_ref, 2);\n        var key = _ref2[0];\n        var value = _ref2[1];\n        var breakIfFalse = iterator.call(null, value, this._idParse(key));\n        if (breakIfFalse === false) {\n          return;\n        }\n      }\n    }\n    return forEach;\n  }();\n  _proto.size = function () {\n    function size() {\n      return this._map.size;\n    }\n    return size;\n  }();\n  _proto.setDefault = function () {\n    function setDefault(id, def) {\n      var key = this._idStringify(id);\n      if (this._map.has(key)) {\n        return this._map.get(key);\n      }\n      this._map.set(key, def);\n      return def;\n    }\n    return setDefault;\n  }() // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  ;\n  _proto.clone = function () {\n    function clone() {\n      var clone = new IdMap(this._idStringify, this._idParse);\n      // copy directly to avoid stringify/parse overhead\n      this._map.forEach(function (value, key) {\n        clone._map.set(key, EJSON.clone(value));\n      });\n      return clone;\n    }\n    return clone;\n  }();\n  return IdMap;\n}();\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\n\nvar exports = require(\"/node_modules/meteor/id-map/id-map.js\");\n\n/* Exports */\nPackage._define(\"id-map\", exports, {\n  IdMap: IdMap\n});\n\n})();\n","servePath":"/packages/id-map.js","sourceMap":{"version":3,"sources":["packages/id-map/id-map.js"],"names":["_createForOfIteratorHelperLoose","module","link","default","v","_slicedToArray","export","IdMap","idStringify","idParse","_map","Map","_idStringify","JSON","stringify","_idParse","parse","_proto","prototype","get","id","key","set","value","remove","delete","has","empty","size","clear","forEach","iterator","_iterator","_step","done","_ref","_ref2","breakIfFalse","call","setDefault","def","clone","EJSON"],"mappings":"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","file":"/packages/id-map.js","sourcesContent":["\nexport class IdMap {\n  constructor(idStringify, idParse) {\n    this._map = new Map();\n    this._idStringify = idStringify || JSON.stringify;\n    this._idParse = idParse || JSON.parse;\n  }\n\n// Some of these methods are designed to match methods on OrderedDict, since\n// (eg) ObserveMultiplex and _CachingChangeObserver use them interchangeably.\n// (Conceivably, this should be replaced with \"UnorderedDict\" with a specific\n// set of methods that overlap between the two.)\n\n  get(id) {\n    const key = this._idStringify(id);\n    return this._map.get(key);\n  }\n\n  set(id, value) {\n    const key = this._idStringify(id);\n    this._map.set(key, value);\n  }\n\n  remove(id) {\n    const key = this._idStringify(id);\n    this._map.delete(key);\n  }\n\n  has(id) {\n    const key = this._idStringify(id);\n    return this._map.has(key);\n  }\n\n  empty() {\n    return this._map.size === 0;\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n  // Iterates over the items in the map. Return `false` to break the loop.\n  forEach(iterator) {\n    // don't use _.each, because we can't break out of it.\n    for (let [key, value] of this._map){\n      const breakIfFalse = iterator.call(\n        null,\n        value,\n        this._idParse(key)\n      );\n      if (breakIfFalse === false) {\n        return;\n      }\n    }\n  }\n\n  size() {\n    return this._map.size;\n  }\n\n  setDefault(id, def) {\n    const key = this._idStringify(id);\n    if (this._map.has(key)) {\n      return this._map.get(key);\n    }\n    this._map.set(key, def);\n    return def;\n  }\n\n  // Assumes that values are EJSON-cloneable, and that we don't need to clone\n  // IDs (ie, that nobody is going to mutate an ObjectId).\n  clone() {\n    const clone = new IdMap(this._idStringify, this._idParse);\n    // copy directly to avoid stringify/parse overhead\n    this._map.forEach(function(value, key){\n      clone._map.set(key, EJSON.clone(value));\n    });\n    return clone;\n  }\n}\n"]}}]