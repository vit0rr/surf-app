{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minifier-css/minifier.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/minifier-css/minifier.js","filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minifier-css/minifier.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/styles","root":"/Users/nicholas/Desktop/projects/local-legends/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minifier-css/minifier.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minifier-css/minifier.js"}},"code":"!function (module1) {\n  module1.export({\n    CssTools: () => CssTools\n  });\n  let path;\n  module1.link(\"path\", {\n    default(v) {\n      path = v;\n    }\n  }, 0);\n  let url;\n  module1.link(\"url\", {\n    default(v) {\n      url = v;\n    }\n  }, 1);\n  let postcss;\n  module1.link(\"postcss\", {\n    default(v) {\n      postcss = v;\n    }\n  }, 2);\n  let cssnano;\n  module1.link(\"cssnano\", {\n    default(v) {\n      cssnano = v;\n    }\n  }, 3);\n  const CssTools = {\n    /**\n     * Parse the incoming CSS string; return a CSS AST.\n     *\n     * @param {string} cssText The CSS string to be parsed.\n     * @param {Object} options Options to pass to the PostCSS parser.\n     * @return {postcss#Root} PostCSS Root AST.\n     */\n    parseCss(cssText) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // This function previously used the `css-parse` npm package, which\n      // set the name of the css file being parsed using  { source: 'filename' }.\n      // If included, we'll convert this to the `postcss` equivalent, to maintain\n      // backwards compatibility.\n      if (options.source) {\n        options.from = options.source;\n        delete options.source;\n      }\n      return postcss.parse(cssText, options);\n    },\n    /**\n     * Using the incoming CSS AST, create and return a new object with the\n     * generated CSS string, and optional sourcemap details.\n     *\n     * @param {postcss#Root} cssAst PostCSS Root AST.\n     * @param {Object} options Options to pass to the PostCSS parser.\n     * @return {Object} Format: { code: 'css string', map: 'sourcemap deatils' }.\n     */\n    stringifyCss(cssAst) {\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // This function previously used the `css-stringify` npm package, which\n      // controlled sourcemap generation by passing in { sourcemap: true }.\n      // If included, we'll convert this to the `postcss` equivalent, to maintain\n      // backwards compatibility.\n      if (options.sourcemap) {\n        options.map = {\n          inline: false,\n          annotation: false,\n          sourcesContent: false\n        };\n        delete options.sourcemap;\n      }\n      // explicitly set from to undefined to prevent postcss warnings\n      if (!options.from) {\n        options.from = void 0;\n      }\n      transformResult = cssAst.toResult(options);\n      return {\n        code: transformResult.css,\n        map: transformResult.map ? transformResult.map.toJSON() : null\n      };\n    },\n    /**\n     * Minify the passed in CSS string.\n     *\n     * @param {string} cssText CSS string to minify.\n     * @return {String[]} Array containing the minified CSS.\n     */\n    minifyCss(cssText) {\n      return Promise.await(CssTools.minifyCssAsync(cssText));\n    },\n    /**\n     * Minify the passed in CSS string.\n     *\n     * @param {string} cssText CSS string to minify.\n     * @return {Promise<String[]>} Array containing the minified CSS.\n     */\n    minifyCssAsync(cssText) {\n      return Promise.asyncApply(() => {\n        return Promise.await(postcss([cssnano({\n          safe: true\n        })]).process(cssText, {\n          from: void 0\n        }).then(result => [result.css]));\n      });\n    },\n    /**\n     * Merge multiple CSS AST's into one.\n     *\n     * @param {postcss#Root[]} cssAsts Array of PostCSS Root objects.\n     * @callback warnCb Callback used to handle warning messages.\n     * @return {postcss#Root} PostCSS Root object.\n     */\n    mergeCssAsts(cssAsts, warnCb) {\n      const rulesPredicate = function (rules) {\n        let exclude = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        if (!Array.isArray(rules)) {\n          rules = [rules];\n        }\n        return node => {\n          // PostCSS AtRule nodes have `type: 'atrule'` and a descriptive name,\n          // e.g. 'import' or 'charset', while Comment nodes have type only.\n          const nodeMatchesRule = rules.includes(node.name || node.type);\n          return exclude ? !nodeMatchesRule : nodeMatchesRule;\n        };\n      };\n\n      // Simple concatenation of CSS files would break @import rules\n      // located in the beginning of a file. Before concatenation, pull\n      // @import rules to the beginning of a new syntax tree so they always\n      // precede other rules.\n      const newAst = postcss.root();\n      cssAsts.forEach(ast => {\n        if (ast.nodes) {\n          // Pick only the imports from the beginning of file ignoring @charset\n          // rules as every file is assumed to be in UTF-8.\n          const charsetRules = ast.nodes.filter(rulesPredicate('charset'));\n          if (charsetRules.some(rule => {\n            // According to MDN, only 'UTF-8' and \"UTF-8\" are the correct\n            // encoding directives representing UTF-8.\n            return !/^(['\"])UTF-8\\1$/.test(rule.params);\n          })) {\n            warnCb(ast.filename, '@charset rules in this file will be ignored as UTF-8 is the ' + 'only encoding supported');\n          }\n          ast.nodes = ast.nodes.filter(rulesPredicate('charset', true));\n          let importCount = 0;\n          for (let i = 0; i < ast.nodes.length; i++) {\n            if (!rulesPredicate(['import', 'comment'])(ast.nodes[i])) {\n              importCount = i;\n              break;\n            }\n          }\n          CssTools.rewriteCssUrls(ast);\n          const imports = ast.nodes.splice(0, importCount);\n          newAst.nodes.push(...imports);\n\n          // If there are imports left in the middle of a file, warn users as it\n          // might be a potential bug (imports are only valid at the beginning of\n          // a file).\n          if (ast.nodes.some(rulesPredicate('import'))) {\n            warnCb(ast.filename, 'There are some @import rules in the middle of a file. This ' + 'might be a bug, as imports are only valid at the beginning of ' + 'a file.');\n          }\n        }\n      });\n\n      // Now we can put the rest of CSS rules into new AST.\n      cssAsts.forEach(ast => {\n        if (ast.nodes) {\n          newAst.nodes.push(...ast.nodes);\n        }\n      });\n      return newAst;\n    },\n    /**\n     * We are looking for all relative urls defined with the `url()` functional\n     * notation and rewriting them to the equivalent absolute url using the\n     * `source` path provided by postcss. For performance reasons this function\n     * acts by side effect by modifying the given AST without doing a deep copy.\n     *\n     * @param {postcss#Root} ast PostCSS Root object.\n     * @return Modifies the ast param in place.\n     */\n    rewriteCssUrls(ast) {\n      const mergedCssPath = '/';\n      rewriteRules(ast.nodes, mergedCssPath);\n    }\n  };\n  if (typeof Profile !== 'undefined') {\n    ['parseCss', 'stringifyCss', 'minifyCss', 'minifyCssAsync', 'mergeCssAsts', 'rewriteCssUrls'].forEach(funcName => {\n      CssTools[funcName] = Profile(\"CssTools.\".concat(funcName), CssTools[funcName]);\n    });\n  }\n  const hasOwn = Object.prototype.hasOwnProperty;\n  const rewriteRules = (rules, mergedCssPath) => {\n    rules.forEach(rule => {\n      // Recurse if there are sub-rules. An example:\n      //     @media (...) {\n      //         .rule { url(...); }\n      //     }\n      if (hasOwn.call(rule, 'nodes')) {\n        rewriteRules(rule.nodes, mergedCssPath);\n      }\n      const appDir = process.cwd();\n      const sourceFile = rule.source.input.file;\n      const sourceFileFromAppRoot = sourceFile ? sourceFile.replace(appDir, '') : '';\n      let basePath = pathJoin('/', pathDirname(sourceFileFromAppRoot));\n\n      // Set the correct basePath based on how the linked asset will be served.\n      // XXX This is wrong. We are coupling the information about how files will\n      // be served by the web server to the information how they were stored\n      // originally on the filesystem in the project structure. Ideally, there\n      // should be some module that tells us precisely how each asset will be\n      // served but for now we are just assuming that everything that comes from\n      // a folder starting with \"/packages/\" is served on the same path as\n      // it was on the filesystem and everything else is served on root \"/\".\n      if (!basePath.match(/^\\/?packages\\//i)) {\n        basePath = \"/\";\n      }\n      let value = rule.value;\n\n      // Match css values containing some functional calls to `url(URI)` where\n      // URI is optionally quoted.\n      // Note that a css value can contains other elements, for instance:\n      //   background: top center url(\"background.png\") black;\n      // or even multiple url(), for instance for multiple backgrounds.\n      var cssUrlRegex = /url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/gi;\n      let parts;\n      while (parts = cssUrlRegex.exec(value)) {\n        const oldCssUrl = parts[0];\n        const quote = parts[1];\n        const resource = url.parse(parts[2]);\n\n        // We don't rewrite URLs starting with a protocol definition such as\n        // http, https, or data, or those with network-path references\n        // i.e. //img.domain.com/cat.gif\n        if (resource.protocol !== null || resource.href.startsWith('//') || resource.href.startsWith('#')) {\n          continue;\n        }\n\n        // Rewrite relative paths (that refers to the internal application tree)\n        // to absolute paths (addressable from the public build).\n        let absolutePath = isRelative(resource.path) ? pathJoin(basePath, resource.path) : resource.path;\n        if (resource.hash) {\n          absolutePath += resource.hash;\n        }\n\n        // We used to finish the rewriting process at the absolute path step\n        // above. But it didn't work in case the Meteor application was deployed\n        // under a sub-path (eg `ROOT_URL=http://localhost:3000/myapp meteor`)\n        // in which case the resources linked in the merged CSS file would miss\n        // the `myapp/` prefix. Since this path prefix is only known at launch\n        // time (rather than build time) we can't use absolute paths to link\n        // resources in the generated CSS.\n        //\n        // Instead we transform absolute paths to make them relative to the\n        // merged CSS, leaving to the browser the responsibility to calculate\n        // the final resource links (by adding the application deployment\n        // prefix, here `myapp/`, if applicable).\n        const relativeToMergedCss = pathRelative(mergedCssPath, absolutePath);\n        const newCssUrl = \"url(\".concat(quote).concat(relativeToMergedCss).concat(quote, \")\");\n        value = value.replace(oldCssUrl, newCssUrl);\n      }\n      rule.value = value;\n    });\n  };\n  const isRelative = path => path && path.charAt(0) !== '/';\n\n  // These are duplicates of functions in tools/files.js, because we don't have\n  // a good way of exporting them into packages.\n  // XXX deduplicate files.js into a package at some point so that we can use it\n  // in core\n  const toOSPath = p => process.platform === 'win32' ? p.replace(/\\//g, '\\\\') : p;\n  const toStandardPath = p => process.platform === 'win32' ? p.replace(/\\\\/g, '/') : p;\n  const pathJoin = (a, b) => toStandardPath(path.join(toOSPath(a), toOSPath(b)));\n  const pathDirname = p => toStandardPath(path.dirname(toOSPath(p)));\n  const pathRelative = (p1, p2) => toStandardPath(path.relative(toOSPath(p1), toOSPath(p2)));\n}.call(this, module);","map":{"version":3,"names":["module1","export","CssTools","path","link","default","v","url","postcss","cssnano","parseCss","cssText","options","arguments","length","undefined","source","from","parse","stringifyCss","cssAst","sourcemap","map","inline","annotation","sourcesContent","transformResult","toResult","code","css","toJSON","minifyCss","Promise","await","minifyCssAsync","asyncApply","safe","process","then","result","mergeCssAsts","cssAsts","warnCb","rulesPredicate","rules","exclude","Array","isArray","node","nodeMatchesRule","includes","name","type","newAst","root","forEach","ast","nodes","charsetRules","filter","some","rule","test","params","filename","importCount","i","rewriteCssUrls","imports","splice","push","mergedCssPath","rewriteRules","Profile","funcName","concat","hasOwn","Object","prototype","hasOwnProperty","call","appDir","cwd","sourceFile","input","file","sourceFileFromAppRoot","replace","basePath","pathJoin","pathDirname","match","value","cssUrlRegex","parts","exec","oldCssUrl","quote","resource","protocol","href","startsWith","absolutePath","isRelative","hash","relativeToMergedCss","pathRelative","newCssUrl","charAt","toOSPath","p","platform","toStandardPath","a","b","join","dirname","p1","p2","relative","module"],"sources":["packages/minifier-css/minifier.js"],"sourcesContent":["import path from 'path';\nimport url from 'url';\nimport postcss from 'postcss';\nimport cssnano from 'cssnano';\n\nconst CssTools = {\n  /**\n   * Parse the incoming CSS string; return a CSS AST.\n   *\n   * @param {string} cssText The CSS string to be parsed.\n   * @param {Object} options Options to pass to the PostCSS parser.\n   * @return {postcss#Root} PostCSS Root AST.\n   */\n  parseCss(cssText, options = {}) {\n    // This function previously used the `css-parse` npm package, which\n    // set the name of the css file being parsed using  { source: 'filename' }.\n    // If included, we'll convert this to the `postcss` equivalent, to maintain\n    // backwards compatibility.\n    if (options.source) {\n      options.from = options.source;\n      delete options.source;\n    }\n    return postcss.parse(cssText, options);\n  },\n\n  /**\n   * Using the incoming CSS AST, create and return a new object with the\n   * generated CSS string, and optional sourcemap details.\n   *\n   * @param {postcss#Root} cssAst PostCSS Root AST.\n   * @param {Object} options Options to pass to the PostCSS parser.\n   * @return {Object} Format: { code: 'css string', map: 'sourcemap deatils' }.\n   */\n  stringifyCss(cssAst, options = {}) {\n    // This function previously used the `css-stringify` npm package, which\n    // controlled sourcemap generation by passing in { sourcemap: true }.\n    // If included, we'll convert this to the `postcss` equivalent, to maintain\n    // backwards compatibility.\n    if (options.sourcemap) {\n      options.map = {\n        inline: false,\n        annotation: false,\n        sourcesContent: false,\n      };\n      delete options.sourcemap;\n    }\n    // explicitly set from to undefined to prevent postcss warnings\n    if (!options.from){\n      options.from = void 0;\n    }\n\n    transformResult = cssAst.toResult(options);\n\n    return {\n      code: transformResult.css,\n      map: transformResult.map ? transformResult.map.toJSON() : null,\n    };\n  },\n\n  /**\n   * Minify the passed in CSS string.\n   *\n   * @param {string} cssText CSS string to minify.\n   * @return {String[]} Array containing the minified CSS.\n   */\n  minifyCss(cssText) {\n    return Promise.await(CssTools.minifyCssAsync(cssText));\n  },\n\n  /**\n   * Minify the passed in CSS string.\n   *\n   * @param {string} cssText CSS string to minify.\n   * @return {Promise<String[]>} Array containing the minified CSS.\n   */\n  async minifyCssAsync(cssText) {\n    return await postcss([cssnano({ safe: true })])\n      .process(cssText, {\n        from: void 0,\n      })\n      .then((result) => [result.css]);\n  },\n\n  /**\n   * Merge multiple CSS AST's into one.\n   *\n   * @param {postcss#Root[]} cssAsts Array of PostCSS Root objects.\n   * @callback warnCb Callback used to handle warning messages.\n   * @return {postcss#Root} PostCSS Root object.\n   */\n  mergeCssAsts(cssAsts, warnCb) {\n    const rulesPredicate = (rules, exclude = false) => {\n      if (! Array.isArray(rules)) {\n        rules = [rules];\n      }\n      return node => {\n        // PostCSS AtRule nodes have `type: 'atrule'` and a descriptive name,\n        // e.g. 'import' or 'charset', while Comment nodes have type only.\n        const nodeMatchesRule = rules.includes(node.name || node.type);\n\n        return exclude ? !nodeMatchesRule : nodeMatchesRule;\n      }\n    };\n\n    // Simple concatenation of CSS files would break @import rules\n    // located in the beginning of a file. Before concatenation, pull\n    // @import rules to the beginning of a new syntax tree so they always\n    // precede other rules.\n    const newAst = postcss.root();\n\n    cssAsts.forEach((ast) => {\n      if (ast.nodes) {\n        // Pick only the imports from the beginning of file ignoring @charset\n        // rules as every file is assumed to be in UTF-8.\n        const charsetRules = ast.nodes.filter(rulesPredicate('charset'));\n\n        if (charsetRules.some((rule) => {\n          // According to MDN, only 'UTF-8' and \"UTF-8\" are the correct\n          // encoding directives representing UTF-8.\n          return ! /^(['\"])UTF-8\\1$/.test(rule.params);\n        })) {\n          warnCb(\n            ast.filename,\n            '@charset rules in this file will be ignored as UTF-8 is the ' +\n            'only encoding supported'\n          );\n        }\n\n        ast.nodes = ast.nodes.filter(rulesPredicate('charset', true));\n        let importCount = 0;\n        for (let i = 0; i < ast.nodes.length; i++) {\n          if (! rulesPredicate(['import', 'comment'])(ast.nodes[i])) {\n            importCount = i;\n            break;\n          }\n        }\n\n        CssTools.rewriteCssUrls(ast);\n\n        const imports = ast.nodes.splice(0, importCount);\n        newAst.nodes.push(...imports);\n\n        // If there are imports left in the middle of a file, warn users as it\n        // might be a potential bug (imports are only valid at the beginning of\n        // a file).\n        if (ast.nodes.some(rulesPredicate('import'))) {\n          warnCb(\n            ast.filename,\n            'There are some @import rules in the middle of a file. This ' +\n            'might be a bug, as imports are only valid at the beginning of ' +\n            'a file.'\n          );\n        }\n      }\n    });\n\n    // Now we can put the rest of CSS rules into new AST.\n    cssAsts.forEach((ast) => {\n      if (ast.nodes) {\n        newAst.nodes.push(...ast.nodes);\n      }\n    });\n\n    return newAst;\n  },\n\n  /**\n   * We are looking for all relative urls defined with the `url()` functional\n   * notation and rewriting them to the equivalent absolute url using the\n   * `source` path provided by postcss. For performance reasons this function\n   * acts by side effect by modifying the given AST without doing a deep copy.\n   *\n   * @param {postcss#Root} ast PostCSS Root object.\n   * @return Modifies the ast param in place.\n   */\n  rewriteCssUrls(ast) {\n    const mergedCssPath = '/';\n    rewriteRules(ast.nodes, mergedCssPath);\n  }\n};\n\nif (typeof Profile !== 'undefined') {\n  [\n    'parseCss',\n    'stringifyCss',\n    'minifyCss',\n    'minifyCssAsync',\n    'mergeCssAsts',\n    'rewriteCssUrls',\n  ].forEach(funcName => {\n    CssTools[funcName] = Profile(`CssTools.${funcName}`, CssTools[funcName]);\n  });\n}\n\nexport { CssTools };\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nconst rewriteRules = (rules, mergedCssPath) => {\n  rules.forEach((rule) => {\n    // Recurse if there are sub-rules. An example:\n    //     @media (...) {\n    //         .rule { url(...); }\n    //     }\n    if (hasOwn.call(rule, 'nodes')) {\n      rewriteRules(rule.nodes, mergedCssPath);\n    }\n\n    const appDir = process.cwd();\n    const sourceFile = rule.source.input.file;\n    const sourceFileFromAppRoot =\n      sourceFile ? sourceFile.replace(appDir, '') : '';\n    let basePath = pathJoin('/', pathDirname(sourceFileFromAppRoot));\n\n    // Set the correct basePath based on how the linked asset will be served.\n    // XXX This is wrong. We are coupling the information about how files will\n    // be served by the web server to the information how they were stored\n    // originally on the filesystem in the project structure. Ideally, there\n    // should be some module that tells us precisely how each asset will be\n    // served but for now we are just assuming that everything that comes from\n    // a folder starting with \"/packages/\" is served on the same path as\n    // it was on the filesystem and everything else is served on root \"/\".\n    if (! basePath.match(/^\\/?packages\\//i)) {\n      basePath = \"/\";\n    }\n\n    let value = rule.value;\n\n    // Match css values containing some functional calls to `url(URI)` where\n    // URI is optionally quoted.\n    // Note that a css value can contains other elements, for instance:\n    //   background: top center url(\"background.png\") black;\n    // or even multiple url(), for instance for multiple backgrounds.\n    var cssUrlRegex = /url\\s*\\(\\s*(['\"]?)(.+?)\\1\\s*\\)/gi;\n    let parts;\n    while (parts = cssUrlRegex.exec(value)) {\n      const oldCssUrl = parts[0];\n      const quote = parts[1];\n      const resource = url.parse(parts[2]);\n\n      // We don't rewrite URLs starting with a protocol definition such as\n      // http, https, or data, or those with network-path references\n      // i.e. //img.domain.com/cat.gif\n      if (resource.protocol !== null ||\n          resource.href.startsWith('//') ||\n          resource.href.startsWith('#')) {\n        continue;\n      }\n\n      // Rewrite relative paths (that refers to the internal application tree)\n      // to absolute paths (addressable from the public build).\n      let absolutePath = isRelative(resource.path)\n        ? pathJoin(basePath, resource.path)\n        : resource.path;\n\n      if (resource.hash) {\n        absolutePath += resource.hash;\n      }\n\n      // We used to finish the rewriting process at the absolute path step\n      // above. But it didn't work in case the Meteor application was deployed\n      // under a sub-path (eg `ROOT_URL=http://localhost:3000/myapp meteor`)\n      // in which case the resources linked in the merged CSS file would miss\n      // the `myapp/` prefix. Since this path prefix is only known at launch\n      // time (rather than build time) we can't use absolute paths to link\n      // resources in the generated CSS.\n      //\n      // Instead we transform absolute paths to make them relative to the\n      // merged CSS, leaving to the browser the responsibility to calculate\n      // the final resource links (by adding the application deployment\n      // prefix, here `myapp/`, if applicable).\n      const relativeToMergedCss = pathRelative(mergedCssPath, absolutePath);\n      const newCssUrl = `url(${quote}${relativeToMergedCss}${quote})`;\n      value = value.replace(oldCssUrl, newCssUrl);\n    }\n\n    rule.value = value;\n  });\n};\n\nconst isRelative = path => path && path.charAt(0) !== '/';\n\n// These are duplicates of functions in tools/files.js, because we don't have\n// a good way of exporting them into packages.\n// XXX deduplicate files.js into a package at some point so that we can use it\n// in core\nconst toOSPath =\n  p => process.platform === 'win32' ? p.replace(/\\//g, '\\\\') : p;\nconst toStandardPath =\n  p => process.platform === 'win32' ? p.replace(/\\\\/g, '/') : p;\nconst pathJoin =\n  (a, b) => toStandardPath(path.join(toOSPath(a), toOSPath(b)));\nconst pathDirname =\n  p => toStandardPath(path.dirname(toOSPath(p)));\nconst pathRelative =\n  (p1, p2) => toStandardPath(path.relative(toOSPath(p1), toOSPath(p2)));\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"c924bc7d007035fc6ed113bc6750e8bb967af983"}
