{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js","filename":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/client/styles","root":"/Users/nicholas/Desktop/projects/local-legends/client/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js"}},"code":"let MongoConnection;\nmodule.link(\"./meteorx.js\", {\n  MongoConnection(v) {\n    MongoConnection = v;\n  }\n}, 0);\nwrapOplogObserveDriver = function (proto) {\n  // Track the polled documents. This is reflect to the RAM size and\n  // for the CPU usage directly\n  var originalPublishNewResults = proto._publishNewResults;\n  proto._publishNewResults = function (newResults, newBuffer) {\n    var coll = this._cursorDescription.collectionName;\n    var query = this._cursorDescription.selector;\n    var opts = this._cursorDescription.options;\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newResults);\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    var count = newResults.size() + newBuffer.size();\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize * count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize * count\n      };\n    }\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n  var originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n  proto._handleOplogEntryQuerying = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n  var originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n  proto._handleOplogEntrySteadyOrFetching = function (op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  };\n\n  // track live updates\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function (fnName) {\n    var originalFn = proto[fnName];\n    proto[fnName] = function (a, b, c) {\n      if (this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n        if (fnName === \"_addPublished\") {\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"liveFetches\", docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if (!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n        this._liveUpdatesCounts._initialAdds++;\n        if (fnName === \"_addPublished\") {\n          if (!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n          if (!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n          this._docSize.initialFetches += docSize;\n        }\n      }\n      return originalFn.call(this, a, b, c);\n    };\n  });\n  var originalStop = proto.stop;\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n    return originalStop.call(this);\n  };\n};\nwrapPollingObserveDriver = function (proto) {\n  var originalPollMongo = proto._pollMongo;\n  proto._pollMongo = function () {\n    var start = Date.now();\n    originalPollMongo.call(this);\n\n    // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n    var count = 0;\n    var docSize = 0;\n    if (this._results && this._results.size) {\n      count = this._results.size() || 0;\n      var coll = this._cursorDescription.collectionName;\n      var query = this._cursorDescription.selector;\n      var opts = this._cursorDescription.options;\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map) * count;\n    }\n    if (this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n  var originalStop = proto.stop;\n  proto.stop = function () {\n    if (this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n    return originalStop.call(this);\n  };\n};\nwrapMultiplexer = function (proto) {\n  var originalInitalAdd = proto.addHandleAndSendInitialAdds;\n  proto.addHandleAndSendInitialAdds = function (handle) {\n    if (!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n    if (!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n    return originalInitalAdd.call(this, handle);\n  };\n};\nwrapForCountingObservers = function () {\n  // to count observers\n  var mongoConnectionProto = MongoConnection.prototype;\n  var originalObserveChanges = mongoConnectionProto._observeChanges;\n  mongoConnectionProto._observeChanges = function (cursorDescription, ordered, callbacks) {\n    var ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks);\n    // get the Kadira Info via the Meteor.EnvironmentalVariable\n    var kadiraInfo = Kadira._getInfo(null, true);\n    if (kadiraInfo && ret._multiplexer) {\n      if (!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n        if (kadiraInfo.trace.type == 'sub') {\n          var ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: new Date().getTime()\n          };\n          var observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo);\n\n          // We need to send initially polled documents if there are\n          if (observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          }\n\n          // We need to send initially polled documents if there are\n          if (observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, \"polledFetches\", observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          }\n\n          // Process _liveUpdatesCounts\n          _.each(observerDriver._liveUpdatesCounts, function (count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          });\n\n          // Process docSize\n          _.each(observerDriver._docSize, function (count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n    return ret;\n  };\n};","map":{"version":3,"names":["MongoConnection","module","link","v","wrapOplogObserveDriver","proto","originalPublishNewResults","_publishNewResults","newResults","newBuffer","coll","_cursorDescription","collectionName","query","selector","opts","options","docSize","Kadira","docSzCache","getSize","count","size","_ownerInfo","models","pubsub","trackPolledDocuments","trackDocSize","name","_polledDocuments","_docSize","polledFetches","call","originalHandleOplogEntryQuerying","_handleOplogEntryQuerying","op","trackDocumentChanges","originalHandleOplogEntrySteadyOrFetching","_handleOplogEntrySteadyOrFetching","forEach","fnName","originalFn","a","b","c","trackLiveUpdates","_liveUpdatesCounts","_initialAdds","initialFetches","originalStop","stop","type","EventBus","emit","trackDeletedObserver","wrapPollingObserveDriver","originalPollMongo","_pollMongo","start","Date","now","_results","_map","_polledDocSize","wrapMultiplexer","originalInitalAdd","addHandleAndSendInitialAdds","handle","_firstInitialAddTime","_wasMultiplexerReady","_ready","_queueLength","_queue","_taskHandles","length","_elapsedPollingTime","wrapForCountingObservers","mongoConnectionProto","prototype","originalObserveChanges","_observeChanges","cursorDescription","ordered","callbacks","ret","kadiraInfo","_getInfo","_multiplexer","__kadiraTracked","trace","incrementHandleCount","ownerInfo","startTime","getTime","observerDriver","_observeDriver","trackCreatedObserver","_","each","key"],"sources":["packages/mdg:meteor-apm-agent/lib/hijack/wrap_observers.js"],"sourcesContent":["import { MongoConnection } from \"./meteorx.js\";\n\nwrapOplogObserveDriver = function(proto) {\n  // Track the polled documents. This is reflect to the RAM size and\n  // for the CPU usage directly\n  var originalPublishNewResults = proto._publishNewResults;\n  proto._publishNewResults = function(newResults, newBuffer) {\n    var coll = this._cursorDescription.collectionName;\n    var query = this._cursorDescription.selector;\n    var opts = this._cursorDescription.options;\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newResults);\n    var docSize = Kadira.docSzCache.getSize(coll, query, opts, newBuffer);\n    var count = newResults.size() + newBuffer.size();\n    if(this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize*count);\n    } else {\n      this._polledDocuments = count;\n      this._docSize = {\n        polledFetches: docSize*count\n      }\n    }\n    return originalPublishNewResults.call(this, newResults, newBuffer);\n  };\n\n  var originalHandleOplogEntryQuerying = proto._handleOplogEntryQuerying;\n  proto._handleOplogEntryQuerying = function(op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntryQuerying.call(this, op);\n  };\n\n  var originalHandleOplogEntrySteadyOrFetching = proto._handleOplogEntrySteadyOrFetching;\n  proto._handleOplogEntrySteadyOrFetching = function(op) {\n    Kadira.models.pubsub.trackDocumentChanges(this._ownerInfo, op);\n    return originalHandleOplogEntrySteadyOrFetching.call(this, op);\n  };\n\n  // track live updates\n  ['_addPublished', '_removePublished', '_changePublished'].forEach(function(fnName) {\n    var originalFn = proto[fnName];\n    proto[fnName] = function(a, b, c) {\n      if(this._ownerInfo) {\n        Kadira.models.pubsub.trackLiveUpdates(this._ownerInfo, fnName, 1);\n\n        if(fnName === \"_addPublished\") {\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"liveFetches\", docSize);\n        }\n      } else {\n        // If there is no ownerInfo, that means this is the initial adds\n        if(!this._liveUpdatesCounts) {\n          this._liveUpdatesCounts = {\n            _initialAdds: 0\n          };\n        }\n\n        this._liveUpdatesCounts._initialAdds++;\n\n        if(fnName === \"_addPublished\") {\n          if(!this._docSize) {\n            this._docSize = {\n              initialFetches: 0\n            };\n          }\n\n          if(!this._docSize.initialFetches) {\n            this._docSize.initialFetches = 0;\n          }\n\n          var coll = this._cursorDescription.collectionName;\n          var query = this._cursorDescription.selector;\n          var opts = this._cursorDescription.options;\n          var docSize = Kadira.docSzCache.getSize(coll, query, opts, [b]);\n\n          this._docSize.initialFetches += docSize;\n        }\n      }\n\n      return originalFn.call(this, a, b, c);\n    };\n  });\n\n  var originalStop = proto.stop;\n  proto.stop = function() {\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapPollingObserveDriver = function(proto) {\n  var originalPollMongo = proto._pollMongo;\n  proto._pollMongo = function() {\n    var start = Date.now();\n    originalPollMongo.call(this);\n\n    // Current result is stored in the following variable.\n    // So, we can use that\n    // Sometimes, it's possible to get size as undefined.\n    // May be something with different version. We don't need to worry about\n    // this now\n    var count = 0;\n    var docSize = 0;\n\n    if(this._results && this._results.size) {\n      count = this._results.size() || 0;\n\n      var coll = this._cursorDescription.collectionName;\n      var query = this._cursorDescription.selector;\n      var opts = this._cursorDescription.options;\n\n      docSize = Kadira.docSzCache.getSize(coll, query, opts, this._results._map)*count;\n    }\n\n    if(this._ownerInfo) {\n      Kadira.models.pubsub.trackPolledDocuments(this._ownerInfo, count);\n      Kadira.models.pubsub.trackDocSize(this._ownerInfo.name, \"polledFetches\", docSize);\n    } else {\n      this._polledDocuments = count;\n      this._polledDocSize = docSize;\n    }\n  };\n\n  var originalStop = proto.stop;\n  proto.stop = function() {\n    if(this._ownerInfo && this._ownerInfo.type === 'sub') {\n      Kadira.EventBus.emit('pubsub', 'observerDeleted', this._ownerInfo);\n      Kadira.models.pubsub.trackDeletedObserver(this._ownerInfo);\n    }\n\n    return originalStop.call(this);\n  };\n};\n\nwrapMultiplexer = function(proto) {\n  var originalInitalAdd = proto.addHandleAndSendInitialAdds;\n   proto.addHandleAndSendInitialAdds = function(handle) {\n    if(!this._firstInitialAddTime) {\n      this._firstInitialAddTime = Date.now();\n    }\n\n    handle._wasMultiplexerReady = this._ready();\n    handle._queueLength = this._queue._taskHandles.length;\n\n    if(!handle._wasMultiplexerReady) {\n      handle._elapsedPollingTime = Date.now() - this._firstInitialAddTime;\n    }\n    return originalInitalAdd.call(this, handle);\n  };\n};\n\nwrapForCountingObservers = function() {\n  // to count observers\n  var mongoConnectionProto = MongoConnection.prototype;\n  var originalObserveChanges = mongoConnectionProto._observeChanges;\n  mongoConnectionProto._observeChanges = function(cursorDescription, ordered, callbacks) {\n    var ret = originalObserveChanges.call(this, cursorDescription, ordered, callbacks);\n    // get the Kadira Info via the Meteor.EnvironmentalVariable\n    var kadiraInfo = Kadira._getInfo(null, true);\n\n    if(kadiraInfo && ret._multiplexer) {\n      if(!ret._multiplexer.__kadiraTracked) {\n        // new multiplexer\n        ret._multiplexer.__kadiraTracked = true;\n        Kadira.EventBus.emit('pubsub', 'newSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, false);\n        if(kadiraInfo.trace.type == 'sub') {\n          var ownerInfo = {\n            type: kadiraInfo.trace.type,\n            name: kadiraInfo.trace.name,\n            startTime: (new Date()).getTime()\n          };\n\n          var observerDriver = ret._multiplexer._observeDriver;\n          observerDriver._ownerInfo = ownerInfo;\n          Kadira.EventBus.emit('pubsub', 'observerCreated', ownerInfo);\n          Kadira.models.pubsub.trackCreatedObserver(ownerInfo);\n\n          // We need to send initially polled documents if there are\n          if(observerDriver._polledDocuments) {\n            Kadira.models.pubsub.trackPolledDocuments(ownerInfo, observerDriver._polledDocuments);\n            observerDriver._polledDocuments = 0;\n          }\n\n          // We need to send initially polled documents if there are\n          if(observerDriver._polledDocSize) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, \"polledFetches\", observerDriver._polledDocSize);\n            observerDriver._polledDocSize = 0;\n          }\n\n          // Process _liveUpdatesCounts\n          _.each(observerDriver._liveUpdatesCounts, function(count, key) {\n            Kadira.models.pubsub.trackLiveUpdates(ownerInfo, key, count);\n          });\n\n          // Process docSize\n          _.each(observerDriver._docSize, function(count, key) {\n            Kadira.models.pubsub.trackDocSize(ownerInfo.name, key, count);\n          });\n        }\n      } else {\n        Kadira.EventBus.emit('pubsub', 'cachedSubHandleCreated', kadiraInfo.trace);\n        Kadira.models.pubsub.incrementHandleCount(kadiraInfo.trace, true);\n      }\n    }\n\n    return ret;\n  }\n};\n"],"mappings":"AAAA,IAAIA,eAAe;AAACC,MAAM,CAACC,IAAI,CAAC,cAAc,EAAC;EAACF,eAAeA,CAACG,CAAC,EAAC;IAACH,eAAe,GAACG,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAEzFC,sBAAsB,GAAG,SAAAA,CAASC,KAAK,EAAE;EACvC;EACA;EACA,IAAIC,yBAAyB,GAAGD,KAAK,CAACE,kBAAkB;EACxDF,KAAK,CAACE,kBAAkB,GAAG,UAASC,UAAU,EAAEC,SAAS,EAAE;IACzD,IAAIC,IAAI,GAAG,IAAI,CAACC,kBAAkB,CAACC,cAAc;IACjD,IAAIC,KAAK,GAAG,IAAI,CAACF,kBAAkB,CAACG,QAAQ;IAC5C,IAAIC,IAAI,GAAG,IAAI,CAACJ,kBAAkB,CAACK,OAAO;IAC1C,IAAIC,OAAO,GAAGC,MAAM,CAACC,UAAU,CAACC,OAAO,CAACV,IAAI,EAAEG,KAAK,EAAEE,IAAI,EAAEP,UAAU,CAAC;IACtE,IAAIS,OAAO,GAAGC,MAAM,CAACC,UAAU,CAACC,OAAO,CAACV,IAAI,EAAEG,KAAK,EAAEE,IAAI,EAAEN,SAAS,CAAC;IACrE,IAAIY,KAAK,GAAGb,UAAU,CAACc,IAAI,CAAC,CAAC,GAAGb,SAAS,CAACa,IAAI,CAAC,CAAC;IAChD,IAAG,IAAI,CAACC,UAAU,EAAE;MAClBL,MAAM,CAACM,MAAM,CAACC,MAAM,CAACC,oBAAoB,CAAC,IAAI,CAACH,UAAU,EAAEF,KAAK,CAAC;MACjEH,MAAM,CAACM,MAAM,CAACC,MAAM,CAACE,YAAY,CAAC,IAAI,CAACJ,UAAU,CAACK,IAAI,EAAE,eAAe,EAAEX,OAAO,GAACI,KAAK,CAAC;IACzF,CAAC,MAAM;MACL,IAAI,CAACQ,gBAAgB,GAAGR,KAAK;MAC7B,IAAI,CAACS,QAAQ,GAAG;QACdC,aAAa,EAAEd,OAAO,GAACI;MACzB,CAAC;IACH;IACA,OAAOf,yBAAyB,CAAC0B,IAAI,CAAC,IAAI,EAAExB,UAAU,EAAEC,SAAS,CAAC;EACpE,CAAC;EAED,IAAIwB,gCAAgC,GAAG5B,KAAK,CAAC6B,yBAAyB;EACtE7B,KAAK,CAAC6B,yBAAyB,GAAG,UAASC,EAAE,EAAE;IAC7CjB,MAAM,CAACM,MAAM,CAACC,MAAM,CAACW,oBAAoB,CAAC,IAAI,CAACb,UAAU,EAAEY,EAAE,CAAC;IAC9D,OAAOF,gCAAgC,CAACD,IAAI,CAAC,IAAI,EAAEG,EAAE,CAAC;EACxD,CAAC;EAED,IAAIE,wCAAwC,GAAGhC,KAAK,CAACiC,iCAAiC;EACtFjC,KAAK,CAACiC,iCAAiC,GAAG,UAASH,EAAE,EAAE;IACrDjB,MAAM,CAACM,MAAM,CAACC,MAAM,CAACW,oBAAoB,CAAC,IAAI,CAACb,UAAU,EAAEY,EAAE,CAAC;IAC9D,OAAOE,wCAAwC,CAACL,IAAI,CAAC,IAAI,EAAEG,EAAE,CAAC;EAChE,CAAC;;EAED;EACA,CAAC,eAAe,EAAE,kBAAkB,EAAE,kBAAkB,CAAC,CAACI,OAAO,CAAC,UAASC,MAAM,EAAE;IACjF,IAAIC,UAAU,GAAGpC,KAAK,CAACmC,MAAM,CAAC;IAC9BnC,KAAK,CAACmC,MAAM,CAAC,GAAG,UAASE,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAE;MAChC,IAAG,IAAI,CAACrB,UAAU,EAAE;QAClBL,MAAM,CAACM,MAAM,CAACC,MAAM,CAACoB,gBAAgB,CAAC,IAAI,CAACtB,UAAU,EAAEiB,MAAM,EAAE,CAAC,CAAC;QAEjE,IAAGA,MAAM,KAAK,eAAe,EAAE;UAC7B,IAAI9B,IAAI,GAAG,IAAI,CAACC,kBAAkB,CAACC,cAAc;UACjD,IAAIC,KAAK,GAAG,IAAI,CAACF,kBAAkB,CAACG,QAAQ;UAC5C,IAAIC,IAAI,GAAG,IAAI,CAACJ,kBAAkB,CAACK,OAAO;UAC1C,IAAIC,OAAO,GAAGC,MAAM,CAACC,UAAU,CAACC,OAAO,CAACV,IAAI,EAAEG,KAAK,EAAEE,IAAI,EAAE,CAAC4B,CAAC,CAAC,CAAC;UAE/DzB,MAAM,CAACM,MAAM,CAACC,MAAM,CAACE,YAAY,CAAC,IAAI,CAACJ,UAAU,CAACK,IAAI,EAAE,aAAa,EAAEX,OAAO,CAAC;QACjF;MACF,CAAC,MAAM;QACL;QACA,IAAG,CAAC,IAAI,CAAC6B,kBAAkB,EAAE;UAC3B,IAAI,CAACA,kBAAkB,GAAG;YACxBC,YAAY,EAAE;UAChB,CAAC;QACH;QAEA,IAAI,CAACD,kBAAkB,CAACC,YAAY,EAAE;QAEtC,IAAGP,MAAM,KAAK,eAAe,EAAE;UAC7B,IAAG,CAAC,IAAI,CAACV,QAAQ,EAAE;YACjB,IAAI,CAACA,QAAQ,GAAG;cACdkB,cAAc,EAAE;YAClB,CAAC;UACH;UAEA,IAAG,CAAC,IAAI,CAAClB,QAAQ,CAACkB,cAAc,EAAE;YAChC,IAAI,CAAClB,QAAQ,CAACkB,cAAc,GAAG,CAAC;UAClC;UAEA,IAAItC,IAAI,GAAG,IAAI,CAACC,kBAAkB,CAACC,cAAc;UACjD,IAAIC,KAAK,GAAG,IAAI,CAACF,kBAAkB,CAACG,QAAQ;UAC5C,IAAIC,IAAI,GAAG,IAAI,CAACJ,kBAAkB,CAACK,OAAO;UAC1C,IAAIC,OAAO,GAAGC,MAAM,CAACC,UAAU,CAACC,OAAO,CAACV,IAAI,EAAEG,KAAK,EAAEE,IAAI,EAAE,CAAC4B,CAAC,CAAC,CAAC;UAE/D,IAAI,CAACb,QAAQ,CAACkB,cAAc,IAAI/B,OAAO;QACzC;MACF;MAEA,OAAOwB,UAAU,CAACT,IAAI,CAAC,IAAI,EAAEU,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;IACvC,CAAC;EACH,CAAC,CAAC;EAEF,IAAIK,YAAY,GAAG5C,KAAK,CAAC6C,IAAI;EAC7B7C,KAAK,CAAC6C,IAAI,GAAG,YAAW;IACtB,IAAG,IAAI,CAAC3B,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC4B,IAAI,KAAK,KAAK,EAAE;MACpDjC,MAAM,CAACkC,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,iBAAiB,EAAE,IAAI,CAAC9B,UAAU,CAAC;MAClEL,MAAM,CAACM,MAAM,CAACC,MAAM,CAAC6B,oBAAoB,CAAC,IAAI,CAAC/B,UAAU,CAAC;IAC5D;IAEA,OAAO0B,YAAY,CAACjB,IAAI,CAAC,IAAI,CAAC;EAChC,CAAC;AACH,CAAC;AAEDuB,wBAAwB,GAAG,SAAAA,CAASlD,KAAK,EAAE;EACzC,IAAImD,iBAAiB,GAAGnD,KAAK,CAACoD,UAAU;EACxCpD,KAAK,CAACoD,UAAU,GAAG,YAAW;IAC5B,IAAIC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;IACtBJ,iBAAiB,CAACxB,IAAI,CAAC,IAAI,CAAC;;IAE5B;IACA;IACA;IACA;IACA;IACA,IAAIX,KAAK,GAAG,CAAC;IACb,IAAIJ,OAAO,GAAG,CAAC;IAEf,IAAG,IAAI,CAAC4C,QAAQ,IAAI,IAAI,CAACA,QAAQ,CAACvC,IAAI,EAAE;MACtCD,KAAK,GAAG,IAAI,CAACwC,QAAQ,CAACvC,IAAI,CAAC,CAAC,IAAI,CAAC;MAEjC,IAAIZ,IAAI,GAAG,IAAI,CAACC,kBAAkB,CAACC,cAAc;MACjD,IAAIC,KAAK,GAAG,IAAI,CAACF,kBAAkB,CAACG,QAAQ;MAC5C,IAAIC,IAAI,GAAG,IAAI,CAACJ,kBAAkB,CAACK,OAAO;MAE1CC,OAAO,GAAGC,MAAM,CAACC,UAAU,CAACC,OAAO,CAACV,IAAI,EAAEG,KAAK,EAAEE,IAAI,EAAE,IAAI,CAAC8C,QAAQ,CAACC,IAAI,CAAC,GAACzC,KAAK;IAClF;IAEA,IAAG,IAAI,CAACE,UAAU,EAAE;MAClBL,MAAM,CAACM,MAAM,CAACC,MAAM,CAACC,oBAAoB,CAAC,IAAI,CAACH,UAAU,EAAEF,KAAK,CAAC;MACjEH,MAAM,CAACM,MAAM,CAACC,MAAM,CAACE,YAAY,CAAC,IAAI,CAACJ,UAAU,CAACK,IAAI,EAAE,eAAe,EAAEX,OAAO,CAAC;IACnF,CAAC,MAAM;MACL,IAAI,CAACY,gBAAgB,GAAGR,KAAK;MAC7B,IAAI,CAAC0C,cAAc,GAAG9C,OAAO;IAC/B;EACF,CAAC;EAED,IAAIgC,YAAY,GAAG5C,KAAK,CAAC6C,IAAI;EAC7B7C,KAAK,CAAC6C,IAAI,GAAG,YAAW;IACtB,IAAG,IAAI,CAAC3B,UAAU,IAAI,IAAI,CAACA,UAAU,CAAC4B,IAAI,KAAK,KAAK,EAAE;MACpDjC,MAAM,CAACkC,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,iBAAiB,EAAE,IAAI,CAAC9B,UAAU,CAAC;MAClEL,MAAM,CAACM,MAAM,CAACC,MAAM,CAAC6B,oBAAoB,CAAC,IAAI,CAAC/B,UAAU,CAAC;IAC5D;IAEA,OAAO0B,YAAY,CAACjB,IAAI,CAAC,IAAI,CAAC;EAChC,CAAC;AACH,CAAC;AAEDgC,eAAe,GAAG,SAAAA,CAAS3D,KAAK,EAAE;EAChC,IAAI4D,iBAAiB,GAAG5D,KAAK,CAAC6D,2BAA2B;EACxD7D,KAAK,CAAC6D,2BAA2B,GAAG,UAASC,MAAM,EAAE;IACpD,IAAG,CAAC,IAAI,CAACC,oBAAoB,EAAE;MAC7B,IAAI,CAACA,oBAAoB,GAAGT,IAAI,CAACC,GAAG,CAAC,CAAC;IACxC;IAEAO,MAAM,CAACE,oBAAoB,GAAG,IAAI,CAACC,MAAM,CAAC,CAAC;IAC3CH,MAAM,CAACI,YAAY,GAAG,IAAI,CAACC,MAAM,CAACC,YAAY,CAACC,MAAM;IAErD,IAAG,CAACP,MAAM,CAACE,oBAAoB,EAAE;MAC/BF,MAAM,CAACQ,mBAAmB,GAAGhB,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,IAAI,CAACQ,oBAAoB;IACrE;IACA,OAAOH,iBAAiB,CAACjC,IAAI,CAAC,IAAI,EAAEmC,MAAM,CAAC;EAC7C,CAAC;AACH,CAAC;AAEDS,wBAAwB,GAAG,SAAAA,CAAA,EAAW;EACpC;EACA,IAAIC,oBAAoB,GAAG7E,eAAe,CAAC8E,SAAS;EACpD,IAAIC,sBAAsB,GAAGF,oBAAoB,CAACG,eAAe;EACjEH,oBAAoB,CAACG,eAAe,GAAG,UAASC,iBAAiB,EAAEC,OAAO,EAAEC,SAAS,EAAE;IACrF,IAAIC,GAAG,GAAGL,sBAAsB,CAAC/C,IAAI,CAAC,IAAI,EAAEiD,iBAAiB,EAAEC,OAAO,EAAEC,SAAS,CAAC;IAClF;IACA,IAAIE,UAAU,GAAGnE,MAAM,CAACoE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;IAE5C,IAAGD,UAAU,IAAID,GAAG,CAACG,YAAY,EAAE;MACjC,IAAG,CAACH,GAAG,CAACG,YAAY,CAACC,eAAe,EAAE;QACpC;QACAJ,GAAG,CAACG,YAAY,CAACC,eAAe,GAAG,IAAI;QACvCtE,MAAM,CAACkC,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,qBAAqB,EAAEgC,UAAU,CAACI,KAAK,CAAC;QACvEvE,MAAM,CAACM,MAAM,CAACC,MAAM,CAACiE,oBAAoB,CAACL,UAAU,CAACI,KAAK,EAAE,KAAK,CAAC;QAClE,IAAGJ,UAAU,CAACI,KAAK,CAACtC,IAAI,IAAI,KAAK,EAAE;UACjC,IAAIwC,SAAS,GAAG;YACdxC,IAAI,EAAEkC,UAAU,CAACI,KAAK,CAACtC,IAAI;YAC3BvB,IAAI,EAAEyD,UAAU,CAACI,KAAK,CAAC7D,IAAI;YAC3BgE,SAAS,EAAG,IAAIjC,IAAI,CAAC,CAAC,CAAEkC,OAAO,CAAC;UAClC,CAAC;UAED,IAAIC,cAAc,GAAGV,GAAG,CAACG,YAAY,CAACQ,cAAc;UACpDD,cAAc,CAACvE,UAAU,GAAGoE,SAAS;UACrCzE,MAAM,CAACkC,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,iBAAiB,EAAEsC,SAAS,CAAC;UAC5DzE,MAAM,CAACM,MAAM,CAACC,MAAM,CAACuE,oBAAoB,CAACL,SAAS,CAAC;;UAEpD;UACA,IAAGG,cAAc,CAACjE,gBAAgB,EAAE;YAClCX,MAAM,CAACM,MAAM,CAACC,MAAM,CAACC,oBAAoB,CAACiE,SAAS,EAAEG,cAAc,CAACjE,gBAAgB,CAAC;YACrFiE,cAAc,CAACjE,gBAAgB,GAAG,CAAC;UACrC;;UAEA;UACA,IAAGiE,cAAc,CAAC/B,cAAc,EAAE;YAChC7C,MAAM,CAACM,MAAM,CAACC,MAAM,CAACE,YAAY,CAACgE,SAAS,CAAC/D,IAAI,EAAE,eAAe,EAAEkE,cAAc,CAAC/B,cAAc,CAAC;YACjG+B,cAAc,CAAC/B,cAAc,GAAG,CAAC;UACnC;;UAEA;UACAkC,CAAC,CAACC,IAAI,CAACJ,cAAc,CAAChD,kBAAkB,EAAE,UAASzB,KAAK,EAAE8E,GAAG,EAAE;YAC7DjF,MAAM,CAACM,MAAM,CAACC,MAAM,CAACoB,gBAAgB,CAAC8C,SAAS,EAAEQ,GAAG,EAAE9E,KAAK,CAAC;UAC9D,CAAC,CAAC;;UAEF;UACA4E,CAAC,CAACC,IAAI,CAACJ,cAAc,CAAChE,QAAQ,EAAE,UAAST,KAAK,EAAE8E,GAAG,EAAE;YACnDjF,MAAM,CAACM,MAAM,CAACC,MAAM,CAACE,YAAY,CAACgE,SAAS,CAAC/D,IAAI,EAAEuE,GAAG,EAAE9E,KAAK,CAAC;UAC/D,CAAC,CAAC;QACJ;MACF,CAAC,MAAM;QACLH,MAAM,CAACkC,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,wBAAwB,EAAEgC,UAAU,CAACI,KAAK,CAAC;QAC1EvE,MAAM,CAACM,MAAM,CAACC,MAAM,CAACiE,oBAAoB,CAACL,UAAU,CAACI,KAAK,EAAE,IAAI,CAAC;MACnE;IACF;IAEA,OAAOL,GAAG;EACZ,CAAC;AACH,CAAC"},"sourceType":"module","externalDependencies":{},"hash":"42e1b61346f3c57bf00979b20305a84e74f21cbd"}
