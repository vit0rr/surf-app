{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/autoupdate/autoupdate_client.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/autoupdate/autoupdate_client.js","filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/autoupdate/autoupdate_client.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/styles","root":"/Users/nicholas/Desktop/projects/local-legends/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/autoupdate/autoupdate_client.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/autoupdate/autoupdate_client.js"}},"code":"!function (module1) {\n  module1.export({\n    Autoupdate: () => Autoupdate\n  });\n  let ClientVersions;\n  module1.link(\"./client_versions.js\", {\n    ClientVersions(v) {\n      ClientVersions = v;\n    }\n  }, 0);\n  const clientArch = Meteor.isCordova ? \"web.cordova\" : Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n  const autoupdateVersions = ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: []\n  };\n  const Autoupdate = {};\n  // Stores acceptable client versions.\n  const clientVersions = Autoupdate._clientVersions =\n  // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n  Meteor.connection.registerStore(\"meteor_autoupdate_clientVersions\", clientVersions.createStore());\n  Autoupdate.newClientAvailable = function () {\n    return clientVersions.newClientAvailable(clientArch, [\"versionRefreshable\", \"versionNonRefreshable\"], autoupdateVersions);\n  };\n\n  // Set to true if the link.onload callback ever fires for any <link> node.\n  let knownToSupportCssOnLoad = false;\n  const retry = new Retry({\n    // Unlike the stream reconnect use of Retry, which we want to be instant\n    // in normal operation, this is a wacky failure. We don't want to retry\n    // right away, we can start slowly.\n    //\n    // A better way than timeconstants here might be to use the knowledge\n    // of when we reconnect to help trigger these retries. Typically, the\n    // server fixing code will result in a restart and reconnect, but\n    // potentially the subscription could have a transient error.\n    minCount: 0,\n    // don't do any immediate retries\n    baseTimeout: 30 * 1000 // start with 30s\n  });\n  let failures = 0;\n  Autoupdate._retrySubscription = () => {\n    Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n      onError(error) {\n        Meteor._debug(\"autoupdate subscription failed\", error);\n        failures++;\n        retry.retryLater(failures, function () {\n          // Just retry making the subscription, don't reload the whole\n          // page. While reloading would catch more cases (for example,\n          // the server went back a version and is now doing old-style hot\n          // code push), it would also be more prone to reload loops,\n          // which look really bad to the user. Just retrying the\n          // subscription over DDP means it is at least possible to fix by\n          // updating the server.\n          Autoupdate._retrySubscription();\n        });\n      },\n      onReady() {\n        // Call checkNewVersionDocument with a slight delay, so that the\n        // const handle declaration is guaranteed to be initialized, even if\n        // the added or changed callbacks are called synchronously.\n        const resolved = Promise.resolve();\n        function check(doc) {\n          resolved.then(() => checkNewVersionDocument(doc));\n        }\n        const stop = clientVersions.watch(check);\n        function checkNewVersionDocument(doc) {\n          if (doc._id !== clientArch) {\n            return;\n          }\n          if (doc.versionNonRefreshable !== autoupdateVersions.versionNonRefreshable) {\n            // Non-refreshable assets have changed, so we have to reload the\n            // whole page rather than just replacing <link> tags.\n            if (stop) stop();\n            if (Package.reload) {\n              // The reload package should be provided by ddp-client, which\n              // is provided by the ddp package that autoupdate depends on.\n              Package.reload.Reload._reload();\n            }\n            return;\n          }\n          if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n            autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n            // Switch out old css links for the new css links. Inspired by:\n            // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n            var newCss = doc.assets || [];\n            var oldLinks = [];\n            Array.prototype.forEach.call(document.getElementsByTagName('link'), function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            });\n            function waitUntilCssLoads(link, callback) {\n              var called;\n              link.onload = function () {\n                knownToSupportCssOnLoad = true;\n                if (!called) {\n                  called = true;\n                  callback();\n                }\n              };\n              if (!knownToSupportCssOnLoad) {\n                var id = Meteor.setInterval(function () {\n                  if (link.sheet) {\n                    if (!called) {\n                      called = true;\n                      callback();\n                    }\n                    Meteor.clearInterval(id);\n                  }\n                }, 50);\n              }\n            }\n            let newLinksLeftToLoad = newCss.length;\n            function removeOldLinks() {\n              if (oldLinks.length > 0 && --newLinksLeftToLoad < 1) {\n                oldLinks.splice(0).forEach(link => {\n                  link.parentNode.removeChild(link);\n                });\n              }\n            }\n            if (newCss.length > 0) {\n              newCss.forEach(css => {\n                const newLink = document.createElement(\"link\");\n                newLink.setAttribute(\"rel\", \"stylesheet\");\n                newLink.setAttribute(\"type\", \"text/css\");\n                newLink.setAttribute(\"class\", \"__meteor-css__\");\n                newLink.setAttribute(\"href\", css.url);\n                waitUntilCssLoads(newLink, function () {\n                  Meteor.setTimeout(removeOldLinks, 200);\n                });\n                const head = document.getElementsByTagName(\"head\").item(0);\n                head.appendChild(newLink);\n              });\n            } else {\n              removeOldLinks();\n            }\n          }\n        }\n      }\n    });\n  };\n  Autoupdate._retrySubscription();\n}.call(this, module);","map":{"version":3,"names":["module1","export","Autoupdate","ClientVersions","link","v","clientArch","Meteor","isCordova","isModern","autoupdateVersions","__meteor_runtime_config__","autoupdate","versions","version","versionRefreshable","versionNonRefreshable","assets","clientVersions","_clientVersions","connection","registerStore","createStore","newClientAvailable","knownToSupportCssOnLoad","retry","Retry","minCount","baseTimeout","failures","_retrySubscription","subscribe","onError","error","_debug","retryLater","onReady","resolved","Promise","resolve","check","doc","then","checkNewVersionDocument","stop","watch","_id","Package","reload","Reload","_reload","newCss","oldLinks","Array","prototype","forEach","call","document","getElementsByTagName","className","push","waitUntilCssLoads","callback","called","onload","id","setInterval","sheet","clearInterval","newLinksLeftToLoad","length","removeOldLinks","splice","parentNode","removeChild","css","newLink","createElement","setAttribute","url","setTimeout","head","item","appendChild","module"],"sources":["packages/autoupdate/autoupdate_client.js"],"sourcesContent":["// Subscribe to the `meteor_autoupdate_clientVersions` collection,\n// which contains the set of acceptable client versions.\n//\n// A \"hard code push\" occurs when the running client version is not in\n// the set of acceptable client versions (or the server updates the\n// collection, there is a published client version marked `current` and\n// the running client version is no longer in the set).\n//\n// When the `reload` package is loaded, a hard code push causes\n// the browser to reload, so that it will load the latest client\n// version from the server.\n//\n// A \"soft code push\" represents the situation when the running client\n// version is in the set of acceptable versions, but there is a newer\n// version available on the server.\n//\n// `Autoupdate.newClientAvailable` is a reactive data source which\n// becomes `true` if a new version of the client is available on\n// the server.\n//\n// This package doesn't implement a soft code reload process itself,\n// but `newClientAvailable` could be used for example to display a\n// \"click to reload\" link to the user.\n\n// The client version of the client code currently running in the\n// browser.\n\nimport { ClientVersions } from \"./client_versions.js\";\n\nconst clientArch = Meteor.isCordova ? \"web.cordova\" :\n  Meteor.isModern ? \"web.browser\" : \"web.browser.legacy\";\n\nconst autoupdateVersions =\n  ((__meteor_runtime_config__.autoupdate || {}).versions || {})[clientArch] || {\n    version: \"unknown\",\n    versionRefreshable: \"unknown\",\n    versionNonRefreshable: \"unknown\",\n    assets: [],\n  };\n\nexport const Autoupdate = {};\n\n// Stores acceptable client versions.\nconst clientVersions =\n  Autoupdate._clientVersions = // Used by a self-test and hot-module-replacement\n  new ClientVersions();\n\nMeteor.connection.registerStore(\n  \"meteor_autoupdate_clientVersions\",\n  clientVersions.createStore()\n);\n\nAutoupdate.newClientAvailable = function () {\n  return clientVersions.newClientAvailable(\n    clientArch,\n    [\"versionRefreshable\", \"versionNonRefreshable\"],\n    autoupdateVersions\n  );\n};\n\n// Set to true if the link.onload callback ever fires for any <link> node.\nlet knownToSupportCssOnLoad = false;\n\nconst retry = new Retry({\n  // Unlike the stream reconnect use of Retry, which we want to be instant\n  // in normal operation, this is a wacky failure. We don't want to retry\n  // right away, we can start slowly.\n  //\n  // A better way than timeconstants here might be to use the knowledge\n  // of when we reconnect to help trigger these retries. Typically, the\n  // server fixing code will result in a restart and reconnect, but\n  // potentially the subscription could have a transient error.\n  minCount: 0, // don't do any immediate retries\n  baseTimeout: 30*1000 // start with 30s\n});\n\nlet failures = 0;\n\nAutoupdate._retrySubscription = () => {\n  Meteor.subscribe(\"meteor_autoupdate_clientVersions\", {\n    onError(error) {\n      Meteor._debug(\"autoupdate subscription failed\", error);\n      failures++;\n      retry.retryLater(failures, function () {\n        // Just retry making the subscription, don't reload the whole\n        // page. While reloading would catch more cases (for example,\n        // the server went back a version and is now doing old-style hot\n        // code push), it would also be more prone to reload loops,\n        // which look really bad to the user. Just retrying the\n        // subscription over DDP means it is at least possible to fix by\n        // updating the server.\n        Autoupdate._retrySubscription();\n      });\n    },\n\n    onReady() {\n      // Call checkNewVersionDocument with a slight delay, so that the\n      // const handle declaration is guaranteed to be initialized, even if\n      // the added or changed callbacks are called synchronously.\n      const resolved = Promise.resolve();\n      function check(doc) {\n        resolved.then(() => checkNewVersionDocument(doc));\n      }\n\n      const stop = clientVersions.watch(check);\n\n      function checkNewVersionDocument(doc) {\n        if (doc._id !== clientArch) {\n          return;\n        }\n\n        if (doc.versionNonRefreshable !==\n            autoupdateVersions.versionNonRefreshable) {\n          // Non-refreshable assets have changed, so we have to reload the\n          // whole page rather than just replacing <link> tags.\n          if (stop) stop();\n          if (Package.reload) {\n            // The reload package should be provided by ddp-client, which\n            // is provided by the ddp package that autoupdate depends on.\n            Package.reload.Reload._reload();\n          }\n          return;\n        }\n\n        if (doc.versionRefreshable !== autoupdateVersions.versionRefreshable) {\n          autoupdateVersions.versionRefreshable = doc.versionRefreshable;\n\n          // Switch out old css links for the new css links. Inspired by:\n          // https://github.com/guard/guard-livereload/blob/master/js/livereload.js#L710\n          var newCss = doc.assets || [];\n          var oldLinks = [];\n\n          Array.prototype.forEach.call(\n            document.getElementsByTagName('link'),\n            function (link) {\n              if (link.className === '__meteor-css__') {\n                oldLinks.push(link);\n              }\n            }\n          );\n\n          function waitUntilCssLoads(link, callback) {\n            var called;\n\n            link.onload = function () {\n              knownToSupportCssOnLoad = true;\n              if (! called) {\n                called = true;\n                callback();\n              }\n            };\n\n            if (! knownToSupportCssOnLoad) {\n              var id = Meteor.setInterval(function () {\n                if (link.sheet) {\n                  if (! called) {\n                    called = true;\n                    callback();\n                  }\n                  Meteor.clearInterval(id);\n                }\n              }, 50);\n            }\n          }\n\n          let newLinksLeftToLoad = newCss.length;\n          function removeOldLinks() {\n            if (oldLinks.length > 0 &&\n                --newLinksLeftToLoad < 1) {\n              oldLinks.splice(0).forEach(link => {\n                link.parentNode.removeChild(link);\n              });\n            }\n          }\n\n          if (newCss.length > 0) {\n            newCss.forEach(css => {\n              const newLink = document.createElement(\"link\");\n              newLink.setAttribute(\"rel\", \"stylesheet\");\n              newLink.setAttribute(\"type\", \"text/css\");\n              newLink.setAttribute(\"class\", \"__meteor-css__\");\n              newLink.setAttribute(\"href\", css.url);\n\n              waitUntilCssLoads(newLink, function () {\n                Meteor.setTimeout(removeOldLinks, 200);\n              });\n\n              const head = document.getElementsByTagName(\"head\").item(0);\n              head.appendChild(newLink);\n            });\n          } else {\n            removeOldLinks();\n          }\n        }\n      }\n    }\n  });\n};\n\nAutoupdate._retrySubscription();\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"161b2b440a95e842faf9d55399bc3ae9da29e557"}
