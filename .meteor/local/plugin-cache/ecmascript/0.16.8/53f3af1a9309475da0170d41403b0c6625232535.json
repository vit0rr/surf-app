{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/ddp-client/common/MethodInvoker.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/ddp-client/common/MethodInvoker.js","filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/ddp-client/common/MethodInvoker.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/styles","root":"/Users/nicholas/Desktop/projects/local-legends/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"MemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/ddp-client/common/MethodInvoker.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/common/MethodInvoker.js"}},"code":"module.export({\n  \"default\": function () {\n    return MethodInvoker;\n  }\n});\nvar MethodInvoker = /*#__PURE__*/function () {\n  function MethodInvoker(options) {\n    // Public (within this file) fields.\n    this.methodId = options.methodId;\n    this.sentMessage = false;\n    this._callback = options.callback;\n    this._connection = options.connection;\n    this._message = options.message;\n    this._onResultReceived = options.onResultReceived || function () {};\n    this._wait = options.wait;\n    this.noRetry = options.noRetry;\n    this._methodResult = null;\n    this._dataVisible = false;\n\n    // Register with the connection.\n    this._connection._methodInvokers[this.methodId] = this;\n  }\n  // Sends the method message to the server. May be called additional times if\n  // we lose the connection and reconnect before receiving a result.\n  var _proto = MethodInvoker.prototype;\n  _proto.sendMessage = function () {\n    function sendMessage() {\n      // This function is called before sending a method (including resending on\n      // reconnect). We should only (re)send methods where we don't already have a\n      // result!\n      if (this.gotResult()) throw new Error('sendingMethod is called on method with result');\n\n      // If we're re-sending it, it doesn't matter if data was written the first\n      // time.\n      this._dataVisible = false;\n      this.sentMessage = true;\n\n      // If this is a wait method, make all data messages be buffered until it is\n      // done.\n      if (this._wait) this._connection._methodsBlockingQuiescence[this.methodId] = true;\n\n      // Actually send the message.\n      this._connection._send(this._message);\n    }\n    return sendMessage;\n  }() // Invoke the callback, if we have both a result and know that all data has\n  // been written to the local cache.\n  ;\n  _proto._maybeInvokeCallback = function () {\n    function _maybeInvokeCallback() {\n      if (this._methodResult && this._dataVisible) {\n        // Call the callback. (This won't throw: the callback was wrapped with\n        // bindEnvironment.)\n        this._callback(this._methodResult[0], this._methodResult[1]);\n\n        // Forget about this method.\n        delete this._connection._methodInvokers[this.methodId];\n\n        // Let the connection know that this method is finished, so it can try to\n        // move on to the next block of methods.\n        this._connection._outstandingMethodFinished();\n      }\n    }\n    return _maybeInvokeCallback;\n  }() // Call with the result of the method from the server. Only may be called\n  // once; once it is called, you should not call sendMessage again.\n  // If the user provided an onResultReceived callback, call it immediately.\n  // Then invoke the main callback if data is also visible.\n  ;\n  _proto.receiveResult = function () {\n    function receiveResult(err, result) {\n      if (this.gotResult()) throw new Error('Methods should only receive results once');\n      this._methodResult = [err, result];\n      this._onResultReceived(err, result);\n      this._maybeInvokeCallback();\n    }\n    return receiveResult;\n  }() // Call this when all data written by the method is visible. This means that\n  // the method has returns its \"data is done\" message *AND* all server\n  // documents that are buffered at that time have been written to the local\n  // cache. Invokes the main callback if the result has been received.\n  ;\n  _proto.dataVisible = function () {\n    function dataVisible() {\n      this._dataVisible = true;\n      this._maybeInvokeCallback();\n    }\n    return dataVisible;\n  }() // True if receiveResult has been called.\n  ;\n  _proto.gotResult = function () {\n    function gotResult() {\n      return !!this._methodResult;\n    }\n    return gotResult;\n  }();\n  return MethodInvoker;\n}();","map":{"version":3,"names":["module","export","default","MethodInvoker","options","methodId","sentMessage","_callback","callback","_connection","connection","_message","message","_onResultReceived","onResultReceived","_wait","wait","noRetry","_methodResult","_dataVisible","_methodInvokers","_proto","prototype","sendMessage","gotResult","Error","_methodsBlockingQuiescence","_send","_maybeInvokeCallback","_outstandingMethodFinished","receiveResult","err","result","dataVisible"],"sources":["packages/ddp-client/common/MethodInvoker.js"],"sourcesContent":["// A MethodInvoker manages sending a method to the server and calling the user's\n// callbacks. On construction, it registers itself in the connection's\n// _methodInvokers map; it removes itself once the method is fully finished and\n// the callback is invoked. This occurs when it has both received a result,\n// and the data written by it is fully visible.\nexport default class MethodInvoker {\n  constructor(options) {\n    // Public (within this file) fields.\n    this.methodId = options.methodId;\n    this.sentMessage = false;\n\n    this._callback = options.callback;\n    this._connection = options.connection;\n    this._message = options.message;\n    this._onResultReceived = options.onResultReceived || (() => {});\n    this._wait = options.wait;\n    this.noRetry = options.noRetry;\n    this._methodResult = null;\n    this._dataVisible = false;\n\n    // Register with the connection.\n    this._connection._methodInvokers[this.methodId] = this;\n  }\n  // Sends the method message to the server. May be called additional times if\n  // we lose the connection and reconnect before receiving a result.\n  sendMessage() {\n    // This function is called before sending a method (including resending on\n    // reconnect). We should only (re)send methods where we don't already have a\n    // result!\n    if (this.gotResult())\n      throw new Error('sendingMethod is called on method with result');\n\n    // If we're re-sending it, it doesn't matter if data was written the first\n    // time.\n    this._dataVisible = false;\n    this.sentMessage = true;\n\n    // If this is a wait method, make all data messages be buffered until it is\n    // done.\n    if (this._wait)\n      this._connection._methodsBlockingQuiescence[this.methodId] = true;\n\n    // Actually send the message.\n    this._connection._send(this._message);\n  }\n  // Invoke the callback, if we have both a result and know that all data has\n  // been written to the local cache.\n  _maybeInvokeCallback() {\n    if (this._methodResult && this._dataVisible) {\n      // Call the callback. (This won't throw: the callback was wrapped with\n      // bindEnvironment.)\n      this._callback(this._methodResult[0], this._methodResult[1]);\n\n      // Forget about this method.\n      delete this._connection._methodInvokers[this.methodId];\n\n      // Let the connection know that this method is finished, so it can try to\n      // move on to the next block of methods.\n      this._connection._outstandingMethodFinished();\n    }\n  }\n  // Call with the result of the method from the server. Only may be called\n  // once; once it is called, you should not call sendMessage again.\n  // If the user provided an onResultReceived callback, call it immediately.\n  // Then invoke the main callback if data is also visible.\n  receiveResult(err, result) {\n    if (this.gotResult())\n      throw new Error('Methods should only receive results once');\n    this._methodResult = [err, result];\n    this._onResultReceived(err, result);\n    this._maybeInvokeCallback();\n  }\n  // Call this when all data written by the method is visible. This means that\n  // the method has returns its \"data is done\" message *AND* all server\n  // documents that are buffered at that time have been written to the local\n  // cache. Invokes the main callback if the result has been received.\n  dataVisible() {\n    this._dataVisible = true;\n    this._maybeInvokeCallback();\n  }\n  // True if receiveResult has been called.\n  gotResult() {\n    return !!this._methodResult;\n  }\n}\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"53f3af1a9309475da0170d41403b0c6625232535"}
