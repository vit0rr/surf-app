{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","filename":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/client/styles","root":"/Users/nicholas/Desktop/projects/local-legends/client/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js"}},"code":"wrapSession = function (sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n  sessionProto.processMessage = function (msg) {\n    if (true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n      if (msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id);\n\n        //use JSON stringify to save the CPU\n        var startData = {\n          userId: this.userId,\n          params: JSON.stringify(msg.params)\n        };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n        if (msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      }\n\n      // Update session last active time\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n    return originalProcessMessage.call(this, msg);\n  };\n\n  //adding the method context to the current fiber\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n  sessionProto.protocol_handlers.method = function (msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n  sessionProto.protocol_handlers.sub = function (msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if (kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {\n        waitOn: waitList\n      });\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n  sessionProto.protocol_handlers.unsub = function (msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  };\n\n  //track method ending (to get the result of error)\n  var originalSend = sessionProto.send;\n  sessionProto.send = function (msg) {\n    if (msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n      if (kadiraInfo) {\n        if (msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack']);\n\n          // pick the error from the wrapped method handler\n          if (kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack']);\n            // see wrapMethodHanderForErrors() method def for more info\n            if (error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {\n            error: error\n          });\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        }\n\n        //processing the message\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace);\n\n        // error may or may not exist and error tracking can be disabled\n        if (error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        }\n\n        //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n        Kadira._setInfo(null);\n      }\n    }\n    return originalSend.call(this, msg);\n  };\n};\n\n// wrap existing method handlers for capturing errors\n_.each(Meteor.server.method_handlers, function (handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n});\n\n// wrap future method handlers for capturing errors\nvar originalMeteorMethods = Meteor.methods;\nMeteor.methods = function (methodMap) {\n  _.each(methodMap, function (handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n  originalMeteorMethods(methodMap);\n};\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function () {\n    try {\n      return originalHandler.apply(this, arguments);\n    } catch (ex) {\n      if (ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if (typeof ex !== 'object') {\n          ex = {\n            message: ex,\n            stack: ex\n          };\n        }\n        // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {\n            stack: ex.stack,\n            source: 'method'\n          };\n        }\n        Kadira._getInfo().currentError = ex;\n      }\n      throw ex;\n    }\n  };\n}","map":{"version":3,"names":["wrapSession","sessionProto","originalProcessMessage","processMessage","msg","kadiraInfo","session","id","userId","trace","Kadira","tracer","start","waitTimeBuilder","register","startData","params","JSON","stringify","event","waitEventId","_waitEventId","__kadiraInfo","EventBus","emit","models","pubsub","_trackSub","system","handleSessionActivity","call","originalMethodHandler","protocol_handlers","method","unblock","self","_setInfo","waitList","build","eventEnd","waitOn","trackWaitTime","response","env","withValue","orginalSubHandler","sub","orginalUnSubHandler","unsub","originalSend","send","_getInfo","error","_","pick","currentError","stack","endLastEvent","buildTrace","methods","processMethod","options","enableErrorTracking","trackError","each","Meteor","server","method_handlers","handler","name","wrapMethodHanderForErrors","originalMeteorMethods","methodMap","originalHandler","apply","arguments","ex","message","source"],"sources":["packages/mdg:meteor-apm-agent/lib/hijack/wrap_session.js"],"sourcesContent":["wrapSession = function(sessionProto) {\n  var originalProcessMessage = sessionProto.processMessage;\n  sessionProto.processMessage = function(msg) {\n    if(true) {\n      var kadiraInfo = {\n        session: this.id,\n        userId: this.userId\n      };\n\n      if(msg.msg == 'method' || msg.msg == 'sub') {\n        kadiraInfo.trace = Kadira.tracer.start(this, msg);\n        Kadira.waitTimeBuilder.register(this, msg.id);\n\n        //use JSON stringify to save the CPU\n        var startData = { userId: this.userId, params: JSON.stringify(msg.params) };\n        Kadira.tracer.event(kadiraInfo.trace, 'start', startData);\n        var waitEventId = Kadira.tracer.event(kadiraInfo.trace, 'wait', {}, kadiraInfo);\n        msg._waitEventId = waitEventId;\n        msg.__kadiraInfo = kadiraInfo;\n\n        if(msg.msg == 'sub') {\n          // start tracking inside processMessage allows us to indicate\n          // wait time as well\n          Kadira.EventBus.emit('pubsub', 'subReceived', this, msg);\n          Kadira.models.pubsub._trackSub(this, msg);\n        }\n      }\n\n      // Update session last active time\n      Kadira.EventBus.emit('system', 'ddpMessageReceived', this, msg);\n      Kadira.models.system.handleSessionActivity(msg, this);\n    }\n\n    return originalProcessMessage.call(this, msg);\n  };\n\n  //adding the method context to the current fiber\n  var originalMethodHandler = sessionProto.protocol_handlers.method;\n  sessionProto.protocol_handlers.method = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return originalMethodHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = originalMethodHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalSubHandler = sessionProto.protocol_handlers.sub;\n  sessionProto.protocol_handlers.sub = function(msg, unblock) {\n    var self = this;\n    //add context\n    var kadiraInfo = msg.__kadiraInfo;\n    if(kadiraInfo) {\n      Kadira._setInfo(kadiraInfo);\n\n      // end wait event\n      var waitList = Kadira.waitTimeBuilder.build(this, msg.id);\n      Kadira.tracer.eventEnd(kadiraInfo.trace, msg._waitEventId, {waitOn: waitList});\n\n      unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n      var response = Kadira.env.kadiraInfo.withValue(kadiraInfo, function () {\n        return orginalSubHandler.call(self, msg, unblock);\n      });\n      unblock();\n    } else {\n      var response = orginalSubHandler.call(self, msg, unblock);\n    }\n\n    return response;\n  };\n\n  //to capture the currently processing message\n  var orginalUnSubHandler = sessionProto.protocol_handlers.unsub;\n  sessionProto.protocol_handlers.unsub = function(msg, unblock) {\n    unblock = Kadira.waitTimeBuilder.trackWaitTime(this, msg, unblock);\n    var response = orginalUnSubHandler.call(this, msg, unblock);\n    unblock();\n    return response;\n  };\n\n  //track method ending (to get the result of error)\n  var originalSend = sessionProto.send;\n  sessionProto.send = function(msg) {\n    if(msg.msg == 'result') {\n      var kadiraInfo = Kadira._getInfo();\n      if(kadiraInfo) {\n        if(msg.error) {\n          var error = _.pick(msg.error, ['message', 'stack']);\n\n          // pick the error from the wrapped method handler\n          if(kadiraInfo && kadiraInfo.currentError) {\n            // the error stack is wrapped so Meteor._debug can identify\n            // this as a method error.\n            error = _.pick(kadiraInfo.currentError, ['message', 'stack']);\n            // see wrapMethodHanderForErrors() method def for more info\n            if(error.stack && error.stack.stack) {\n              error.stack = error.stack.stack;\n            }\n          }\n\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'error', {error: error});\n        } else {\n          Kadira.tracer.endLastEvent(kadiraInfo.trace);\n          Kadira.tracer.event(kadiraInfo.trace, 'complete');\n        }\n\n        //processing the message\n        var trace = Kadira.tracer.buildTrace(kadiraInfo.trace);\n        Kadira.EventBus.emit('method', 'methodCompleted', trace, this);\n        Kadira.models.methods.processMethod(trace);\n\n        // error may or may not exist and error tracking can be disabled\n        if(error && Kadira.options.enableErrorTracking) {\n          Kadira.models.error.trackError(error, trace);\n        }\n\n        //clean and make sure, fiber is clean\n        //not sure we need to do this, but a preventive measure\n        Kadira._setInfo(null);\n      }\n    }\n\n    return originalSend.call(this, msg);\n  };\n};\n\n// wrap existing method handlers for capturing errors\n_.each(Meteor.server.method_handlers, function(handler, name) {\n  wrapMethodHanderForErrors(name, handler, Meteor.server.method_handlers);\n});\n\n// wrap future method handlers for capturing errors\nvar originalMeteorMethods = Meteor.methods;\nMeteor.methods = function(methodMap) {\n  _.each(methodMap, function(handler, name) {\n    wrapMethodHanderForErrors(name, handler, methodMap);\n  });\n  originalMeteorMethods(methodMap);\n};\n\n\nfunction wrapMethodHanderForErrors(name, originalHandler, methodMap) {\n  methodMap[name] = function() {\n    try{\n      return originalHandler.apply(this, arguments);\n    } catch(ex) {\n      if(ex && Kadira._getInfo()) {\n        // sometimes error may be just an string or a primitive\n        // in that case, we need to make it a psuedo error\n        if(typeof ex !== 'object') {\n          ex = {message: ex, stack: ex};\n        }\n        // Now we are marking this error to get tracked via methods\n        // But, this also triggers a Meteor.debug call and\n        // it only gets the stack\n        // We also track Meteor.debug errors and want to stop\n        // tracking this error. That's why we do this\n        // See Meteor.debug error tracking code for more\n        if (Kadira.options.enableErrorTracking) {\n          ex.stack = {stack: ex.stack, source: 'method'};\n        }\n        Kadira._getInfo().currentError = ex;\n      }\n      throw ex;\n    }\n  }\n}\n"],"mappings":"AAAAA,WAAW,GAAG,SAAAA,CAASC,YAAY,EAAE;EACnC,IAAIC,sBAAsB,GAAGD,YAAY,CAACE,cAAc;EACxDF,YAAY,CAACE,cAAc,GAAG,UAASC,GAAG,EAAE;IAC1C,IAAG,IAAI,EAAE;MACP,IAAIC,UAAU,GAAG;QACfC,OAAO,EAAE,IAAI,CAACC,EAAE;QAChBC,MAAM,EAAE,IAAI,CAACA;MACf,CAAC;MAED,IAAGJ,GAAG,CAACA,GAAG,IAAI,QAAQ,IAAIA,GAAG,CAACA,GAAG,IAAI,KAAK,EAAE;QAC1CC,UAAU,CAACI,KAAK,GAAGC,MAAM,CAACC,MAAM,CAACC,KAAK,CAAC,IAAI,EAAER,GAAG,CAAC;QACjDM,MAAM,CAACG,eAAe,CAACC,QAAQ,CAAC,IAAI,EAAEV,GAAG,CAACG,EAAE,CAAC;;QAE7C;QACA,IAAIQ,SAAS,GAAG;UAAEP,MAAM,EAAE,IAAI,CAACA,MAAM;UAAEQ,MAAM,EAAEC,IAAI,CAACC,SAAS,CAACd,GAAG,CAACY,MAAM;QAAE,CAAC;QAC3EN,MAAM,CAACC,MAAM,CAACQ,KAAK,CAACd,UAAU,CAACI,KAAK,EAAE,OAAO,EAAEM,SAAS,CAAC;QACzD,IAAIK,WAAW,GAAGV,MAAM,CAACC,MAAM,CAACQ,KAAK,CAACd,UAAU,CAACI,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC,EAAEJ,UAAU,CAAC;QAC/ED,GAAG,CAACiB,YAAY,GAAGD,WAAW;QAC9BhB,GAAG,CAACkB,YAAY,GAAGjB,UAAU;QAE7B,IAAGD,GAAG,CAACA,GAAG,IAAI,KAAK,EAAE;UACnB;UACA;UACAM,MAAM,CAACa,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,aAAa,EAAE,IAAI,EAAEpB,GAAG,CAAC;UACxDM,MAAM,CAACe,MAAM,CAACC,MAAM,CAACC,SAAS,CAAC,IAAI,EAAEvB,GAAG,CAAC;QAC3C;MACF;;MAEA;MACAM,MAAM,CAACa,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,oBAAoB,EAAE,IAAI,EAAEpB,GAAG,CAAC;MAC/DM,MAAM,CAACe,MAAM,CAACG,MAAM,CAACC,qBAAqB,CAACzB,GAAG,EAAE,IAAI,CAAC;IACvD;IAEA,OAAOF,sBAAsB,CAAC4B,IAAI,CAAC,IAAI,EAAE1B,GAAG,CAAC;EAC/C,CAAC;;EAED;EACA,IAAI2B,qBAAqB,GAAG9B,YAAY,CAAC+B,iBAAiB,CAACC,MAAM;EACjEhC,YAAY,CAAC+B,iBAAiB,CAACC,MAAM,GAAG,UAAS7B,GAAG,EAAE8B,OAAO,EAAE;IAC7D,IAAIC,IAAI,GAAG,IAAI;IACf;IACA,IAAI9B,UAAU,GAAGD,GAAG,CAACkB,YAAY;IACjC,IAAGjB,UAAU,EAAE;MACbK,MAAM,CAAC0B,QAAQ,CAAC/B,UAAU,CAAC;;MAE3B;MACA,IAAIgC,QAAQ,GAAG3B,MAAM,CAACG,eAAe,CAACyB,KAAK,CAAC,IAAI,EAAElC,GAAG,CAACG,EAAE,CAAC;MACzDG,MAAM,CAACC,MAAM,CAAC4B,QAAQ,CAAClC,UAAU,CAACI,KAAK,EAAEL,GAAG,CAACiB,YAAY,EAAE;QAACmB,MAAM,EAAEH;MAAQ,CAAC,CAAC;MAE9EH,OAAO,GAAGxB,MAAM,CAACG,eAAe,CAAC4B,aAAa,CAAC,IAAI,EAAErC,GAAG,EAAE8B,OAAO,CAAC;MAClE,IAAIQ,QAAQ,GAAGhC,MAAM,CAACiC,GAAG,CAACtC,UAAU,CAACuC,SAAS,CAACvC,UAAU,EAAE,YAAY;QACrE,OAAO0B,qBAAqB,CAACD,IAAI,CAACK,IAAI,EAAE/B,GAAG,EAAE8B,OAAO,CAAC;MACvD,CAAC,CAAC;MACFA,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACL,IAAIQ,QAAQ,GAAGX,qBAAqB,CAACD,IAAI,CAACK,IAAI,EAAE/B,GAAG,EAAE8B,OAAO,CAAC;IAC/D;IAEA,OAAOQ,QAAQ;EACjB,CAAC;;EAED;EACA,IAAIG,iBAAiB,GAAG5C,YAAY,CAAC+B,iBAAiB,CAACc,GAAG;EAC1D7C,YAAY,CAAC+B,iBAAiB,CAACc,GAAG,GAAG,UAAS1C,GAAG,EAAE8B,OAAO,EAAE;IAC1D,IAAIC,IAAI,GAAG,IAAI;IACf;IACA,IAAI9B,UAAU,GAAGD,GAAG,CAACkB,YAAY;IACjC,IAAGjB,UAAU,EAAE;MACbK,MAAM,CAAC0B,QAAQ,CAAC/B,UAAU,CAAC;;MAE3B;MACA,IAAIgC,QAAQ,GAAG3B,MAAM,CAACG,eAAe,CAACyB,KAAK,CAAC,IAAI,EAAElC,GAAG,CAACG,EAAE,CAAC;MACzDG,MAAM,CAACC,MAAM,CAAC4B,QAAQ,CAAClC,UAAU,CAACI,KAAK,EAAEL,GAAG,CAACiB,YAAY,EAAE;QAACmB,MAAM,EAAEH;MAAQ,CAAC,CAAC;MAE9EH,OAAO,GAAGxB,MAAM,CAACG,eAAe,CAAC4B,aAAa,CAAC,IAAI,EAAErC,GAAG,EAAE8B,OAAO,CAAC;MAClE,IAAIQ,QAAQ,GAAGhC,MAAM,CAACiC,GAAG,CAACtC,UAAU,CAACuC,SAAS,CAACvC,UAAU,EAAE,YAAY;QACrE,OAAOwC,iBAAiB,CAACf,IAAI,CAACK,IAAI,EAAE/B,GAAG,EAAE8B,OAAO,CAAC;MACnD,CAAC,CAAC;MACFA,OAAO,CAAC,CAAC;IACX,CAAC,MAAM;MACL,IAAIQ,QAAQ,GAAGG,iBAAiB,CAACf,IAAI,CAACK,IAAI,EAAE/B,GAAG,EAAE8B,OAAO,CAAC;IAC3D;IAEA,OAAOQ,QAAQ;EACjB,CAAC;;EAED;EACA,IAAIK,mBAAmB,GAAG9C,YAAY,CAAC+B,iBAAiB,CAACgB,KAAK;EAC9D/C,YAAY,CAAC+B,iBAAiB,CAACgB,KAAK,GAAG,UAAS5C,GAAG,EAAE8B,OAAO,EAAE;IAC5DA,OAAO,GAAGxB,MAAM,CAACG,eAAe,CAAC4B,aAAa,CAAC,IAAI,EAAErC,GAAG,EAAE8B,OAAO,CAAC;IAClE,IAAIQ,QAAQ,GAAGK,mBAAmB,CAACjB,IAAI,CAAC,IAAI,EAAE1B,GAAG,EAAE8B,OAAO,CAAC;IAC3DA,OAAO,CAAC,CAAC;IACT,OAAOQ,QAAQ;EACjB,CAAC;;EAED;EACA,IAAIO,YAAY,GAAGhD,YAAY,CAACiD,IAAI;EACpCjD,YAAY,CAACiD,IAAI,GAAG,UAAS9C,GAAG,EAAE;IAChC,IAAGA,GAAG,CAACA,GAAG,IAAI,QAAQ,EAAE;MACtB,IAAIC,UAAU,GAAGK,MAAM,CAACyC,QAAQ,CAAC,CAAC;MAClC,IAAG9C,UAAU,EAAE;QACb,IAAGD,GAAG,CAACgD,KAAK,EAAE;UACZ,IAAIA,KAAK,GAAGC,CAAC,CAACC,IAAI,CAAClD,GAAG,CAACgD,KAAK,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;;UAEnD;UACA,IAAG/C,UAAU,IAAIA,UAAU,CAACkD,YAAY,EAAE;YACxC;YACA;YACAH,KAAK,GAAGC,CAAC,CAACC,IAAI,CAACjD,UAAU,CAACkD,YAAY,EAAE,CAAC,SAAS,EAAE,OAAO,CAAC,CAAC;YAC7D;YACA,IAAGH,KAAK,CAACI,KAAK,IAAIJ,KAAK,CAACI,KAAK,CAACA,KAAK,EAAE;cACnCJ,KAAK,CAACI,KAAK,GAAGJ,KAAK,CAACI,KAAK,CAACA,KAAK;YACjC;UACF;UAEA9C,MAAM,CAACC,MAAM,CAAC8C,YAAY,CAACpD,UAAU,CAACI,KAAK,CAAC;UAC5CC,MAAM,CAACC,MAAM,CAACQ,KAAK,CAACd,UAAU,CAACI,KAAK,EAAE,OAAO,EAAE;YAAC2C,KAAK,EAAEA;UAAK,CAAC,CAAC;QAChE,CAAC,MAAM;UACL1C,MAAM,CAACC,MAAM,CAAC8C,YAAY,CAACpD,UAAU,CAACI,KAAK,CAAC;UAC5CC,MAAM,CAACC,MAAM,CAACQ,KAAK,CAACd,UAAU,CAACI,KAAK,EAAE,UAAU,CAAC;QACnD;;QAEA;QACA,IAAIA,KAAK,GAAGC,MAAM,CAACC,MAAM,CAAC+C,UAAU,CAACrD,UAAU,CAACI,KAAK,CAAC;QACtDC,MAAM,CAACa,QAAQ,CAACC,IAAI,CAAC,QAAQ,EAAE,iBAAiB,EAAEf,KAAK,EAAE,IAAI,CAAC;QAC9DC,MAAM,CAACe,MAAM,CAACkC,OAAO,CAACC,aAAa,CAACnD,KAAK,CAAC;;QAE1C;QACA,IAAG2C,KAAK,IAAI1C,MAAM,CAACmD,OAAO,CAACC,mBAAmB,EAAE;UAC9CpD,MAAM,CAACe,MAAM,CAAC2B,KAAK,CAACW,UAAU,CAACX,KAAK,EAAE3C,KAAK,CAAC;QAC9C;;QAEA;QACA;QACAC,MAAM,CAAC0B,QAAQ,CAAC,IAAI,CAAC;MACvB;IACF;IAEA,OAAOa,YAAY,CAACnB,IAAI,CAAC,IAAI,EAAE1B,GAAG,CAAC;EACrC,CAAC;AACH,CAAC;;AAED;AACAiD,CAAC,CAACW,IAAI,CAACC,MAAM,CAACC,MAAM,CAACC,eAAe,EAAE,UAASC,OAAO,EAAEC,IAAI,EAAE;EAC5DC,yBAAyB,CAACD,IAAI,EAAED,OAAO,EAAEH,MAAM,CAACC,MAAM,CAACC,eAAe,CAAC;AACzE,CAAC,CAAC;;AAEF;AACA,IAAII,qBAAqB,GAAGN,MAAM,CAACN,OAAO;AAC1CM,MAAM,CAACN,OAAO,GAAG,UAASa,SAAS,EAAE;EACnCnB,CAAC,CAACW,IAAI,CAACQ,SAAS,EAAE,UAASJ,OAAO,EAAEC,IAAI,EAAE;IACxCC,yBAAyB,CAACD,IAAI,EAAED,OAAO,EAAEI,SAAS,CAAC;EACrD,CAAC,CAAC;EACFD,qBAAqB,CAACC,SAAS,CAAC;AAClC,CAAC;AAGD,SAASF,yBAAyBA,CAACD,IAAI,EAAEI,eAAe,EAAED,SAAS,EAAE;EACnEA,SAAS,CAACH,IAAI,CAAC,GAAG,YAAW;IAC3B,IAAG;MACD,OAAOI,eAAe,CAACC,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;IAC/C,CAAC,CAAC,OAAMC,EAAE,EAAE;MACV,IAAGA,EAAE,IAAIlE,MAAM,CAACyC,QAAQ,CAAC,CAAC,EAAE;QAC1B;QACA;QACA,IAAG,OAAOyB,EAAE,KAAK,QAAQ,EAAE;UACzBA,EAAE,GAAG;YAACC,OAAO,EAAED,EAAE;YAAEpB,KAAK,EAAEoB;UAAE,CAAC;QAC/B;QACA;QACA;QACA;QACA;QACA;QACA;QACA,IAAIlE,MAAM,CAACmD,OAAO,CAACC,mBAAmB,EAAE;UACtCc,EAAE,CAACpB,KAAK,GAAG;YAACA,KAAK,EAAEoB,EAAE,CAACpB,KAAK;YAAEsB,MAAM,EAAE;UAAQ,CAAC;QAChD;QACApE,MAAM,CAACyC,QAAQ,CAAC,CAAC,CAACI,YAAY,GAAGqB,EAAE;MACrC;MACA,MAAMA,EAAE;IACV;EACF,CAAC;AACH"},"sourceType":"module","externalDependencies":{},"hash":"0f049d4b04b158b4185bfa040665a5b95569cc01"}
