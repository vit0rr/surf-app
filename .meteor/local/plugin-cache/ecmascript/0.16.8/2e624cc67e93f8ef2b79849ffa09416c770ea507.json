{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/ddp-server/livedata_server.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/ddp-server/livedata_server.js","filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/ddp-server/livedata_server.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/styles","root":"/Users/nicholas/Desktop/projects/local-legends/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/ddp-server/livedata_server.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/livedata_server.js"}},"code":"let _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default(v) {\n    _objectSpread = v;\n  }\n}, 0);\nDDPServer = {};\nvar Fiber = Npm.require('fibers');\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: false\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: true\n  },\n  // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n  // used by multiple publications. This has some memory overhead, but it still does not do\n  // diffing so it's faster and slimmer than SERVER_MERGE.\n  NO_MERGE_MULTI: {\n    useDummyDocumentView: true,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  }\n};\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\nvar DummyDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\nObject.assign(DummyDocumentView.prototype, {\n  getFields: function () {\n    return {};\n  },\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    changeCollector[key] = undefined;\n  },\n  changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n    changeCollector[key] = value;\n  }\n});\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\nDDPServer._SessionDocumentView = SessionDocumentView;\n_.extend(SessionDocumentView.prototype, {\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\") return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList) return;\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0) removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined && !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n  changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\") return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{\n        subscriptionHandle: subscriptionHandle,\n        value: value\n      }]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({\n        subscriptionHandle: subscriptionHandle,\n        value: value\n      });\n    }\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\nDDPServer._SessionCollectionView = SessionCollectionView;\nObject.assign(SessionCollectionView.prototype, {\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now)) fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function (key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n        docView = new DummyDocumentView();\n      } else {\n        docView = new SessionDocumentView();\n      }\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added) self.callbacks.added(self.collectionName, id, changeCollector);else self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView) throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined) docView.clearField(subscriptionHandle, key, changedResult);else docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n  self.server = server;\n  self.version = version;\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n  self.blocked = false;\n  self.workerRunning = false;\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n  self.userId = null;\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n  self.send({\n    msg: 'connected',\n    session: self.id\n  });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({\n          msg: 'ping'\n        });\n      }\n    });\n    self.heartbeat.start();\n  }\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", 1);\n};\nObject.assign(Session.prototype, {\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending) self.send({\n      msg: \"ready\",\n      subs: subscriptionIds\n    });else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName)) this.send({\n      msg: \"added\",\n      collection: collectionName,\n      id,\n      fields\n    });\n  },\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields)) return;\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName)) this.send({\n      msg: \"removed\",\n      collection: collectionName,\n      id\n    });\n  },\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName, self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n        this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (!self.inQueue) return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"sessions\", -1);\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP) Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {\n      msg: 'error',\n      reason: reason\n    };\n    if (offendingMessage) msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue)\n      // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings) self.send({\n        msg: \"pong\",\n        id: msg_in.id\n      });\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n    self.inQueue.push(msg_in);\n    if (self.workerRunning) return;\n    self.workerRunning = true;\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n      Fiber(function () {\n        var blocked = true;\n        var unblock = function () {\n          if (!blocked) return; // idempotent\n          blocked = false;\n          processNext();\n        };\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n        if (_.has(self.protocol_handlers, msg.msg)) self.protocol_handlers[msg.msg].call(self, msg, unblock);else self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n    processNext();\n  },\n  protocol_handlers: {\n    sub: function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof msg.id !== \"string\" || typeof msg.name !== \"string\" || 'params' in msg && !(msg.params instanceof Array)) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub',\n          id: msg.id,\n          error: new Meteor.Error(404, \"Subscription '\".concat(msg.name, \"' not found\"))\n        });\n        return;\n      }\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub',\n            id: msg.id,\n            error: new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            })\n          });\n          return;\n        }\n      }\n      var handler = self.server.publish_handlers[msg.name];\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n    unsub: function (msg) {\n      var self = this;\n      self._stopSubscription(msg.id);\n    },\n    method: function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof msg.id !== \"string\" || typeof msg.method !== \"string\" || 'params' in msg && !(msg.params instanceof Array) || 'randomSeed' in msg && typeof msg.randomSeed !== \"string\") {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence();\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated',\n          methods: [msg.id]\n        });\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result',\n          id: msg.id,\n          error: new Meteor.Error(404, \"Method '\".concat(msg.method, \"' not found\"))\n        });\n        fence.arm();\n        return;\n      }\n      var setUserId = function (userId) {\n        self._setUserId(userId);\n      };\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\"too-many-requests\", DDPRateLimiter.getErrorMessage(rateLimitResult), {\n              timeToReset: rateLimitResult.timeToReset\n            }));\n            return;\n          }\n        }\n        const getCurrentMethodInvocationResult = () => {\n          const currentContext = DDP._CurrentMethodInvocation._setNewContextAndGetCurrent(invocation);\n          try {\n            let result;\n            const resultOrThenable = maybeAuditArgumentChecks(handler, invocation, msg.params, \"call to '\" + msg.method + \"'\");\n            const isThenable = resultOrThenable && typeof resultOrThenable.then === 'function';\n            if (isThenable) {\n              result = Promise.await(resultOrThenable);\n            } else {\n              result = resultOrThenable;\n            }\n            return result;\n          } finally {\n            DDP._CurrentMethodInvocation._set(currentContext);\n          }\n        };\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, getCurrentMethodInvocationResult));\n      });\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n      promise.then(result => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, exception => {\n        finish();\n        payload.error = wrapInternalException(exception, \"while invoking method '\".concat(msg.method, \"'\"));\n        self.send(payload);\n      });\n    }\n  },\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function (userId) {\n    var self = this;\n    if (userId !== null && typeof userId !== \"string\") throw new Error(\"setUserId must be called on string or null, not \" + typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n      oldNamedSubs.forEach(function (sub, subscriptionId) {\n        var newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        newSub._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n    var sub = new Subscription(self, handler, subId, params, name);\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n    if (subId) self._namedSubs.set(subId, sub);else self._universalSubs.push(sub);\n    sub._runHandler();\n  },\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n    var response = {\n      msg: 'nosub',\n      id: subId\n    };\n    if (error) {\n      response.error = wrapInternalException(error, subName ? \"from sub \" + subName + \" id \" + subId : \"from sub id \" + subId);\n    }\n    self.send(response);\n  },\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n    if (httpForwardedCount === 0) return self.socket.remoteAddress;\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (!_.isString(forwardedFor)) return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length) return null;\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", 1);\n};\nObject.assign(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () => maybeAuditArgumentChecks(self._handler, self, EJSON.clone(self._params),\n      // It's OK that this would look weird for universal subscriptions,\n      // because they have no arguments so there can never be an\n      // audit-argument-checks failure.\n      \"publisher '\" + self._name + \"'\"));\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable = resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      Promise.resolve(resultOrThenable).then(function () {\n        return self._publishHandlerResult.bind(self)(...arguments);\n      }, e => self.error(e));\n    } else {\n      self._publishHandlerResult(resultOrThenable);\n    }\n  },\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (!_.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\"Publish function returned multiple cursors for collection \" + collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      }\n      ;\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \" + \"an array of Cursors\"));\n    }\n  },\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function () {\n    var self = this;\n    if (self._deactivated) return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\"livedata\", \"subscriptions\", -1);\n  },\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(self._session, self._handler, self._subscriptionId, self._params, self._name);\n  },\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated()) return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated()) callback();else self._stopCallbacks.push(callback);\n  },\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added(collectionName, id, fields) {\n    if (this._isDeactivated()) return;\n    id = this._idFilter.idStringify(id);\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed(collectionName, id, fields) {\n    if (this._isDeactivated()) return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed(collectionName, id) {\n    if (this._isDeactivated()) return;\n    id = this._idFilter.idStringify(id);\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated()) return;\n    if (!self._subscriptionId) return; // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = _objectSpread({\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE\n  }, options);\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n  self.method_handlers = {};\n  self._publicationStrategies = {};\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer();\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n    var sendError = function (reason, offendingMessage) {\n      var msg = {\n        msg: 'error',\n        reason: reason\n      };\n      if (offendingMessage) msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\nObject.assign(Server.prototype, {\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n  /**\n   * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param collectionName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(collectionName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(\"Invalid merge strategy: \".concat(strategy, \" \\n        for collection \").concat(collectionName));\n    }\n    this._publicationStrategies[collectionName] = strategy;\n  },\n  /**\n   * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param collectionName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(collectionName) {\n    return this._publicationStrategies[collectionName] || this.options.defaultPublicationStrategy;\n  },\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof msg.version === 'string' && _.isArray(msg.support) && _.all(msg.support, _.isString) && _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({\n        msg: 'failed',\n        version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]\n      }));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({\n        msg: 'failed',\n        version: version\n      }));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession) callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n    if (!_.isObject(name)) {\n      options = options || {};\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" + \"** you still have autopublish turned on. Because autopublish is still\\n\" + \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" + \"** will still be sent to all clients.\\n\" + \"**\\n\" + \"** Turn off autopublish by removing the autopublish package:\\n\" + \"**\\n\" + \"**   $ meteor remove autopublish\\n\" + \"**\\n\" + \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" + \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n      if (name) self.publish_handlers[name] = handler;else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function () {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    } else {\n      _.each(name, function (value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n  call: function (name) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      args[_key - 1] = arguments[_key];\n    }\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n    return this.apply(name, args, callback);\n  },\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    return this.applyAsync(name, args);\n  },\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(result => callback(undefined, result), exception => callback(exception));\n    } else {\n      return promise.await();\n    }\n  },\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (!handler) {\n      return Promise.reject(new Meteor.Error(404, \"Method '\".concat(name, \"' not found\")));\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function () {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function (userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function (userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n    return new Promise(resolve => resolve(DDP._CurrentMethodInvocation.withValue(invocation, () => maybeAuditArgumentChecks(handler, invocation, EJSON.clone(args), \"internal call to '\" + name + \"'\")))).then(EJSON.clone);\n  },\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session) return session._socketUrl;else return null;\n  }\n});\nvar calculateVersion = function (clientSupportedVersions, serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\nDDPServer._calculateVersion = calculateVersion;\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe) return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" + \"does not have isClientSafe property set; ignoring\");\n  }\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(f, context, args, description);\n  }\n  return f.apply(context, args);\n};","map":{"version":3,"names":["_objectSpread","module","link","default","v","DDPServer","Fiber","Npm","require","publicationStrategies","SERVER_MERGE","useDummyDocumentView","useCollectionView","doAccountingForCollection","NO_MERGE_NO_HISTORY","NO_MERGE","NO_MERGE_MULTI","DummyDocumentView","self","existsIn","Set","dataByKey","Map","Object","assign","prototype","getFields","clearField","subscriptionHandle","key","changeCollector","undefined","changeField","value","isAdd","SessionDocumentView","_SessionDocumentView","_","extend","ret","forEach","precedenceList","get","removedValue","i","length","precedence","splice","delete","EJSON","equals","clone","has","set","elt","find","push","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","isEmpty","size","diff","previous","DiffSequence","diffMaps","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","diffObjects","prev","now","changed","docView","Meteor","server","getPublicationStrategy","add","each","changedResult","Error","err","Session","version","socket","options","Random","initialized","inQueue","_DoubleEndedQueue","blocked","workerRunning","cachedUnblock","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","url","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","send","msg","session","startUniversalSubs","run","heartbeatInterval","setWebsocketTimeout","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","_canSend","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","callback","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","unblock","onMessageHook","protocol_handlers","call","sub","name","params","Array","publish_handlers","error","concat","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","fence","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","setUserId","_setUserId","invocation","MethodInvocation","isSimulation","connection","promise","Promise","resolve","reject","getCurrentMethodInvocationResult","currentContext","DDP","_CurrentMethodInvocation","_setNewContextAndGetCurrent","result","resultOrThenable","maybeAuditArgumentChecks","isThenable","then","await","_set","_CurrentWriteFence","withValue","finish","payload","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","newSub","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","unblockHander","subName","maybeSub","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","process","env","remoteAddress","forwardedFor","isString","trim","split","_session","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","_CurrentPublicationInvocation","e","_isDeactivated","_publishHandlerResult","arguments","res","isCursor","c","_publishCursor","ready","isArray","all","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","strId","onStop","ids","Server","defaultPublicationStrategy","onConnectionHook","Hook","debugPrintExceptions","_publicationStrategies","sessions","stream_server","StreamServer","register","on","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","onConnection","setPublicationStrategy","strategy","values","includes","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","func","_len","args","_key","pop","apply","callAsync","_len2","_key2","applyAsync","currentMethodInvocation","currentPublicationInvocation","makeRpcSeed","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","message","details","_expectedByTest","stack","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked"],"sources":["packages/ddp-server/livedata_server.js"],"sourcesContent":["DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// Publication strategies define how we handle data from published cursors at the collection level\n// This allows someone to:\n// - Choose a trade-off between client-server bandwidth and server memory usage\n// - Implement special (non-mongo) collections like volatile message queues\nconst publicationStrategies = {\n  // SERVER_MERGE is the default strategy.\n  // When using this strategy, the server maintains a copy of all data a connection is subscribed to.\n  // This allows us to only send deltas over multiple publications.\n  SERVER_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: true,\n    doAccountingForCollection: true,\n  },\n  // The NO_MERGE_NO_HISTORY strategy results in the server sending all publication data\n  // directly to the client. It does not remember what it has previously sent\n  // to it will not trigger removed messages when a subscription is stopped.\n  // This should only be chosen for special use cases like send-and-forget queues.\n  NO_MERGE_NO_HISTORY: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: false,\n  },\n  // NO_MERGE is similar to NO_MERGE_NO_HISTORY but the server will remember the IDs it has\n  // sent to the client so it can remove them when a subscription is stopped.\n  // This strategy can be used when a collection is only used in a single publication.\n  NO_MERGE: {\n    useDummyDocumentView: false,\n    useCollectionView: false,\n    doAccountingForCollection: true,\n  },\n  // NO_MERGE_MULTI is similar to `NO_MERGE`, but it does track whether a document is\n  // used by multiple publications. This has some memory overhead, but it still does not do\n  // diffing so it's faster and slimmer than SERVER_MERGE.\n  NO_MERGE_MULTI: {\n    useDummyDocumentView: true,\n    useCollectionView: true,\n    doAccountingForCollection: true\n  }\n};\n\nDDPServer.publicationStrategies = publicationStrategies;\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported).\nvar DummyDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nObject.assign(DummyDocumentView.prototype, {\n  getFields: function () {\n    return {}\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    changeCollector[key] = undefined\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    changeCollector[key] = value\n  }\n});\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = new Set(); // set of subscriptionHandle\n  self.dataByKey = new Map(); // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    self.dataByKey.forEach(function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey.get(key);\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (precedenceList.length === 0) {\n      self.dataByKey.delete(key);\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!self.dataByKey.has(key)) {\n      self.dataByKey.set(key, [{subscriptionHandle: subscriptionHandle,\n                                value: value}]);\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey.get(key);\n    var elt;\n    if (!isAdd) {\n      elt = precedenceList.find(function (precedence) {\n          return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = new Map();\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\nObject.assign(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return self.documents.size === 0;\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffMaps(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents.get(id);\n    var added = false;\n    if (!docView) {\n      added = true;\n      if (Meteor.server.getPublicationStrategy(this.collectionName).useDummyDocumentView) {\n        docView = new DummyDocumentView();\n      } else {\n        docView = new SessionDocumentView();\n      }\n\n      self.documents.set(id, docView);\n    }\n    docView.existsIn.add(subscriptionHandle);\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents.get(id);\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents.get(id);\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    docView.existsIn.delete(subscriptionHandle);\n    if (docView.existsIn.size === 0) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      self.documents.delete(id);\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      docView.dataByKey.forEach(function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // Set to null when the session is destroyed. Multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  self.cachedUnblock = null;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = new Map();\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = new Map();\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // When we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeats.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\nObject.assign(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  _canSend(collectionName) {\n    return this._isSending || !this.server.getPublicationStrategy(collectionName).useCollectionView;\n  },\n\n\n  sendAdded(collectionName, id, fields) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"added\", collection: collectionName, id, fields});\n  },\n\n  sendChanged(collectionName, id, fields) {\n    if (_.isEmpty(fields))\n      return;\n\n    if (this._canSend(collectionName)) {\n      this.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id,\n        fields\n      });\n    }\n  },\n\n  sendRemoved(collectionName, id) {\n    if (this._canSend(collectionName))\n      this.send({msg: \"removed\", collection: collectionName, id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    var ret = self.collectionViews.get(collectionName);\n    if (!ret) {\n      ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n      self.collectionViews.set(collectionName, ret);\n    }\n    return ret;\n  },\n\n  added(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.added(subscriptionHandle, id, fields);\n    } else {\n      this.sendAdded(collectionName, id, fields);\n    }\n  },\n\n  removed(subscriptionHandle, collectionName, id) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.removed(subscriptionHandle, id);\n      if (view.isEmpty()) {\n         this.collectionViews.delete(collectionName);\n      }\n    } else {\n      this.sendRemoved(collectionName, id);\n    }\n  },\n\n  changed(subscriptionHandle, collectionName, id, fields) {\n    if (this.server.getPublicationStrategy(collectionName).useCollectionView) {\n      const view = this.getCollectionView(collectionName);\n      view.changed(subscriptionHandle, id, fields);\n    } else {\n      this.sendChanged(collectionName, id, fields);\n    }\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = new Map();\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // Stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now).\n  // It should be a JSON object (it will be stringified).\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. As a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield). Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other).\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeats use Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, there is nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg, unblock) {\n      var self = this;\n\n      // cacheUnblock temporarly, so we can capture it later\n      // we will use unblock in current eventLoop, so this is safe\n      self.cachedUnblock = unblock;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (self._namedSubs.has(msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n      // cleaning cached unblock\n      self.cachedUnblock = null;\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // Reject malformed messages.\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // Set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // Find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        const getCurrentMethodInvocationResult = () => {\n          const currentContext = DDP._CurrentMethodInvocation._setNewContextAndGetCurrent(\n            invocation\n          );\n\n          try {\n            let result;\n            const resultOrThenable = maybeAuditArgumentChecks(\n              handler,\n              invocation,\n              msg.params,\n              \"call to '\" + msg.method + \"'\"\n            );\n            const isThenable =\n              resultOrThenable && typeof resultOrThenable.then === 'function';\n            if (isThenable) {\n              result = Promise.await(resultOrThenable);\n            } else {\n              result = resultOrThenable;\n            }\n            return result;\n          } finally {\n            DDP._CurrentMethodInvocation._set(currentContext);\n          }\n        };\n\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, getCurrentMethodInvocationResult));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then(result => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    self._namedSubs.forEach(f);\n    self._universalSubs.forEach(f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffMaps(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        rightValue.documents.forEach(function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        leftValue.documents.forEach(function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session. They will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription).\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = new Map();\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = new Map();\n      self._universalSubs = [];\n\n      oldNamedSubs.forEach(function (sub, subscriptionId) {\n        var newSub = sub._recreate();\n        self._namedSubs.set(subscriptionId, newSub);\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        newSub._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n\n    let unblockHander = self.cachedUnblock;\n    // _startSubscription may call from a lot places\n    // so cachedUnblock might be null in somecases\n    // assign the cachedUnblock\n    sub.unblock = unblockHander || (() => {});\n\n    if (subId)\n      self._namedSubs.set(subId, sub);\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // Tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n    if (subId) {\n      var maybeSub = self._namedSubs.get(subId);\n      if (maybeSub) {\n        subName = maybeSub._name;\n        maybeSub._removeAllDocuments();\n        maybeSub._deactivate();\n        self._namedSubs.delete(subId);\n      }\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // Tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    self._namedSubs.forEach(function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = new Map();\n\n    self._universalSubs.forEach(function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// Ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // My subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // Undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // Has _deactivate been called?\n  self._deactivated = false;\n\n  // Stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // The set of (collection, documentid) that this subscription has\n  // an opinion about.\n  self._documents = new Map();\n\n  // Remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a DDP consumer that isn't minimongo.\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\nObject.assign(Subscription.prototype, {\n  _runHandler: function() {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    if (!this.unblock) {\n      this.unblock = () => {};\n    }\n\n    const self = this;\n    let resultOrThenable = null;\n    try {\n      resultOrThenable = DDP._CurrentPublicationInvocation.withValue(self, () =>\n        maybeAuditArgumentChecks(\n          self._handler,\n          self,\n          EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"\n        )\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated()) return;\n\n    // Both conventional and async publish handler functions are supported.\n    // If an object is returned with a then() function, it is either a promise\n    // or thenable and will be resolved asynchronously.\n    const isThenable =\n      resultOrThenable && typeof resultOrThenable.then === 'function';\n    if (isThenable) {\n      Promise.resolve(resultOrThenable).then(\n        (...args) => self._publishHandlerResult.bind(self)(...args),\n        e => self.error(e)\n      );\n    } else {\n      self._publishHandlerResult(resultOrThenable);\n    }\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // Check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // Find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // Truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package['facts-base'] && Package['facts-base'].Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // Tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      self._documents.forEach(function (collectionDocs, collectionName) {\n        collectionDocs.forEach(function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      let ids = this._documents.get(collectionName);\n      if (ids == null) {\n        ids = new Set();\n        this._documents.set(collectionName, ids);\n      }\n      ids.add(id);\n    }\n\n    this._session.added(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed (collectionName, id, fields) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n    this._session.changed(this._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed (collectionName, id) {\n    if (this._isDeactivated())\n      return;\n    id = this._idFilter.idStringify(id);\n\n    if (this._session.server.getPublicationStrategy(collectionName).doAccountingForCollection) {\n      // We don't bother to delete sets of things in a collection if the\n      // collection is empty.  It could break _removeAllDocuments.\n      this._documents.get(collectionName).delete(id);\n    }\n\n    this._session.removed(this._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // Unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options = {}) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true,\n    defaultPublicationStrategy: publicationStrategies.SERVER_MERGE,\n    ...options,\n  };\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self._publicationStrategies = {};\n\n  self.sessions = new Map(); // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg, e);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\nObject.assign(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Set publication strategy for the given collection. Publications strategies are available from `DDPServer.publicationStrategies`. You call this method from `Meteor.server`, like `Meteor.server.setPublicationStrategy()`\n   * @locus Server\n   * @alias setPublicationStrategy\n   * @param collectionName {String}\n   * @param strategy {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   */\n  setPublicationStrategy(collectionName, strategy) {\n    if (!Object.values(publicationStrategies).includes(strategy)) {\n      throw new Error(`Invalid merge strategy: ${strategy} \n        for collection ${collectionName}`);\n    }\n    this._publicationStrategies[collectionName] = strategy;\n  },\n\n  /**\n   * @summary Gets the publication strategy for the requested collection. You call this method from `Meteor.server`, like `Meteor.server.getPublicationStrategy()`\n   * @locus Server\n   * @alias getPublicationStrategy\n   * @param collectionName {String}\n   * @memberOf Meteor.server\n   * @importFromPackage meteor\n   * @return {{useCollectionView: boolean, doAccountingForCollection: boolean}}\n   */\n  getPublicationStrategy(collectionName) {\n    return this._publicationStrategies[collectionName]\n      || this.options.defaultPublicationStrategy;\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions.set(socket._meteorSession.id, socket._meteorSession);\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish).\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // pick stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it, but this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code).\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        self.sessions.forEach(function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function() {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    self.sessions.delete(session.id);\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    return this.applyAsync(name, args);\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case).\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise.await();\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function() {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function(userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function(userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise(resolve => resolve(\n      DDP._CurrentMethodInvocation.withValue(\n        invocation,\n        () => maybeAuditArgumentChecks(\n          handler, invocation, EJSON.clone(args),\n          \"internal call to '\" + name + \"'\"\n        )\n      )\n    )).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions.get(sessionId);\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // Tests can set the '_expectedByTest' flag on an exception so it won't go to\n  // the server log.\n  if (!exception._expectedByTest) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"2e624cc67e93f8ef2b79849ffa09416c770ea507"}
