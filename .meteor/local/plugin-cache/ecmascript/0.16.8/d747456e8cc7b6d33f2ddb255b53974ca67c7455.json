{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minimongo/local_collection.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/minimongo/local_collection.js","filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minimongo/local_collection.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/styles","root":"/Users/nicholas/Desktop/projects/local-legends/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"MemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minimongo/local_collection.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/local_collection.js"}},"code":"var _toConsumableArray;\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 2);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 3);\nmodule.export({\n  \"default\": function () {\n    return LocalCollection;\n  }\n});\nvar Cursor;\nmodule.link(\"./cursor.js\", {\n  \"default\": function (v) {\n    Cursor = v;\n  }\n}, 0);\nvar ObserveHandle;\nmodule.link(\"./observe_handle.js\", {\n  \"default\": function (v) {\n    ObserveHandle = v;\n  }\n}, 1);\nvar hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;\nmodule.link(\"./common.js\", {\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  isIndexable: function (v) {\n    isIndexable = v;\n  },\n  isNumericKey: function (v) {\n    isNumericKey = v;\n  },\n  isOperatorObject: function (v) {\n    isOperatorObject = v;\n  },\n  populateDocumentWithQueryFields: function (v) {\n    populateDocumentWithQueryFields = v;\n  },\n  projectionDetails: function (v) {\n    projectionDetails = v;\n  }\n}, 2);\nvar LocalCollection = /*#__PURE__*/function () {\n  function LocalCollection(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap();\n    this._observeQueue = new Meteor._SynchronousQueue();\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n  var _proto = LocalCollection.prototype;\n  _proto.countDocuments = function () {\n    function countDocuments(selector, options) {\n      return this.find(selector !== null && selector !== void 0 ? selector : {}, options).countAsync();\n    }\n    return countDocuments;\n  }();\n  _proto.estimatedDocumentCount = function () {\n    function estimatedDocumentCount(options) {\n      return this.find({}, options).countAsync();\n    }\n    return estimatedDocumentCount;\n  }() // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  ;\n  _proto.find = function () {\n    function find(selector, options) {\n      // default syntax for everything is to omit the selector argument.\n      // but if selector is explicitly passed in as false or undefined, we\n      // want a selector that matches nothing.\n      if (arguments.length === 0) {\n        selector = {};\n      }\n      return new LocalCollection.Cursor(this, selector, options);\n    }\n    return find;\n  }();\n  _proto.findOne = function () {\n    function findOne(selector) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (arguments.length === 0) {\n        selector = {};\n      }\n\n      // NOTE: by setting limit 1 here, we end up using very inefficient\n      // code that recomputes the whole query on each update. The upside is\n      // that when you reactively depend on a findOne you only get\n      // invalidated when the found object changes, not any object in the\n      // collection. Most findOne will be by id, which has a fast path, so\n      // this might not be a big deal. In most cases, invalidation causes\n      // the called to re-query anyway, so this should be a net performance\n      // improvement.\n      options.limit = 1;\n      return this.find(selector, options).fetch()[0];\n    }\n    return findOne;\n  }() // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  ;\n  _proto.insert = function () {\n    function insert(doc, callback) {\n      var _this = this;\n      doc = EJSON.clone(doc);\n      assertHasValidFieldNames(doc);\n\n      // if you really want to use ObjectIDs, set this global.\n      // Mongo.Collection specifies its own ids and does not use this code.\n      if (!hasOwn.call(doc, '_id')) {\n        doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n      }\n      var id = doc._id;\n      if (this._docs.has(id)) {\n        throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n      }\n      this._saveOriginal(id, undefined);\n      this._docs.set(id, doc);\n      var queriesToRecompute = [];\n\n      // trigger live queries that match\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        var matchResult = query.matcher.documentMatches(doc);\n        if (matchResult.result) {\n          if (query.distances && matchResult.distance !== undefined) {\n            query.distances.set(id, matchResult.distance);\n          }\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            LocalCollection._insertInResults(query, doc);\n          }\n        }\n      });\n      queriesToRecompute.forEach(function (qid) {\n        if (_this.queries[qid]) {\n          _this._recomputeResults(_this.queries[qid]);\n        }\n      });\n      this._observeQueue.drain();\n\n      // Defer because the caller likely doesn't expect the callback to be run\n      // immediately.\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, id);\n        });\n      }\n      return id;\n    }\n    return insert;\n  }() // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  ;\n  _proto.pauseObservers = function () {\n    function pauseObservers() {\n      var _this2 = this;\n      // No-op if already paused.\n      if (this.paused) {\n        return;\n      }\n\n      // Set the 'paused' flag such that new observer messages don't fire.\n      this.paused = true;\n\n      // Take a snapshot of the query results for each query.\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this2.queries[qid];\n        query.resultsSnapshot = EJSON.clone(query.results);\n      });\n    }\n    return pauseObservers;\n  }();\n  _proto.remove = function () {\n    function remove(selector, callback) {\n      var _this3 = this;\n      // Easy special case: if we're not calling observeChanges callbacks and\n      // we're not saving originals and we got asked to remove everything, then\n      // just empty everything directly.\n      if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n        var _result = this._docs.size();\n        this._docs.clear();\n        Object.keys(this.queries).forEach(function (qid) {\n          var query = _this3.queries[qid];\n          if (query.ordered) {\n            query.results = [];\n          } else {\n            query.results.clear();\n          }\n        });\n        if (callback) {\n          Meteor.defer(function () {\n            callback(null, _result);\n          });\n        }\n        return _result;\n      }\n      var matcher = new Minimongo.Matcher(selector);\n      var remove = [];\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        if (matcher.documentMatches(doc).result) {\n          remove.push(id);\n        }\n      });\n      var queriesToRecompute = [];\n      var queryRemove = [];\n      var _loop = function () {\n        var removeId = remove[i];\n        var removeDoc = _this3._docs.get(removeId);\n        Object.keys(_this3.queries).forEach(function (qid) {\n          var query = _this3.queries[qid];\n          if (query.dirty) {\n            return;\n          }\n          if (query.matcher.documentMatches(removeDoc).result) {\n            if (query.cursor.skip || query.cursor.limit) {\n              queriesToRecompute.push(qid);\n            } else {\n              queryRemove.push({\n                qid: qid,\n                doc: removeDoc\n              });\n            }\n          }\n        });\n        _this3._saveOriginal(removeId, removeDoc);\n        _this3._docs.remove(removeId);\n      };\n      for (var i = 0; i < remove.length; i++) {\n        _loop();\n      }\n\n      // run live query callbacks _after_ we've removed the documents.\n      queryRemove.forEach(function (remove) {\n        var query = _this3.queries[remove.qid];\n        if (query) {\n          query.distances && query.distances.remove(remove.doc._id);\n          LocalCollection._removeFromResults(query, remove.doc);\n        }\n      });\n      queriesToRecompute.forEach(function (qid) {\n        var query = _this3.queries[qid];\n        if (query) {\n          _this3._recomputeResults(query);\n        }\n      });\n      this._observeQueue.drain();\n      var result = remove.length;\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n      return result;\n    }\n    return remove;\n  }() // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  ;\n  _proto.resumeObservers = function () {\n    function resumeObservers() {\n      var _this4 = this;\n      // No-op if not paused.\n      if (!this.paused) {\n        return;\n      }\n\n      // Unset the 'paused' flag. Make sure to do this first, otherwise\n      // observer methods won't actually fire when we trigger them.\n      this.paused = false;\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this4.queries[qid];\n        if (query.dirty) {\n          query.dirty = false;\n\n          // re-compute results will perform `LocalCollection._diffQueryChanges`\n          // automatically.\n          _this4._recomputeResults(query, query.resultsSnapshot);\n        } else {\n          // Diff the current results against the snapshot and send to observers.\n          // pass the query object for its observer callbacks.\n          LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {\n            projectionFn: query.projectionFn\n          });\n        }\n        query.resultsSnapshot = null;\n      });\n      this._observeQueue.drain();\n    }\n    return resumeObservers;\n  }();\n  _proto.retrieveOriginals = function () {\n    function retrieveOriginals() {\n      if (!this._savedOriginals) {\n        throw new Error('Called retrieveOriginals without saveOriginals');\n      }\n      var originals = this._savedOriginals;\n      this._savedOriginals = null;\n      return originals;\n    }\n    return retrieveOriginals;\n  }() // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  ;\n  _proto.saveOriginals = function () {\n    function saveOriginals() {\n      if (this._savedOriginals) {\n        throw new Error('Called saveOriginals twice without retrieveOriginals');\n      }\n      this._savedOriginals = new LocalCollection._IdMap();\n    }\n    return saveOriginals;\n  }() // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  ;\n  _proto.update = function () {\n    function update(selector, mod, options, callback) {\n      var _this5 = this;\n      if (!callback && options instanceof Function) {\n        callback = options;\n        options = null;\n      }\n      if (!options) {\n        options = {};\n      }\n      var matcher = new Minimongo.Matcher(selector, true);\n\n      // Save the original results of any query that we might need to\n      // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n      // it. (We don't need to save the original results of paused queries because\n      // they already have a resultsSnapshot and we won't be diffing in\n      // _recomputeResults.)\n      var qidToOriginalResults = {};\n\n      // We should only clone each document once, even if it appears in multiple\n      // queries\n      var docMap = new LocalCollection._IdMap();\n      var idsMatched = LocalCollection._idsMatchedBySelector(selector);\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this5.queries[qid];\n        if ((query.cursor.skip || query.cursor.limit) && !_this5.paused) {\n          // Catch the case of a reactive `count()` on a cursor with skip\n          // or limit, which registers an unordered observe. This is a\n          // pretty rare case, so we just clone the entire result set with\n          // no optimizations for documents that appear in these result\n          // sets and other queries.\n          if (query.results instanceof LocalCollection._IdMap) {\n            qidToOriginalResults[qid] = query.results.clone();\n            return;\n          }\n          if (!(query.results instanceof Array)) {\n            throw new Error('Assertion failed: query.results not an array');\n          }\n\n          // Clones a document to be stored in `qidToOriginalResults`\n          // because it may be modified before the new and old result sets\n          // are diffed. But if we know exactly which document IDs we're\n          // going to modify, then we only need to clone those.\n          var memoizedCloneIfNeeded = function (doc) {\n            if (docMap.has(doc._id)) {\n              return docMap.get(doc._id);\n            }\n            var docToMemoize = idsMatched && !idsMatched.some(function (id) {\n              return EJSON.equals(id, doc._id);\n            }) ? doc : EJSON.clone(doc);\n            docMap.set(doc._id, docToMemoize);\n            return docToMemoize;\n          };\n          qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n        }\n      });\n      var recomputeQids = {};\n      var updateCount = 0;\n      this._eachPossiblyMatchingDoc(selector, function (doc, id) {\n        var queryResult = matcher.documentMatches(doc);\n        if (queryResult.result) {\n          // XXX Should we save the original even if mod ends up being a no-op?\n          _this5._saveOriginal(id, doc);\n          _this5._modifyAndNotify(doc, mod, recomputeQids, queryResult.arrayIndices);\n          ++updateCount;\n          if (!options.multi) {\n            return false; // break\n          }\n        }\n        return true;\n      });\n      Object.keys(recomputeQids).forEach(function (qid) {\n        var query = _this5.queries[qid];\n        if (query) {\n          _this5._recomputeResults(query, qidToOriginalResults[qid]);\n        }\n      });\n      this._observeQueue.drain();\n\n      // If we are doing an upsert, and we didn't modify any documents yet, then\n      // it's time to do an insert. Figure out what document we are inserting, and\n      // generate an id for it.\n      var insertedId;\n      if (updateCount === 0 && options.upsert) {\n        var doc = LocalCollection._createUpsertDocument(selector, mod);\n        if (!doc._id && options.insertedId) {\n          doc._id = options.insertedId;\n        }\n        insertedId = this.insert(doc);\n        updateCount = 1;\n      }\n\n      // Return the number of affected documents, or in the upsert case, an object\n      // containing the number of affected docs and the id of the doc that was\n      // inserted, if any.\n      var result;\n      if (options._returnObject) {\n        result = {\n          numberAffected: updateCount\n        };\n        if (insertedId !== undefined) {\n          result.insertedId = insertedId;\n        }\n      } else {\n        result = updateCount;\n      }\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n      return result;\n    }\n    return update;\n  }() // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  ;\n  _proto.upsert = function () {\n    function upsert(selector, mod, options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      return this.update(selector, mod, Object.assign({}, options, {\n        upsert: true,\n        _returnObject: true\n      }), callback);\n    }\n    return upsert;\n  }() // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  ;\n  _proto._eachPossiblyMatchingDoc = function () {\n    function _eachPossiblyMatchingDoc(selector, fn) {\n      var _this6 = this;\n      var specificIds = LocalCollection._idsMatchedBySelector(selector);\n      if (specificIds) {\n        specificIds.some(function (id) {\n          var doc = _this6._docs.get(id);\n          if (doc) {\n            return fn(doc, id) === false;\n          }\n        });\n      } else {\n        this._docs.forEach(fn);\n      }\n    }\n    return _eachPossiblyMatchingDoc;\n  }();\n  _proto._modifyAndNotify = function () {\n    function _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n      var _this7 = this;\n      var matched_before = {};\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this7.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        if (query.ordered) {\n          matched_before[qid] = query.matcher.documentMatches(doc).result;\n        } else {\n          // Because we don't support skip or limit (yet) in unordered queries, we\n          // can just do a direct lookup.\n          matched_before[qid] = query.results.has(doc._id);\n        }\n      });\n      var old_doc = EJSON.clone(doc);\n      LocalCollection._modify(doc, mod, {\n        arrayIndices: arrayIndices\n      });\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this7.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        var afterMatch = query.matcher.documentMatches(doc);\n        var after = afterMatch.result;\n        var before = matched_before[qid];\n        if (after && query.distances && afterMatch.distance !== undefined) {\n          query.distances.set(doc._id, afterMatch.distance);\n        }\n        if (query.cursor.skip || query.cursor.limit) {\n          // We need to recompute any query where the doc may have been in the\n          // cursor's window either before or after the update. (Note that if skip\n          // or limit is set, \"before\" and \"after\" being true do not necessarily\n          // mean that the document is in the cursor's output after skip/limit is\n          // applied... but if they are false, then the document definitely is NOT\n          // in the output. So it's safe to skip recompute if neither before or\n          // after are true.)\n          if (before || after) {\n            recomputeQids[qid] = true;\n          }\n        } else if (before && !after) {\n          LocalCollection._removeFromResults(query, doc);\n        } else if (!before && after) {\n          LocalCollection._insertInResults(query, doc);\n        } else if (before && after) {\n          LocalCollection._updateInResults(query, doc, old_doc);\n        }\n      });\n    }\n    return _modifyAndNotify;\n  }() // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  ;\n  _proto._recomputeResults = function () {\n    function _recomputeResults(query, oldResults) {\n      if (this.paused) {\n        // There's no reason to recompute the results now as we're still paused.\n        // By flagging the query as \"dirty\", the recompute will be performed\n        // when resumeObservers is called.\n        query.dirty = true;\n        return;\n      }\n      if (!this.paused && !oldResults) {\n        oldResults = query.results;\n      }\n      if (query.distances) {\n        query.distances.clear();\n      }\n      query.results = query.cursor._getRawObjects({\n        distances: query.distances,\n        ordered: query.ordered\n      });\n      if (!this.paused) {\n        LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {\n          projectionFn: query.projectionFn\n        });\n      }\n    }\n    return _recomputeResults;\n  }();\n  _proto._saveOriginal = function () {\n    function _saveOriginal(id, doc) {\n      // Are we even trying to save originals?\n      if (!this._savedOriginals) {\n        return;\n      }\n\n      // Have we previously mutated the original (and so 'doc' is not actually\n      // original)?  (Note the 'has' check rather than truth: we store undefined\n      // here for inserted docs!)\n      if (this._savedOriginals.has(id)) {\n        return;\n      }\n      this._savedOriginals.set(id, EJSON.clone(doc));\n    }\n    return _saveOriginal;\n  }();\n  return LocalCollection;\n}();\nLocalCollection.Cursor = Cursor;\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function () {\n  function _CachingChangeObserver() {\n    var _this8 = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n    var callbacks = options.callbacks || {};\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: function (id, fields, before) {\n          // Take a shallow copy since the top-level properties can be changed\n          var doc = _objectSpread({}, fields);\n          doc._id = id;\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(_this8, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(_this8, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          _this8.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: function (id, before) {\n          var doc = _this8.docs.get(id);\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(_this8, id, before);\n          }\n          _this8.docs.moveBefore(id, before || null);\n        }\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap();\n      this.applyChange = {\n        added: function (id, fields) {\n          // Take a shallow copy since the top-level properties can be changed\n          var doc = _objectSpread({}, fields);\n          if (callbacks.added) {\n            callbacks.added.call(_this8, id, EJSON.clone(fields));\n          }\n          doc._id = id;\n          _this8.docs.set(id, doc);\n        }\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = function (id, fields) {\n      var doc = _this8.docs.get(id);\n      if (!doc) {\n        throw new Error(\"Unknown id for changed: \" + id);\n      }\n      if (callbacks.changed) {\n        callbacks.changed.call(_this8, id, EJSON.clone(fields));\n      }\n      DiffSequence.applyChanges(doc, fields);\n    };\n    this.applyChange.removed = function (id) {\n      if (callbacks.removed) {\n        callbacks.removed.call(_this8, id);\n      }\n      _this8.docs.remove(id);\n    };\n  }\n  return _CachingChangeObserver;\n}();\nLocalCollection._IdMap = /*#__PURE__*/function (_IdMap2) {\n  _inheritsLoose(_IdMap, _IdMap2);\n  function _IdMap() {\n    return _IdMap2.call(this, MongoID.idStringify, MongoID.idParse) || this;\n  }\n  return _IdMap;\n}(IdMap);\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = function (transform) {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n  var wrapped = function (doc) {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n    var id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0;\n  var range = array.length;\n  while (range > 0) {\n    var halfRange = Math.floor(range / 2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n  return first;\n};\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n  Object.keys(fields).forEach(function (keyPath) {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError('Minimongo doesn\\'t support $ operator in projections yet.');\n    }\n    var value = fields[keyPath];\n    if (_typeof(value) === 'object' && ['$elemMatch', '$meta', '$slice'].some(function (key) {\n      return hasOwn.call(value, key);\n    })) {\n      throw MinimongoError('Minimongo doesn\\'t support operators in projections yet.');\n    }\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError('Projection values should be one of 1, 0, true, or false');\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n  var _idProjection = fields._id === undefined ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(function (subdoc) {\n        return transform(subdoc, ruleTree);\n      });\n    }\n    var result = details.including ? {} : EJSON.clone(doc);\n    Object.keys(ruleTree).forEach(function (key) {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n      var rule = ruleTree[key];\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n    return doc != null ? result : doc;\n  };\n  return function (doc) {\n    var result = transform(doc, details.tree);\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = function (selector, modifier) {\n  var selectorDocument = populateDocumentWithQueryFields(selector);\n  var isModify = LocalCollection._isModificationMod(modifier);\n  var newDoc = {};\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {\n    $set: selectorDocument\n  });\n  LocalCollection._modify(newDoc, modifier, {\n    isInsert: true\n  });\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  var replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n  return replacement;\n};\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\nLocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n  for (var i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n  return null;\n};\nLocalCollection._insertInResults = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n        distances: query.distances\n      }), query.results, doc);\n      var next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n  var i = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(i, 0, value);\n  return i;\n};\nLocalCollection._isModificationMod = function (mod) {\n  var isModify = false;\n  var isReplace = false;\n  Object.keys(mod).forEach(function (key) {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n  if (isModify && isReplace) {\n    throw new Error('Update parameter cannot have both modifier and non-modifier fields.');\n  }\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, modifier) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n  var isModifier = isOperatorObject(modifier);\n  var newDoc = isModifier ? EJSON.clone(doc) : modifier;\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(function (operator) {\n      // Treat $setOnInsert as $set if this is an insert.\n      var setOnInsert = options.isInsert && operator === '$setOnInsert';\n      var modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      var operand = modifier[operator];\n      if (!modFunc) {\n        throw MinimongoError(\"Invalid modifier specified \" + operator);\n      }\n      Object.keys(operand).forEach(function (keypath) {\n        var arg = operand[keypath];\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n        var keyparts = keypath.split('.');\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\"The update path '\" + keypath + \"' contains an empty field name, \" + 'which is not allowed.');\n        }\n        var target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\"After applying the update to the document {_id: \\\"\" + doc._id + \"\\\", ...},\" + ' the (immutable) field \\'_id\\' was found to have been altered to ' + (\"_id: \\\"\" + newDoc._id + \"\\\"\"));\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\"The _id field cannot be changed from {_id: \\\"\" + doc._id + \"\\\"} to \" + (\"{_id: \\\"\" + modifier._id + \"\\\"}\"));\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(function (key) {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n  Object.keys(newDoc).forEach(function (key) {\n    doc[key] = newDoc[key];\n  });\n};\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {\n    return doc;\n  };\n  var suppressed = !!observeCallbacks._suppress_initial;\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n        var doc = transform(Object.assign(fields, {\n          _id: id\n        }));\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n        var doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(\"Unknown id for changed: \" + id);\n        }\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n        var from = indices ? this.docs.indexOf(id) : -1;\n        var to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n        observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);\n      },\n      removed: function (id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        var doc = transform(this.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {\n            _id: id\n          })));\n        }\n      },\n      changed: function (id, fields) {\n        if (observeCallbacks.changed) {\n          var oldDoc = this.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      }\n    };\n  }\n  var changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  var handle = cursor.observeChanges(changeObserver.applyChange, {\n    nonMutatingCallbacks: true\n  });\n  suppressed = false;\n  return handle;\n};\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n  return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);\n};\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\nLocalCollection._removeFromResults = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id; // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;\n};\nLocalCollection._updateInResults = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n  var old_idx = LocalCollection._findInOrderedResults(query, doc);\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n    distances: query.distances\n  }), query.results, doc);\n  if (old_idx !== new_idx) {\n    var next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\nvar MODIFIERS = {\n  $currentDate: function (target, field, arg) {\n    if (_typeof(arg) === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {\n          field: field\n        });\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {\n        field: field\n      });\n    }\n    target[field] = new Date();\n  },\n  $inc: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $inc modifier to non-number', {\n          field: field\n        });\n      }\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $min modifier to non-number', {\n          field: field\n        });\n      }\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $max modifier to non-number', {\n          field: field\n        });\n      }\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $mul modifier to non-number', {\n          field: field\n        });\n      }\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {\n        field: field\n      });\n    }\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {\n        field: field\n      });\n    }\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {\n        field: field\n      });\n    }\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError('The \\'to\\' field for $rename cannot contain an embedded null byte', {\n        field: field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    var object = target[field];\n    delete target[field];\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {\n      forbidArray: true\n    });\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {\n        field: field\n      });\n    }\n    target2[keyparts.pop()] = object;\n  },\n  $set: function (target, field, arg) {\n    if (target !== Object(target)) {\n      // not an array or an object\n      var error = MinimongoError('Cannot set property on non-object field', {\n        field: field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (target === null) {\n      var _error = MinimongoError('Cannot set property on null', {\n        field: field\n      });\n      _error.setPropertyError = true;\n      throw _error;\n    }\n    assertHasValidFieldNames(arg);\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {\n        field: field\n      });\n    }\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {\n        field: field\n      });\n    }\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    var position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {\n          field: field\n        });\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError('$position in $push must be zero or positive', {\n          field: field\n        });\n      }\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {\n          field: field\n        });\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {\n          field: field\n        });\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      toPush.forEach(function (element) {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {\n            field: field\n          });\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(function (element) {\n        target[field].push(element);\n      });\n    } else {\n      var _target$field;\n      var spliceArguments = [position, 0];\n      toPush.forEach(function (element) {\n        spliceArguments.push(element);\n      });\n      (_target$field = target[field]).splice.apply(_target$field, spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(_typeof(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n    assertHasValidFieldNames(arg);\n    var toPush = target[field];\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError('Cannot apply $pushAll modifier to non-array', {\n        field: field\n      });\n    } else {\n      toPush.push.apply(toPush, _toConsumableArray(arg));\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n    if (_typeof(arg) === 'object') {\n      // check if first key is '$each'\n      var keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n    var values = isEach ? arg.$each : [arg];\n    assertHasValidFieldNames(values);\n    var toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError('Cannot apply $addToSet modifier to non-array', {\n        field: field\n      });\n    } else {\n      values.forEach(function (value) {\n        if (toAdd.some(function (element) {\n          return LocalCollection._f._equal(value, element);\n        })) {\n          return;\n        }\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    var toPop = target[field];\n    if (toPop === undefined) {\n      return;\n    }\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {\n        field: field\n      });\n    }\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    var toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n    var out;\n    if (arg != null && _typeof(arg) === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      var matcher = new Minimongo.Matcher(arg);\n      out = toPull.filter(function (element) {\n        return !matcher.documentMatches(element).result;\n      });\n    } else {\n      out = toPull.filter(function (element) {\n        return !LocalCollection._f._equal(element, arg);\n      });\n    }\n    target[field] = out;\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(_typeof(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {\n        field: field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    var toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n    target[field] = toPull.filter(function (object) {\n      return !arg.some(function (element) {\n        return LocalCollection._f._equal(object, element);\n      });\n    });\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {\n      field: field\n    });\n  },\n  $v: function () {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\nvar NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nvar invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && _typeof(doc) === 'object') {\n    JSON.stringify(doc, function (key, value) {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\nfunction assertIsValidFieldName(key) {\n  var match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(\"Key \" + key + \" must not \" + invalidCharMsg[match[0]]);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var usedArrayIndex = false;\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = i === keyparts.length - 1;\n    var keypart = keyparts[i];\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n      var error = MinimongoError(\"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n        throw MinimongoError(\"can't append to array using string field name [\" + keypart + \"]\");\n      }\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (_typeof(doc[keypart]) !== 'object') {\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] + \"' of list value \" + JSON.stringify(doc[keypart]));\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n    if (last) {\n      return doc;\n    }\n    doc = doc[keypart];\n  }\n\n  // notreached\n}","map":{"version":3,"names":["_toConsumableArray","module","link","default","v","_typeof","_inheritsLoose","_objectSpread","export","LocalCollection","Cursor","ObserveHandle","hasOwn","isIndexable","isNumericKey","isOperatorObject","populateDocumentWithQueryFields","projectionDetails","name","_docs","_IdMap","_observeQueue","Meteor","_SynchronousQueue","next_qid","queries","Object","create","_savedOriginals","paused","_proto","prototype","countDocuments","selector","options","find","countAsync","estimatedDocumentCount","arguments","length","findOne","undefined","limit","fetch","insert","doc","callback","_this","EJSON","clone","assertHasValidFieldNames","call","_id","_useOID","MongoID","ObjectID","Random","id","has","MinimongoError","_saveOriginal","set","queriesToRecompute","keys","forEach","qid","query","dirty","matchResult","matcher","documentMatches","result","distances","distance","cursor","skip","push","_insertInResults","_recomputeResults","drain","defer","pauseObservers","_this2","resultsSnapshot","results","remove","_this3","equals","size","clear","ordered","Minimongo","Matcher","_eachPossiblyMatchingDoc","queryRemove","_loop","removeId","i","removeDoc","get","_removeFromResults","resumeObservers","_this4","_diffQueryChanges","projectionFn","retrieveOriginals","Error","originals","saveOriginals","update","mod","_this5","Function","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","Array","memoizedCloneIfNeeded","docToMemoize","some","map","recomputeQids","updateCount","queryResult","_modifyAndNotify","arrayIndices","multi","insertedId","upsert","_createUpsertDocument","_returnObject","numberAffected","assign","fn","_this6","specificIds","_this7","matched_before","old_doc","_modify","afterMatch","after","before","_updateInResults","oldResults","_getRawObjects","_CachingChangeObserver","_this8","orderedFromCallbacks","callbacks","_observeChangesCallbacksAreOrdered","docs","OrderedDict","idStringify","applyChange","addedBefore","fields","added","putBefore","movedBefore","moveBefore","changed","DiffSequence","applyChanges","removed","_IdMap2","idParse","IdMap","wrapTransform","transform","__wrappedTransform__","wrapped","transformed","Tracker","nonreactive","_isPlainObject","_binarySearch","cmp","array","value","first","range","halfRange","Math","floor","_checkSupportedProjection","isArray","keyPath","split","includes","key","_compileProjection","_idProjection","details","ruleTree","subdoc","including","rule","tree","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","_selectorIsId","$in","every","$and","subIds","sorter","_insertInSortedList","getComparator","next","splice","isReplace","substr","x","_f","_type","isModifier","operator","setOnInsert","modFunc","MODIFIERS","operand","keypath","arg","keyparts","Boolean","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","_observeFromObserveChanges","observeCallbacks","getTransform","suppressed","_suppress_initial","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","addedAt","indexOf","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","_fromObserve","handle","observeChanges","nonMutatingCallbacks","_selectorIsIdPerhapsAsObject","changedFields","makeChangedFields","old_idx","new_idx","$currentDate","field","$type","Date","$inc","$min","$max","$mul","$rename","object","target2","error","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","slice","$slice","sortFunction","$sort","Sorter","element","_target$field","spliceArguments","apply","sort","$pushAll","$addToSet","isEach","values","toAdd","_equal","$pop","toPop","$pull","toPull","out","filter","$pullAll","$bit","$v","invalidCharMsg","$","JSON","stringify","assertIsValidFieldName","match","usedArrayIndex","last","keypart","parseInt"],"sources":["packages/minimongo/local_collection.js"],"sourcesContent":["import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = new Meteor._SynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  countDocuments(selector, options) {\n    return this.find(selector ?? {}, options).countAsync();\n  }\n\n  estimatedDocumentCount(options) {\n    return this.find({}, options).countAsync();\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResults(query, doc);\n        }\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // Defer because the caller likely doesn't expect the callback to be run\n    // immediately.\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      const result = this._docs.size();\n\n      this._docs.clear();\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n\n      if (callback) {\n        Meteor.defer(() => {\n          callback(null, result);\n        });\n      }\n\n      return result;\n    }\n\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResults(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    const recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDoc(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        this._modifyAndNotify(\n          doc,\n          mod,\n          recomputeQids,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (! doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = {numberAffected: updateCount};\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  _eachPossiblyMatchingDoc(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      specificIds.some(id => {\n        const doc = this._docs.get(id);\n\n        if (doc) {\n          return fn(doc, id) === false;\n        }\n      });\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _modifyAndNotify(doc, mod, recomputeQids, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    const old_doc = EJSON.clone(doc);\n\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResults(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResults(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResults(query, doc, old_doc);\n      }\n    });\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          const doc = this.docs.get(id);\n\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return doc != null ? result : doc;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResults = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        if (suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n            doc,\n            indices\n              ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n              : -1,\n            before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n            transform(doc),\n            oldDoc,\n            indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n          ? before\n            ? this.docs.indexOf(before)\n            : this.docs.size()\n          : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n          transform(EJSON.clone(this.docs.get(id))),\n          from,\n          to,\n          before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n            transform(doc),\n            transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  const handle = cursor.observeChanges(changeObserver.applyChange,\n    { nonMutatingCallbacks: true });\n\n  suppressed = false;\n\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResults = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResults = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $mul modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"d747456e8cc7b6d33f2ddb255b53974ca67c7455"}
