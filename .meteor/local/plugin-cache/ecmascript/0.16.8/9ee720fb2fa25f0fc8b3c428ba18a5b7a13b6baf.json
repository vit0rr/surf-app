{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/models/methods.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.osx.x86_64"},"sourceFileName":"packages/mdg:meteor-apm-agent/lib/models/methods.js","filename":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/models/methods.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/client/styles","root":"/Users/nicholas/Desktop/projects/local-legends/client/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-meteor-async-await","visitor":{"AwaitExpression":{"enter":[null]},"_exploded":true,"_verified":true,"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ObjectMethod":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"ClassMethod":{"exit":[null]},"ClassPrivateMethod":{"exit":[null]}},"options":{"useNativeAsyncAwait":false},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/client/styles/packages/mdg:meteor-apm-agent/lib/models/methods.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mdg:meteor-apm-agent/lib/models/methods.js"}},"code":"var METHOD_METRICS_FIELDS = ['wait', 'db', 'http', 'email', 'async', 'compute', 'total'];\nMethodsModel = function (metricsThreshold) {\n  var self = this;\n  this.methodMetricsByMinute = Object.create(null);\n  this.errorMap = Object.create(null);\n  this._metricsThreshold = Object.assign({\n    \"wait\": 100,\n    \"db\": 100,\n    \"http\": 1000,\n    \"email\": 100,\n    \"async\": 100,\n    \"compute\": 100,\n    \"total\": 200\n  }, metricsThreshold || Object.create(null));\n\n  //store max time elapsed methods for each method, event(metrics-field)\n  this.maxEventTimesForMethods = Object.create(null);\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60,\n    //process traces every minute\n    maxTotalPoints: 30,\n    //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n  });\n  this.tracerStore.start();\n};\nObject.assign(MethodsModel.prototype, KadiraModel.prototype);\nMethodsModel.prototype._getMetrics = function (timestamp, method) {\n  var dateId = this._getDateId(timestamp);\n  if (!this.methodMetricsByMinute[dateId]) {\n    this.methodMetricsByMinute[dateId] = {\n      methods: Object.create(null)\n    };\n  }\n  var methods = this.methodMetricsByMinute[dateId].methods;\n\n  //initialize method\n  if (!methods[method]) {\n    methods[method] = {\n      count: 0,\n      errors: 0,\n      fetchedDocSize: 0,\n      sentMsgSize: 0\n    };\n    METHOD_METRICS_FIELDS.forEach(function (field) {\n      methods[method][field] = 0;\n    });\n  }\n  return this.methodMetricsByMinute[dateId].methods[method];\n};\nMethodsModel.prototype.setStartTime = function (timestamp) {\n  this.metricsByMinute[dateId].startTime = timestamp;\n};\nMethodsModel.prototype.processMethod = function (methodTrace) {\n  var dateId = this._getDateId(methodTrace.at);\n\n  //append metrics to previous values\n  this._appendMetrics(dateId, methodTrace);\n  if (methodTrace.errored) {\n    this.methodMetricsByMinute[dateId].methods[methodTrace.name].errors++;\n  }\n  this.tracerStore.addTrace(methodTrace);\n};\nMethodsModel.prototype._appendMetrics = function (id, methodTrace) {\n  var methodMetrics = this._getMetrics(id, methodTrace.name);\n\n  // startTime needs to be converted into serverTime before sending\n  if (!this.methodMetricsByMinute[id].startTime) {\n    this.methodMetricsByMinute[id].startTime = methodTrace.at;\n  }\n\n  //merge\n  METHOD_METRICS_FIELDS.forEach(function (field) {\n    var value = methodTrace.metrics[field];\n    if (value > 0) {\n      methodMetrics[field] += value;\n    }\n  });\n  methodMetrics.count++;\n  this.methodMetricsByMinute[id].endTime = methodTrace.metrics.at;\n};\nMethodsModel.prototype.trackDocSize = function (method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.fetchedDocSize += size;\n};\nMethodsModel.prototype.trackMsgSize = function (method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.sentMsgSize += size;\n};\n\n/*\n  There are two types of data\n\n  1. methodMetrics - metrics about the methods (for every 10 secs)\n  2. methodRequests - raw method request. normally max, min for every 1 min and errors always\n*/\nMethodsModel.prototype.buildPayload = function (buildDetailedInfo) {\n  var payload = {\n    methodMetrics: [],\n    methodRequests: []\n  };\n\n  //handling metrics\n  var methodMetricsByMinute = this.methodMetricsByMinute;\n  this.methodMetricsByMinute = Object.create(null);\n\n  //create final paylod for methodMetrics\n  for (var key in methodMetricsByMinute) {\n    var methodMetrics = methodMetricsByMinute[key];\n    // converting startTime into the actual serverTime\n    var startTime = methodMetrics.startTime;\n    methodMetrics.startTime = Kadira.syncedDate.syncTime(startTime);\n    for (var methodName in methodMetrics.methods) {\n      METHOD_METRICS_FIELDS.forEach(function (field) {\n        methodMetrics.methods[methodName][field] /= methodMetrics.methods[methodName].count;\n      });\n    }\n    payload.methodMetrics.push(methodMetricsByMinute[key]);\n  }\n\n  //collect traces and send them with the payload\n  payload.methodRequests = this.tracerStore.collectTraces();\n  return payload;\n};","map":{"version":3,"names":["METHOD_METRICS_FIELDS","MethodsModel","metricsThreshold","self","methodMetricsByMinute","Object","create","errorMap","_metricsThreshold","assign","maxEventTimesForMethods","tracerStore","TracerStore","interval","maxTotalPoints","archiveEvery","start","prototype","KadiraModel","_getMetrics","timestamp","method","dateId","_getDateId","methods","count","errors","fetchedDocSize","sentMsgSize","forEach","field","setStartTime","metricsByMinute","startTime","processMethod","methodTrace","at","_appendMetrics","errored","name","addTrace","id","methodMetrics","value","metrics","endTime","trackDocSize","size","Ntp","_now","trackMsgSize","buildPayload","buildDetailedInfo","payload","methodRequests","key","Kadira","syncedDate","syncTime","methodName","push","collectTraces"],"sources":["packages/mdg:meteor-apm-agent/lib/models/methods.js"],"sourcesContent":["var METHOD_METRICS_FIELDS = ['wait', 'db', 'http', 'email', 'async', 'compute', 'total'];\n\nMethodsModel = function (metricsThreshold) {\n  var self = this;\n\n  this.methodMetricsByMinute = Object.create(null);\n  this.errorMap = Object.create(null);\n\n  this._metricsThreshold = Object.assign({\n    \"wait\": 100,\n    \"db\": 100,\n    \"http\": 1000,\n    \"email\": 100,\n    \"async\": 100,\n    \"compute\": 100,\n    \"total\": 200\n  }, metricsThreshold || Object.create(null));\n\n  //store max time elapsed methods for each method, event(metrics-field)\n  this.maxEventTimesForMethods = Object.create(null);\n\n  this.tracerStore = new TracerStore({\n    interval: 1000 * 60, //process traces every minute\n    maxTotalPoints: 30, //for 30 minutes\n    archiveEvery: 5 //always trace for every 5 minutes,\n  });\n\n  this.tracerStore.start();\n};\n\nObject.assign(MethodsModel.prototype, KadiraModel.prototype);\n\nMethodsModel.prototype._getMetrics = function(timestamp, method) {\n  var dateId = this._getDateId(timestamp);\n\n  if(!this.methodMetricsByMinute[dateId]) {\n    this.methodMetricsByMinute[dateId] = {\n      methods: Object.create(null),\n    };\n  }\n\n  var methods = this.methodMetricsByMinute[dateId].methods;\n\n  //initialize method\n  if(!methods[method]) {\n    methods[method] = {\n      count: 0,\n      errors: 0,\n      fetchedDocSize: 0,\n      sentMsgSize: 0\n    };\n\n    METHOD_METRICS_FIELDS.forEach(function(field) {\n      methods[method][field] = 0;\n    });\n  }\n\n  return this.methodMetricsByMinute[dateId].methods[method];\n};\n\nMethodsModel.prototype.setStartTime = function(timestamp) {\n  this.metricsByMinute[dateId].startTime = timestamp;\n}\n\nMethodsModel.prototype.processMethod = function(methodTrace) {\n  var dateId = this._getDateId(methodTrace.at);\n\n  //append metrics to previous values\n  this._appendMetrics(dateId, methodTrace);\n  if(methodTrace.errored) {\n    this.methodMetricsByMinute[dateId].methods[methodTrace.name].errors ++\n  }\n\n  this.tracerStore.addTrace(methodTrace);\n};\n\nMethodsModel.prototype._appendMetrics = function(id, methodTrace) {\n  var methodMetrics = this._getMetrics(id, methodTrace.name)\n\n  // startTime needs to be converted into serverTime before sending\n  if(!this.methodMetricsByMinute[id].startTime){\n    this.methodMetricsByMinute[id].startTime = methodTrace.at;\n  }\n\n  //merge\n  METHOD_METRICS_FIELDS.forEach(function(field) {\n    var value = methodTrace.metrics[field];\n    if(value > 0) {\n      methodMetrics[field] += value;\n    }\n  });\n\n  methodMetrics.count++;\n  this.methodMetricsByMinute[id].endTime = methodTrace.metrics.at;\n};\n\nMethodsModel.prototype.trackDocSize = function(method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.fetchedDocSize += size;\n}\n\nMethodsModel.prototype.trackMsgSize = function(method, size) {\n  var timestamp = Ntp._now();\n  var dateId = this._getDateId(timestamp);\n\n  var methodMetrics = this._getMetrics(dateId, method);\n  methodMetrics.sentMsgSize += size;\n}\n\n/*\n  There are two types of data\n\n  1. methodMetrics - metrics about the methods (for every 10 secs)\n  2. methodRequests - raw method request. normally max, min for every 1 min and errors always\n*/\nMethodsModel.prototype.buildPayload = function(buildDetailedInfo) {\n  var payload = {\n    methodMetrics: [],\n    methodRequests: []\n  };\n\n  //handling metrics\n  var methodMetricsByMinute = this.methodMetricsByMinute;\n  this.methodMetricsByMinute = Object.create(null);\n\n  //create final paylod for methodMetrics\n  for(var key in methodMetricsByMinute) {\n    var methodMetrics = methodMetricsByMinute[key];\n    // converting startTime into the actual serverTime\n    var startTime = methodMetrics.startTime;\n    methodMetrics.startTime = Kadira.syncedDate.syncTime(startTime);\n\n    for(var methodName in methodMetrics.methods) {\n      METHOD_METRICS_FIELDS.forEach(function(field) {\n        methodMetrics.methods[methodName][field] /=\n          methodMetrics.methods[methodName].count;\n      });\n    }\n\n    payload.methodMetrics.push(methodMetricsByMinute[key]);\n  }\n\n  //collect traces and send them with the payload\n  payload.methodRequests = this.tracerStore.collectTraces();\n\n  return payload;\n};\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"9ee720fb2fa25f0fc8b3c428ba18a5b7a13b6baf"}
