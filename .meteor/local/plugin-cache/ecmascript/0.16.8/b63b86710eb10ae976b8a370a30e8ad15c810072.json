{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minimongo/cursor.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/minimongo/cursor.js","filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minimongo/cursor.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"/Users/nicholas/Desktop/projects/local-legends/styles","root":"/Users/nicholas/Desktop/projects/local-legends/styles","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"MemberExpression":{"enter":[null]},"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"MemberExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"/Users/nicholas/Desktop/projects/local-legends/styles/packages/minimongo/cursor.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/cursor.js"}},"code":"var _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 0);\nmodule.export({\n  \"default\": function () {\n    return Cursor;\n  }\n});\nvar LocalCollection;\nmodule.link(\"./local_collection.js\", {\n  \"default\": function (v) {\n    LocalCollection = v;\n  }\n}, 0);\nvar hasOwn;\nmodule.link(\"./common.js\", {\n  hasOwn: function (v) {\n    hasOwn = v;\n  }\n}, 1);\nvar ASYNC_CURSOR_METHODS, getAsyncMethodName;\nmodule.link(\"./constants\", {\n  ASYNC_CURSOR_METHODS: function (v) {\n    ASYNC_CURSOR_METHODS = v;\n  },\n  getAsyncMethodName: function (v) {\n    getAsyncMethodName = v;\n  }\n}, 2);\nvar Cursor = /*#__PURE__*/function (_Symbol$iterator, _Symbol$asyncIterator) {\n  // don't call this ctor directly.  use LocalCollection.find().\n  function Cursor(collection, selector) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id') ? selector._id : selector;\n    } else {\n      this._selectorId = undefined;\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @deprecated in 2.9\n   * @summary Returns the number of documents that match a query. This method is\n   *          [deprecated since MongoDB 4.0](https://www.mongodb.com/docs/v4.4/reference/command/count/);\n   *          see `Collection.countDocuments` and\n   *          `Collection.estimatedDocumentCount` for a replacement.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  var _proto = Cursor.prototype;\n  _proto.count = function () {\n    function count() {\n      if (this.reactive) {\n        // allow the observe to be unordered\n        this._depend({\n          added: true,\n          removed: true\n        }, true);\n      }\n      return this._getRawObjects({\n        ordered: true\n      }).length;\n    }\n    return count;\n  }()\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  ;\n  _proto.fetch = function () {\n    function fetch() {\n      var result = [];\n      this.forEach(function (doc) {\n        result.push(doc);\n      });\n      return result;\n    }\n    return fetch;\n  }();\n  _proto[_Symbol$iterator] = function () {\n    var _this = this;\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true\n      });\n    }\n    var index = 0;\n    var objects = this._getRawObjects({\n      ordered: true\n    });\n    return {\n      next: function () {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          var element = _this._projectionFn(objects[index++]);\n          if (_this._transform) element = _this._transform(element);\n          return {\n            value: element\n          };\n        }\n        return {\n          done: true\n        };\n      }\n    };\n  };\n  _proto[_Symbol$asyncIterator] = function () {\n    var syncResult = this[Symbol.iterator]();\n    return {\n      next: function () {\n        function _callee() {\n          return _regeneratorRuntime.async(function () {\n            function _callee$(_context) {\n              while (1) switch (_context.prev = _context.next) {\n                case 0:\n                  return _context.abrupt(\"return\", Promise.resolve(syncResult.next()));\n                case 1:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n            return _callee$;\n          }(), null, null, null, Promise);\n        }\n        return _callee;\n      }()\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */;\n  _proto.forEach = function () {\n    function forEach(callback, thisArg) {\n      var _this2 = this;\n      if (this.reactive) {\n        this._depend({\n          addedBefore: true,\n          removed: true,\n          changed: true,\n          movedBefore: true\n        });\n      }\n      this._getRawObjects({\n        ordered: true\n      }).forEach(function (element, i) {\n        // This doubles as a clone operation.\n        element = _this2._projectionFn(element);\n        if (_this2._transform) {\n          element = _this2._transform(element);\n        }\n        callback.call(thisArg, element, i, _this2);\n      });\n    }\n    return forEach;\n  }();\n  _proto.getTransform = function () {\n    function getTransform() {\n      return this._transform;\n    }\n    return getTransform;\n  }()\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  ;\n  _proto.map = function () {\n    function map(callback, thisArg) {\n      var _this3 = this;\n      var result = [];\n      this.forEach(function (doc, i) {\n        result.push(callback.call(thisArg, doc, i, _this3));\n      });\n      return result;\n    }\n    return map;\n  }() // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  ;\n  _proto.observe = function () {\n    function observe(options) {\n      return LocalCollection._observeFromObserveChanges(this, options);\n    }\n    return observe;\n  }()\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  ;\n  _proto.observeChanges = function () {\n    function observeChanges(options) {\n      var _this4 = this;\n      var ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n      // there are several places that assume you aren't combining skip/limit with\n      // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n      // comment in _modifyAndNotify\n      // XXX allow skip/limit with unordered observe\n      if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n        throw new Error(\"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" + \"for observeChanges or 'addedAt' for observe, instead of 'added').\");\n      }\n      if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n        throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n      }\n      var distances = this.matcher.hasGeoQuery() && ordered && new LocalCollection._IdMap();\n      var query = {\n        cursor: this,\n        dirty: false,\n        distances: distances,\n        matcher: this.matcher,\n        // not fast pathed\n        ordered: ordered,\n        projectionFn: this._projectionFn,\n        resultsSnapshot: null,\n        sorter: ordered && this.sorter\n      };\n      var qid;\n\n      // Non-reactive queries call added[Before] and then never call anything\n      // else.\n      if (this.reactive) {\n        qid = this.collection.next_qid++;\n        this.collection.queries[qid] = query;\n      }\n      query.results = this._getRawObjects({\n        ordered: ordered,\n        distances: query.distances\n      });\n      if (this.collection.paused) {\n        query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap();\n      }\n\n      // wrap callbacks we were passed. callbacks only fire when not paused and\n      // are never undefined\n      // Filters out blacklisted fields according to cursor's projection.\n      // XXX wrong place for this?\n\n      // furthermore, callbacks enqueue until the operation we're working on is\n      // done.\n      var wrapCallback = function (fn) {\n        if (!fn) {\n          return function () {};\n        }\n        var self = _this4;\n        return function /* args*/\n        () {\n          var _this5 = this;\n          if (self.collection.paused) {\n            return;\n          }\n          var args = arguments;\n          self.collection._observeQueue.queueTask(function () {\n            fn.apply(_this5, args);\n          });\n        };\n      };\n      query.added = wrapCallback(options.added);\n      query.changed = wrapCallback(options.changed);\n      query.removed = wrapCallback(options.removed);\n      if (ordered) {\n        query.addedBefore = wrapCallback(options.addedBefore);\n        query.movedBefore = wrapCallback(options.movedBefore);\n      }\n      if (!options._suppress_initial && !this.collection.paused) {\n        query.results.forEach(function (doc) {\n          var fields = EJSON.clone(doc);\n          delete fields._id;\n          if (ordered) {\n            query.addedBefore(doc._id, _this4._projectionFn(fields), null);\n          }\n          query.added(doc._id, _this4._projectionFn(fields));\n        });\n      }\n      var handle = Object.assign(new LocalCollection.ObserveHandle(), {\n        collection: this.collection,\n        stop: function () {\n          if (_this4.reactive) {\n            delete _this4.collection.queries[qid];\n          }\n        }\n      });\n      if (this.reactive && Tracker.active) {\n        // XXX in many cases, the same observe will be recreated when\n        // the current autorun is rerun.  we could save work by\n        // letting it linger across rerun and potentially get\n        // repurposed if the same observe is performed, using logic\n        // similar to that of Meteor.subscribe.\n        Tracker.onInvalidate(function () {\n          handle.stop();\n        });\n      }\n\n      // run the observe callbacks resulting from the initial contents\n      // before we leave the observe.\n      this.collection._observeQueue.drain();\n      return handle;\n    }\n    return observeChanges;\n  }() // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  ;\n  _proto._depend = function () {\n    function _depend(changers, _allow_unordered) {\n      if (Tracker.active) {\n        var dependency = new Tracker.Dependency();\n        var notify = dependency.changed.bind(dependency);\n        dependency.depend();\n        var options = {\n          _allow_unordered: _allow_unordered,\n          _suppress_initial: true\n        };\n        ['added', 'addedBefore', 'changed', 'movedBefore', 'removed'].forEach(function (fn) {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n        // observeChanges will stop() when this computation is invalidated\n        this.observeChanges(options);\n      }\n    }\n    return _depend;\n  }();\n  _proto._getCollectionName = function () {\n    function _getCollectionName() {\n      return this.collection.name;\n    }\n    return _getCollectionName;\n  }() // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  ;\n  _proto._getRawObjects = function () {\n    function _getRawObjects() {\n      var _this6 = this;\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      // By default this method will respect skip and limit because .fetch(),\n      // .forEach() etc... expect this behaviour. It can be forced to ignore\n      // skip and limit by setting applySkipLimit to false (.count() does this,\n      // for example)\n      var applySkipLimit = options.applySkipLimit !== false;\n\n      // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n      // compatible\n      var results = options.ordered ? [] : new LocalCollection._IdMap();\n\n      // fast path for single ID value\n      if (this._selectorId !== undefined) {\n        // If you have non-zero skip and ask for a single id, you get nothing.\n        // This is so it matches the behavior of the '{_id: foo}' path.\n        if (applySkipLimit && this.skip) {\n          return results;\n        }\n        var selectedDoc = this.collection._docs.get(this._selectorId);\n        if (selectedDoc) {\n          if (options.ordered) {\n            results.push(selectedDoc);\n          } else {\n            results.set(this._selectorId, selectedDoc);\n          }\n        }\n        return results;\n      }\n\n      // slow path for arbitrary selector, sort, skip, limit\n\n      // in the observeChanges case, distances is actually part of the \"query\"\n      // (ie, live results set) object.  in other cases, distances is only used\n      // inside this function.\n      var distances;\n      if (this.matcher.hasGeoQuery() && options.ordered) {\n        if (options.distances) {\n          distances = options.distances;\n          distances.clear();\n        } else {\n          distances = new LocalCollection._IdMap();\n        }\n      }\n      this.collection._docs.forEach(function (doc, id) {\n        var matchResult = _this6.matcher.documentMatches(doc);\n        if (matchResult.result) {\n          if (options.ordered) {\n            results.push(doc);\n            if (distances && matchResult.distance !== undefined) {\n              distances.set(id, matchResult.distance);\n            }\n          } else {\n            results.set(id, doc);\n          }\n        }\n\n        // Override to ensure all docs are matched if ignoring skip & limit\n        if (!applySkipLimit) {\n          return true;\n        }\n\n        // Fast path for limited unsorted queries.\n        // XXX 'length' check here seems wrong for ordered\n        return !_this6.limit || _this6.skip || _this6.sorter || results.length !== _this6.limit;\n      });\n      if (!options.ordered) {\n        return results;\n      }\n      if (this.sorter) {\n        results.sort(this.sorter.getComparator({\n          distances: distances\n        }));\n      }\n\n      // Return the full set of results if there is no skip or limit or if we're\n      // ignoring them\n      if (!applySkipLimit || !this.limit && !this.skip) {\n        return results;\n      }\n      return results.slice(this.skip, this.limit ? this.limit + this.skip : results.length);\n    }\n    return _getRawObjects;\n  }();\n  _proto._publishCursor = function () {\n    function _publishCursor(subscription) {\n      // XXX minimongo should not depend on mongo-livedata!\n      if (!Package.mongo) {\n        throw new Error('Can\\'t publish from Minimongo without the `mongo` package.');\n      }\n      if (!this.collection.name) {\n        throw new Error('Can\\'t publish a cursor from a collection without a name.');\n      }\n      return Package.mongo.Mongo.Collection._publishCursor(this, subscription, this.collection.name);\n    }\n    return _publishCursor;\n  }();\n  return Cursor;\n}(Symbol.iterator, Symbol.asyncIterator);\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(function (method) {\n  var asyncName = getAsyncMethodName(method);\n  Cursor.prototype[asyncName] = function () {\n    try {\n      this[method].isCalledFromAsync = true;\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n      return Promise.resolve(this[method].apply(this, args));\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n});","map":{"version":3,"names":["_regeneratorRuntime","module","link","default","v","export","Cursor","LocalCollection","hasOwn","ASYNC_CURSOR_METHODS","getAsyncMethodName","_Symbol$iterator","_Symbol$asyncIterator","collection","selector","options","arguments","length","undefined","sorter","matcher","Minimongo","Matcher","_selectorIsIdPerhapsAsObject","_selectorId","call","_id","hasGeoQuery","sort","Sorter","skip","limit","fields","projection","_projectionFn","_compileProjection","_transform","wrapTransform","transform","Tracker","reactive","_proto","prototype","count","_depend","added","removed","_getRawObjects","ordered","fetch","result","forEach","doc","push","_this","addedBefore","changed","movedBefore","index","objects","next","element","value","done","syncResult","Symbol","iterator","_callee","async","_callee$","_context","prev","abrupt","Promise","resolve","stop","callback","thisArg","_this2","i","getTransform","map","_this3","observe","_observeFromObserveChanges","observeChanges","_this4","_observeChangesCallbacksAreOrdered","_allow_unordered","Error","distances","_IdMap","query","cursor","dirty","projectionFn","resultsSnapshot","qid","next_qid","queries","results","paused","wrapCallback","fn","self","_this5","args","_observeQueue","queueTask","apply","_suppress_initial","EJSON","clone","handle","Object","assign","ObserveHandle","active","onInvalidate","drain","changers","dependency","Dependency","notify","bind","depend","_getCollectionName","name","_this6","applySkipLimit","selectedDoc","_docs","get","set","clear","id","matchResult","documentMatches","distance","getComparator","slice","_publishCursor","subscription","Package","mongo","Mongo","Collection","asyncIterator","method","asyncName","isCalledFromAsync","_len","Array","_key","error","reject"],"sources":["packages/minimongo/cursor.js"],"sourcesContent":["import LocalCollection from './local_collection.js';\nimport { hasOwn } from './common.js';\nimport { ASYNC_CURSOR_METHODS, getAsyncMethodName } from \"./constants\";\n\n// Cursor: a specification for a particular subset of documents, w/ a defined\n// order, limit, and offset.  creating a Cursor with LocalCollection.find(),\nexport default class Cursor {\n  // don't call this ctor directly.  use LocalCollection.find().\n  constructor(collection, selector, options = {}) {\n    this.collection = collection;\n    this.sorter = null;\n    this.matcher = new Minimongo.Matcher(selector);\n\n    if (LocalCollection._selectorIsIdPerhapsAsObject(selector)) {\n      // stash for fast _id and { _id }\n      this._selectorId = hasOwn.call(selector, '_id')\n        ? selector._id\n        : selector;\n    } else {\n      this._selectorId = undefined;\n\n      if (this.matcher.hasGeoQuery() || options.sort) {\n        this.sorter = new Minimongo.Sorter(options.sort || []);\n      }\n    }\n\n    this.skip = options.skip || 0;\n    this.limit = options.limit;\n    this.fields = options.projection || options.fields;\n\n    this._projectionFn = LocalCollection._compileProjection(this.fields || {});\n\n    this._transform = LocalCollection.wrapTransform(options.transform);\n\n    // by default, queries register w/ Tracker when it is available.\n    if (typeof Tracker !== 'undefined') {\n      this.reactive = options.reactive === undefined ? true : options.reactive;\n    }\n  }\n\n  /**\n   * @deprecated in 2.9\n   * @summary Returns the number of documents that match a query. This method is\n   *          [deprecated since MongoDB 4.0](https://www.mongodb.com/docs/v4.4/reference/command/count/);\n   *          see `Collection.countDocuments` and\n   *          `Collection.estimatedDocumentCount` for a replacement.\n   * @memberOf Mongo.Cursor\n   * @method  count\n   * @instance\n   * @locus Anywhere\n   * @returns {Number}\n   */\n  count() {\n    if (this.reactive) {\n      // allow the observe to be unordered\n      this._depend({added: true, removed: true}, true);\n    }\n\n    return this._getRawObjects({\n      ordered: true,\n    }).length;\n  }\n\n  /**\n   * @summary Return all matching documents as an Array.\n   * @memberOf Mongo.Cursor\n   * @method  fetch\n   * @instance\n   * @locus Anywhere\n   * @returns {Object[]}\n   */\n  fetch() {\n    const result = [];\n\n    this.forEach(doc => {\n      result.push(doc);\n    });\n\n    return result;\n  }\n\n  [Symbol.iterator]() {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    let index = 0;\n    const objects = this._getRawObjects({ordered: true});\n\n    return {\n      next: () => {\n        if (index < objects.length) {\n          // This doubles as a clone operation.\n          let element = this._projectionFn(objects[index++]);\n\n          if (this._transform)\n            element = this._transform(element);\n\n          return {value: element};\n        }\n\n        return {done: true};\n      }\n    };\n  }\n\n  [Symbol.asyncIterator]() {\n    const syncResult = this[Symbol.iterator]();\n    return {\n      async next() {\n        return Promise.resolve(syncResult.next());\n      }\n    };\n  }\n\n  /**\n   * @callback IterationCallback\n   * @param {Object} doc\n   * @param {Number} index\n   */\n  /**\n   * @summary Call `callback` once for each matching document, sequentially and\n   *          synchronously.\n   * @locus Anywhere\n   * @method  forEach\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  forEach(callback, thisArg) {\n    if (this.reactive) {\n      this._depend({\n        addedBefore: true,\n        removed: true,\n        changed: true,\n        movedBefore: true});\n    }\n\n    this._getRawObjects({ordered: true}).forEach((element, i) => {\n      // This doubles as a clone operation.\n      element = this._projectionFn(element);\n\n      if (this._transform) {\n        element = this._transform(element);\n      }\n\n      callback.call(thisArg, element, i, this);\n    });\n  }\n\n  getTransform() {\n    return this._transform;\n  }\n\n  /**\n   * @summary Map callback over all matching documents.  Returns an Array.\n   * @locus Anywhere\n   * @method map\n   * @instance\n   * @memberOf Mongo.Cursor\n   * @param {IterationCallback} callback Function to call. It will be called\n   *                                     with three arguments: the document, a\n   *                                     0-based index, and <em>cursor</em>\n   *                                     itself.\n   * @param {Any} [thisArg] An object which will be the value of `this` inside\n   *                        `callback`.\n   */\n  map(callback, thisArg) {\n    const result = [];\n\n    this.forEach((doc, i) => {\n      result.push(callback.call(thisArg, doc, i, this));\n    });\n\n    return result;\n  }\n\n  // options to contain:\n  //  * callbacks for observe():\n  //    - addedAt (document, atIndex)\n  //    - added (document)\n  //    - changedAt (newDocument, oldDocument, atIndex)\n  //    - changed (newDocument, oldDocument)\n  //    - removedAt (document, atIndex)\n  //    - removed (document)\n  //    - movedTo (document, oldIndex, newIndex)\n  //\n  // attributes available on returned query handle:\n  //  * stop(): end updates\n  //  * collection: the collection this query is querying\n  //\n  // iff x is a returned query handle, (x instanceof\n  // LocalCollection.ObserveHandle) is true\n  //\n  // initial results delivered through added callback\n  // XXX maybe callbacks should take a list of objects, to expose transactions?\n  // XXX maybe support field limiting (to limit what you're notified on)\n\n  /**\n   * @summary Watch a query.  Receive callbacks as the result set changes.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observe(options) {\n    return LocalCollection._observeFromObserveChanges(this, options);\n  }\n\n  /**\n   * @summary Watch a query. Receive callbacks as the result set changes. Only\n   *          the differences between the old and new documents are passed to\n   *          the callbacks.\n   * @locus Anywhere\n   * @memberOf Mongo.Cursor\n   * @instance\n   * @param {Object} callbacks Functions to call to deliver the result set as it\n   *                           changes\n   */\n  observeChanges(options) {\n    const ordered = LocalCollection._observeChangesCallbacksAreOrdered(options);\n\n    // there are several places that assume you aren't combining skip/limit with\n    // unordered observe.  eg, update's EJSON.clone, and the \"there are several\"\n    // comment in _modifyAndNotify\n    // XXX allow skip/limit with unordered observe\n    if (!options._allow_unordered && !ordered && (this.skip || this.limit)) {\n      throw new Error(\n        \"Must use an ordered observe with skip or limit (i.e. 'addedBefore' \" +\n        \"for observeChanges or 'addedAt' for observe, instead of 'added').\"\n      );\n    }\n\n    if (this.fields && (this.fields._id === 0 || this.fields._id === false)) {\n      throw Error('You may not observe a cursor with {fields: {_id: 0}}');\n    }\n\n    const distances = (\n      this.matcher.hasGeoQuery() &&\n      ordered &&\n      new LocalCollection._IdMap\n    );\n\n    const query = {\n      cursor: this,\n      dirty: false,\n      distances,\n      matcher: this.matcher, // not fast pathed\n      ordered,\n      projectionFn: this._projectionFn,\n      resultsSnapshot: null,\n      sorter: ordered && this.sorter\n    };\n\n    let qid;\n\n    // Non-reactive queries call added[Before] and then never call anything\n    // else.\n    if (this.reactive) {\n      qid = this.collection.next_qid++;\n      this.collection.queries[qid] = query;\n    }\n\n    query.results = this._getRawObjects({ordered, distances: query.distances});\n\n    if (this.collection.paused) {\n      query.resultsSnapshot = ordered ? [] : new LocalCollection._IdMap;\n    }\n\n    // wrap callbacks we were passed. callbacks only fire when not paused and\n    // are never undefined\n    // Filters out blacklisted fields according to cursor's projection.\n    // XXX wrong place for this?\n\n    // furthermore, callbacks enqueue until the operation we're working on is\n    // done.\n    const wrapCallback = fn => {\n      if (!fn) {\n        return () => {};\n      }\n\n      const self = this;\n      return function(/* args*/) {\n        if (self.collection.paused) {\n          return;\n        }\n\n        const args = arguments;\n\n        self.collection._observeQueue.queueTask(() => {\n          fn.apply(this, args);\n        });\n      };\n    };\n\n    query.added = wrapCallback(options.added);\n    query.changed = wrapCallback(options.changed);\n    query.removed = wrapCallback(options.removed);\n\n    if (ordered) {\n      query.addedBefore = wrapCallback(options.addedBefore);\n      query.movedBefore = wrapCallback(options.movedBefore);\n    }\n\n    if (!options._suppress_initial && !this.collection.paused) {\n      query.results.forEach(doc => {\n        const fields = EJSON.clone(doc);\n\n        delete fields._id;\n\n        if (ordered) {\n          query.addedBefore(doc._id, this._projectionFn(fields), null);\n        }\n\n        query.added(doc._id, this._projectionFn(fields));\n      });\n    }\n\n    const handle = Object.assign(new LocalCollection.ObserveHandle, {\n      collection: this.collection,\n      stop: () => {\n        if (this.reactive) {\n          delete this.collection.queries[qid];\n        }\n      }\n    });\n\n    if (this.reactive && Tracker.active) {\n      // XXX in many cases, the same observe will be recreated when\n      // the current autorun is rerun.  we could save work by\n      // letting it linger across rerun and potentially get\n      // repurposed if the same observe is performed, using logic\n      // similar to that of Meteor.subscribe.\n      Tracker.onInvalidate(() => {\n        handle.stop();\n      });\n    }\n\n    // run the observe callbacks resulting from the initial contents\n    // before we leave the observe.\n    this.collection._observeQueue.drain();\n\n    return handle;\n  }\n\n  // XXX Maybe we need a version of observe that just calls a callback if\n  // anything changed.\n  _depend(changers, _allow_unordered) {\n    if (Tracker.active) {\n      const dependency = new Tracker.Dependency;\n      const notify = dependency.changed.bind(dependency);\n\n      dependency.depend();\n\n      const options = {_allow_unordered, _suppress_initial: true};\n\n      ['added', 'addedBefore', 'changed', 'movedBefore', 'removed']\n        .forEach(fn => {\n          if (changers[fn]) {\n            options[fn] = notify;\n          }\n        });\n\n      // observeChanges will stop() when this computation is invalidated\n      this.observeChanges(options);\n    }\n  }\n\n  _getCollectionName() {\n    return this.collection.name;\n  }\n\n  // Returns a collection of matching objects, but doesn't deep copy them.\n  //\n  // If ordered is set, returns a sorted array, respecting sorter, skip, and\n  // limit properties of the query provided that options.applySkipLimit is\n  // not set to false (#1201). If sorter is falsey, no sort -- you get the\n  // natural order.\n  //\n  // If ordered is not set, returns an object mapping from ID to doc (sorter,\n  // skip and limit should not be set).\n  //\n  // If ordered is set and this cursor is a $near geoquery, then this function\n  // will use an _IdMap to track each distance from the $near argument point in\n  // order to use it as a sort key. If an _IdMap is passed in the 'distances'\n  // argument, this function will clear it and use it for this purpose\n  // (otherwise it will just create its own _IdMap). The observeChanges\n  // implementation uses this to remember the distances after this function\n  // returns.\n  _getRawObjects(options = {}) {\n    // By default this method will respect skip and limit because .fetch(),\n    // .forEach() etc... expect this behaviour. It can be forced to ignore\n    // skip and limit by setting applySkipLimit to false (.count() does this,\n    // for example)\n    const applySkipLimit = options.applySkipLimit !== false;\n\n    // XXX use OrderedDict instead of array, and make IdMap and OrderedDict\n    // compatible\n    const results = options.ordered ? [] : new LocalCollection._IdMap;\n\n    // fast path for single ID value\n    if (this._selectorId !== undefined) {\n      // If you have non-zero skip and ask for a single id, you get nothing.\n      // This is so it matches the behavior of the '{_id: foo}' path.\n      if (applySkipLimit && this.skip) {\n        return results;\n      }\n\n      const selectedDoc = this.collection._docs.get(this._selectorId);\n\n      if (selectedDoc) {\n        if (options.ordered) {\n          results.push(selectedDoc);\n        } else {\n          results.set(this._selectorId, selectedDoc);\n        }\n      }\n\n      return results;\n    }\n\n    // slow path for arbitrary selector, sort, skip, limit\n\n    // in the observeChanges case, distances is actually part of the \"query\"\n    // (ie, live results set) object.  in other cases, distances is only used\n    // inside this function.\n    let distances;\n    if (this.matcher.hasGeoQuery() && options.ordered) {\n      if (options.distances) {\n        distances = options.distances;\n        distances.clear();\n      } else {\n        distances = new LocalCollection._IdMap();\n      }\n    }\n\n    this.collection._docs.forEach((doc, id) => {\n      const matchResult = this.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (options.ordered) {\n          results.push(doc);\n\n          if (distances && matchResult.distance !== undefined) {\n            distances.set(id, matchResult.distance);\n          }\n        } else {\n          results.set(id, doc);\n        }\n      }\n\n      // Override to ensure all docs are matched if ignoring skip & limit\n      if (!applySkipLimit) {\n        return true;\n      }\n\n      // Fast path for limited unsorted queries.\n      // XXX 'length' check here seems wrong for ordered\n      return (\n        !this.limit ||\n        this.skip ||\n        this.sorter ||\n        results.length !== this.limit\n      );\n    });\n\n    if (!options.ordered) {\n      return results;\n    }\n\n    if (this.sorter) {\n      results.sort(this.sorter.getComparator({distances}));\n    }\n\n    // Return the full set of results if there is no skip or limit or if we're\n    // ignoring them\n    if (!applySkipLimit || (!this.limit && !this.skip)) {\n      return results;\n    }\n\n    return results.slice(\n      this.skip,\n      this.limit ? this.limit + this.skip : results.length\n    );\n  }\n\n  _publishCursor(subscription) {\n    // XXX minimongo should not depend on mongo-livedata!\n    if (!Package.mongo) {\n      throw new Error(\n        'Can\\'t publish from Minimongo without the `mongo` package.'\n      );\n    }\n\n    if (!this.collection.name) {\n      throw new Error(\n        'Can\\'t publish a cursor from a collection without a name.'\n      );\n    }\n\n    return Package.mongo.Mongo.Collection._publishCursor(\n      this,\n      subscription,\n      this.collection.name\n    );\n  }\n}\n\n// Implements async version of cursor methods to keep collections isomorphic\nASYNC_CURSOR_METHODS.forEach(method => {\n  const asyncName = getAsyncMethodName(method);\n  Cursor.prototype[asyncName] = function(...args) {\n    try {\n      this[method].isCalledFromAsync = true;\n      return Promise.resolve(this[method].apply(this, args));\n    } catch (error) {\n      return Promise.reject(error);\n    }\n  };\n});\n"],"mappings":"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"},"sourceType":"module","externalDependencies":{},"hash":"b63b86710eb10ae976b8a370a30e8ad15c810072"}
